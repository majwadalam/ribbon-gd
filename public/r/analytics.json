{
  "name": "analytics",
  "type": "page",
  "files": [
    {
      "name": "page.tsx",
      "content": "\"use client\"\r\n\r\nimport { V0Button } from \"@/components/v0-button\"\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { useToast } from \"@/lib/use-toast\"\r\nimport { TrendingUp, Users, CreditCard, Activity, Calendar, Download, BarChart3, PieChart, LineChart, RefreshCw } from \"lucide-react\"\r\nimport { LineChart as RechartsLineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart as RechartsPieChart, Pie, Cell, AreaChart, Area, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts'\r\nimport { useState } from \"react\"\r\n\r\n// Type definitions for comprehensive analytics data structure\r\ninterface OverviewMetric {\r\n  value: string;\r\n  change: string;\r\n  trend: string;\r\n}\r\n\r\ninterface RecentSale {\r\n  name: string;\r\n  email: string;\r\n  amount: string;\r\n}\r\n\r\ninterface RevenueDataPoint {\r\n  month: string;\r\n  revenue: number;\r\n  orders: number;\r\n  customers: number;\r\n  conversion: number;\r\n}\r\n\r\ninterface UserAnalytics {\r\n  totalUsers: number;\r\n  newUsers: number;\r\n  returningUsers: number;\r\n  sessionDuration: string;\r\n  bounceRate: string;\r\n  conversionRate: string;\r\n}\r\n\r\ninterface TrafficSource {\r\n  source: string;\r\n  users: number;\r\n  percentage: number;\r\n  color: string;\r\n}\r\n\r\ninterface PerformanceMetric {\r\n  metric: string;\r\n  value: number;\r\n  target: number;\r\n  score: number;\r\n  color: string;\r\n}\r\n\r\ninterface AnalyticsData {\r\n  overview: {\r\n    revenue: OverviewMetric;\r\n    subscriptions: OverviewMetric;\r\n    sales: OverviewMetric;\r\n    activeNow: OverviewMetric;\r\n  };\r\n  recentSales: RecentSale[];\r\n  revenueData: RevenueDataPoint[];\r\n  userAnalytics: UserAnalytics;\r\n  trafficSources: TrafficSource[];\r\n  performanceMetrics: PerformanceMetric[];\r\n}\r\n\r\n// Comprehensive sample data for analytics dashboard\r\nconst analyticsData: AnalyticsData = {\r\n  overview: {\r\n    revenue: { value: \"$45,231.89\", change: \"+20.1%\", trend: \"up\" },\r\n    subscriptions: { value: \"2,350\", change: \"+180.1%\", trend: \"up\" },\r\n    sales: { value: \"12,234\", change: \"+19%\", trend: \"up\" },\r\n    activeNow: { value: \"573\", change: \"+201\", trend: \"up\" }\r\n  },\r\n  recentSales: [\r\n    { name: \"Olivia Martin\", email: \"olivia.martin@email.com\", amount: \"+$1,999.00\" },\r\n    { name: \"Jackson Lee\", email: \"jackson.lee@email.com\", amount: \"+$39.00\" },\r\n    { name: \"Isabella Nguyen\", email: \"isabella.nguyen@email.com\", amount: \"+$299.00\" },\r\n    { name: \"William Kim\", email: \"will@email.com\", amount: \"+$99.00\" },\r\n    { name: \"Sofia Davis\", email: \"sofia.davis@email.com\", amount: \"+$39.00\" }\r\n  ],\r\n  revenueData: [\r\n    { month: \"Jan\", revenue: 42350, orders: 1234, customers: 856, conversion: 3.2 },\r\n    { month: \"Feb\", revenue: 45680, orders: 1367, customers: 923, conversion: 3.4 },\r\n    { month: \"Mar\", revenue: 48920, orders: 1456, customers: 1012, conversion: 3.6 },\r\n    { month: \"Apr\", revenue: 52100, orders: 1523, customers: 1145, conversion: 3.5 },\r\n    { month: \"May\", revenue: 48500, orders: 1489, customers: 1203, conversion: 3.3 },\r\n    { month: \"Jun\", revenue: 51200, orders: 1598, customers: 1278, conversion: 3.7 }\r\n  ],\r\n  userAnalytics: {\r\n    totalUsers: 12456,\r\n    newUsers: 2343,\r\n    returningUsers: 10113,\r\n    sessionDuration: \"4m 32s\",\r\n    bounceRate: \"32.5%\",\r\n    conversionRate: \"3.2%\"\r\n  },\r\n  trafficSources: [\r\n    { source: \"Organic Search\", users: 4567, percentage: 36.7, color: \"#0088FE\" },\r\n    { source: \"Direct\", users: 3456, percentage: 27.8, color: \"#00C49F\" },\r\n    { source: \"Social Media\", users: 2345, percentage: 18.8, color: \"#FFBB28\" },\r\n    { source: \"Email\", users: 1234, percentage: 9.9, color: \"#FF8042\" },\r\n    { source: \"Referral\", users: 854, percentage: 6.8, color: \"#8884D8\" }\r\n  ],\r\n  performanceMetrics: [\r\n    { metric: \"Page Load Time\", value: 1.2, target: 2.0, score: 85, color: \"#10B981\" },\r\n    { metric: \"API Response\", value: 245, target: 500, score: 92, color: \"#3B82F6\" },\r\n    { metric: \"Error Rate\", value: 0.1, target: 1.0, score: 95, color: \"#8B5CF6\" },\r\n    { metric: \"Uptime\", value: 99.9, target: 99.5, score: 100, color: \"#F59E0B\" },\r\n    { metric: \"Throughput\", value: 1247, target: 1000, score: 88, color: \"#EF4444\" }\r\n  ]\r\n}\r\n\r\n// Type definitions for export functionality\r\ntype ExportSection = \"overview\" | \"revenue\" | \"users\" | \"performance\" | \"all\";\r\ntype ExportFormat = \"csv\" | \"json\";\r\n\r\n// Complete code string for V0 button - includes the entire component\r\nconst ANALYTICS_CODE = `\"use client\"\r\n\r\nimport { V0Button } from \"@/components/v0-button\"\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { useToast } from \"@/lib/use-toast\"\r\nimport { TrendingUp, Users, CreditCard, Activity, Calendar, Download, BarChart3, PieChart, LineChart, RefreshCw } from \"lucide-react\"\r\nimport { LineChart as RechartsLineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart as RechartsPieChart, Pie, Cell, AreaChart, Area, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts'\r\nimport { useState } from \"react\"\r\n\r\n// Type definitions for comprehensive analytics data structure\r\ninterface OverviewMetric {\r\n  value: string;\r\n  change: string;\r\n  trend: string;\r\n}\r\n\r\ninterface RecentSale {\r\n  name: string;\r\n  email: string;\r\n  amount: string;\r\n}\r\n\r\ninterface RevenueDataPoint {\r\n  month: string;\r\n  revenue: number;\r\n  orders: number;\r\n  customers: number;\r\n  conversion: number;\r\n}\r\n\r\ninterface UserAnalytics {\r\n  totalUsers: number;\r\n  newUsers: number;\r\n  returningUsers: number;\r\n  sessionDuration: string;\r\n  bounceRate: string;\r\n  conversionRate: string;\r\n}\r\n\r\ninterface TrafficSource {\r\n  source: string;\r\n  users: number;\r\n  percentage: number;\r\n  color: string;\r\n}\r\n\r\ninterface PerformanceMetric {\r\n  metric: string;\r\n  value: number;\r\n  target: number;\r\n  score: number;\r\n  color: string;\r\n}\r\n\r\ninterface AnalyticsData {\r\n  overview: {\r\n    revenue: OverviewMetric;\r\n    subscriptions: OverviewMetric;\r\n    sales: OverviewMetric;\r\n    activeNow: OverviewMetric;\r\n  };\r\n  recentSales: RecentSale[];\r\n  revenueData: RevenueDataPoint[];\r\n  userAnalytics: UserAnalytics;\r\n  trafficSources: TrafficSource[];\r\n  performanceMetrics: PerformanceMetric[];\r\n}\r\n\r\n// Comprehensive sample data for analytics dashboard\r\nconst analyticsData: AnalyticsData = {\r\n  overview: {\r\n    revenue: { value: \"$45,231.89\", change: \"+20.1%\", trend: \"up\" },\r\n    subscriptions: { value: \"2,350\", change: \"+180.1%\", trend: \"up\" },\r\n    sales: { value: \"12,234\", change: \"+19%\", trend: \"up\" },\r\n    activeNow: { value: \"573\", change: \"+201\", trend: \"up\" }\r\n  },\r\n  recentSales: [\r\n    { name: \"Olivia Martin\", email: \"olivia.martin@email.com\", amount: \"+$1,999.00\" },\r\n    { name: \"Jackson Lee\", email: \"jackson.lee@email.com\", amount: \"+$39.00\" },\r\n    { name: \"Isabella Nguyen\", email: \"isabella.nguyen@email.com\", amount: \"+$299.00\" },\r\n    { name: \"William Kim\", email: \"will@email.com\", amount: \"+$99.00\" },\r\n    { name: \"Sofia Davis\", email: \"sofia.davis@email.com\", amount: \"+$39.00\" }\r\n  ],\r\n  revenueData: [\r\n    { month: \"Jan\", revenue: 42350, orders: 1234, customers: 856, conversion: 3.2 },\r\n    { month: \"Feb\", revenue: 45680, orders: 1367, customers: 923, conversion: 3.4 },\r\n    { month: \"Mar\", revenue: 48920, orders: 1456, customers: 1012, conversion: 3.6 },\r\n    { month: \"Apr\", revenue: 52100, orders: 1523, customers: 1145, conversion: 3.5 },\r\n    { month: \"May\", revenue: 48500, orders: 1489, customers: 1203, conversion: 3.3 },\r\n    { month: \"Jun\", revenue: 51200, orders: 1598, customers: 1278, conversion: 3.7 }\r\n  ],\r\n  userAnalytics: {\r\n    totalUsers: 12456,\r\n    newUsers: 2343,\r\n    returningUsers: 10113,\r\n    sessionDuration: \"4m 32s\",\r\n    bounceRate: \"32.5%\",\r\n    conversionRate: \"3.2%\"\r\n  },\r\n  trafficSources: [\r\n    { source: \"Organic Search\", users: 4567, percentage: 36.7, color: \"#0088FE\" },\r\n    { source: \"Direct\", users: 3456, percentage: 27.8, color: \"#00C49F\" },\r\n    { source: \"Social Media\", users: 2345, percentage: 18.8, color: \"#FFBB28\" },\r\n    { source: \"Email\", users: 1234, percentage: 9.9, color: \"#FF8042\" },\r\n    { source: \"Referral\", users: 854, percentage: 6.8, color: \"#8884D8\" }\r\n  ],\r\n  performanceMetrics: [\r\n    { metric: \"Page Load Time\", value: 1.2, target: 2.0, score: 85, color: \"#10B981\" },\r\n    { metric: \"API Response\", value: 245, target: 500, score: 92, color: \"#3B82F6\" },\r\n    { metric: \"Error Rate\", value: 0.1, target: 1.0, score: 95, color: \"#8B5CF6\" },\r\n    { metric: \"Uptime\", value: 99.9, target: 99.5, score: 100, color: \"#F59E0B\" },\r\n    { metric: \"Throughput\", value: 1247, target: 1000, score: 88, color: \"#EF4444\" }\r\n  ]\r\n}\r\n\r\n// Type definitions for export functionality\r\ntype ExportSection = \"overview\" | \"revenue\" | \"users\" | \"performance\" | \"all\";\r\ntype ExportFormat = \"csv\" | \"json\";\r\n\r\nexport default function Analytics() {\r\n  // State for refresh functionality\r\n  const [isRefreshing, setIsRefreshing] = useState(false)\r\n  const { toast } = useToast()\r\n\r\n  // Handle refreshing analytics data\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true)\r\n    await new Promise(resolve => setTimeout(resolve, 1500))\r\n    setIsRefreshing(false)\r\n    toast({\r\n      title: \"Analytics Refreshed\",\r\n      description: \"All analytics data has been updated with the latest metrics.\",\r\n    })\r\n  }\r\n\r\n  // Export analytics data functionality\r\n  const exportAnalytics = (section: ExportSection = \"all\", format: ExportFormat = \"csv\") => {\r\n    let data: any = {}\r\n    let filename = \"analytics\"\r\n\r\n    switch (section) {\r\n      case \"overview\":\r\n        data = analyticsData.overview\r\n        filename = \"analytics-overview\"\r\n        break\r\n      case \"revenue\":\r\n        data = analyticsData.revenueData\r\n        filename = \"analytics-revenue\"\r\n        break\r\n      case \"users\":\r\n        data = analyticsData.userAnalytics\r\n        filename = \"analytics-users\"\r\n        break\r\n      case \"performance\":\r\n        data = analyticsData.performanceMetrics\r\n        filename = \"analytics-performance\"\r\n        break\r\n      default:\r\n        data = analyticsData\r\n        filename = \"analytics-complete\"\r\n    }\r\n\r\n    if (format === \"csv\") {\r\n      exportToCSV(data, filename)\r\n    } else {\r\n      exportToJSON(data, filename)\r\n    }\r\n  }\r\n\r\n  // Export data to CSV format\r\n  const exportToCSV = (data: any, filename: string) => {\r\n    let csvContent = \"\"\r\n    \r\n    if (Array.isArray(data)) {\r\n      if (data.length > 0) {\r\n        const headers = Object.keys(data[0]).join(\",\")\r\n        csvContent = headers + \"\\\\n\"\r\n        data.forEach(row => {\r\n          csvContent += Object.values(row).join(\",\") + \"\\\\n\"\r\n        })\r\n      }\r\n    } else if (typeof data === 'object' && data !== null) {\r\n      csvContent = \"Metric,Value,Change,Trend\\\\n\"\r\n      Object.entries(data).forEach(([key, value]) => {\r\n        if (typeof value === 'object' && value !== null && 'value' in value) {\r\n          const metric = value as OverviewMetric\r\n          csvContent += \\`\\${key},\\${metric.value},\\${metric.change || ''},\\${metric.trend || ''}\\\\n\\`\r\n        } else {\r\n          csvContent += \\`\\${key},\\${value},,\\\\n\\`\r\n        }\r\n      })\r\n    }\r\n\r\n    const blob = new Blob([csvContent], { type: 'text/csv' })\r\n    const url = window.URL.createObjectURL(blob)\r\n    const a = document.createElement('a')\r\n    a.setAttribute('hidden', '')\r\n    a.setAttribute('href', url)\r\n    a.setAttribute('download', \\`\\${filename}.csv\\`)\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n    \r\n    toast({\r\n      title: \"Export Successful\",\r\n      description: \\`\\${filename}.csv has been downloaded successfully.\\`,\r\n    })\r\n  }\r\n\r\n  // Export data to JSON format\r\n  const exportToJSON = (data: any, filename: string) => {\r\n    const dataStr = JSON.stringify(data, null, 2)\r\n    const blob = new Blob([dataStr], { type: 'application/json' })\r\n    const url = window.URL.createObjectURL(blob)\r\n    const a = document.createElement('a')\r\n    a.setAttribute('hidden', '')\r\n    a.setAttribute('href', url)\r\n    a.setAttribute('download', \\`\\${filename}.json\\`)\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n    \r\n    toast({\r\n      title: \"Export Successful\",\r\n      description: \\`\\${filename}.json has been downloaded successfully.\\`,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6 p-6\">\r\n      {/* Page Header with Action Buttons */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Analytics & Reports</h1>\r\n          <p className=\"text-muted-foreground mt-1\">\r\n            Detailed insights and comprehensive reporting for your business.\r\n          </p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\" \r\n            onClick={handleRefresh}\r\n            disabled={isRefreshing}\r\n          >\r\n            <RefreshCw className={\\`h-4 w-4 mr-2 \\${isRefreshing ? 'animate-spin' : ''}\\`} />\r\n            Refresh\r\n          </Button>\r\n          <V0Button \r\n            prompt=\"just render the ui as it is of this page , dont make any changes, just as it is\"\r\n            code={ANALYTICS_CODE}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tabbed Analytics Interface */}\r\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n          <TabsTrigger value=\"revenue\">Revenue</TabsTrigger>\r\n          <TabsTrigger value=\"users\">Users</TabsTrigger>\r\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\r\n        </TabsList>\r\n\r\n        {/* Overview Tab - Main Dashboard */}\r\n        <TabsContent value=\"overview\" className=\"space-y-4\">\r\n          <div className=\"flex justify-end\">\r\n            <Button \r\n              variant=\"outline\" \r\n              size=\"sm\"\r\n              onClick={() => exportAnalytics(\"overview\", \"csv\")}\r\n            >\r\n              <Download className=\"h-4 w-4 mr-2\" />\r\n              Export Overview\r\n            </Button>\r\n          </div>\r\n          \r\n          {/* Key Metrics Cards */}\r\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n            <Card className=\"card-hover\">\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\r\n                <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.overview.revenue.value}</div>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  <span className=\"text-green-500\">{analyticsData.overview.revenue.change}</span> from last month\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card className=\"card-hover\">\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Subscriptions</CardTitle>\r\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.overview.subscriptions.value}</div>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  <span className=\"text-green-500\">{analyticsData.overview.subscriptions.change}</span> from last month\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card className=\"card-hover\">\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Sales</CardTitle>\r\n                <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.overview.sales.value}</div>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  <span className=\"text-green-500\">{analyticsData.overview.sales.change}</span> from last month\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card className=\"card-hover\">\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Active Now</CardTitle>\r\n                <Activity className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.overview.activeNow.value}</div>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  <span className=\"text-green-500\">{analyticsData.overview.activeNow.change}</span> since last hour\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Charts Section */}\r\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-7\">\r\n            {/* Revenue Overview Chart */}\r\n            <Card className=\"col-span-4\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center justify-between\">\r\n                  <span>Revenue Overview</span>\r\n                  <Button \r\n                    variant=\"ghost\" \r\n                    size=\"sm\"\r\n                    onClick={() => exportAnalytics(\"revenue\", \"csv\")}\r\n                  >\r\n                    <Download className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"pl-2\">\r\n                <ResponsiveContainer width=\"100%\" height={350}>\r\n                  <AreaChart data={analyticsData.revenueData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\r\n                    <XAxis \r\n                      dataKey=\"month\" \r\n                      className=\"text-muted-foreground\"\r\n                      fontSize={12}\r\n                    />\r\n                    <YAxis \r\n                      className=\"text-muted-foreground\"\r\n                      fontSize={12}\r\n                      tickFormatter={(value) => \\`$\\${(value / 1000).toFixed(0)}k\\`}\r\n                    />\r\n                    <Tooltip \r\n                      contentStyle={{\r\n                        backgroundColor: 'hsl(var(--background))',\r\n                        border: '1px solid hsl(var(--border))',\r\n                        borderRadius: '6px'\r\n                      }}\r\n                      formatter={(value, name) => {\r\n                        if (name === 'revenue') return [\\`$\\${Number(value).toLocaleString()}\\`, 'Revenue']\r\n                        return [Number(value).toLocaleString(), name]\r\n                      }}\r\n                    />\r\n                    <Area \r\n                      type=\"monotone\" \r\n                      dataKey=\"revenue\" \r\n                      stroke=\"hsl(var(--primary))\" \r\n                      fill=\"hsl(var(--primary))\"\r\n                      fillOpacity={0.1}\r\n                      strokeWidth={2}\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Traffic Sources */}\r\n            <Card className=\"col-span-3\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center justify-between\">\r\n                  <span>Traffic Sources</span>\r\n                  <Button \r\n                    variant=\"ghost\" \r\n                    size=\"sm\"\r\n                    onClick={() => exportToCSV(analyticsData.trafficSources, \"traffic-sources\")}\r\n                  >\r\n                    <Download className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  User acquisition by channel\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3 mb-4\">\r\n                  {analyticsData.trafficSources.map((source, index) => (\r\n                    <div key={index} className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <div \r\n                          className=\"w-3 h-3 rounded-full\" \r\n                          style={{ backgroundColor: source.color }}\r\n                        />\r\n                        <span className=\"text-sm font-medium\">{source.source}</span>\r\n                      </div>\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        {source.users.toLocaleString()} ({source.percentage}%)\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                <ResponsiveContainer width=\"100%\" height={200}>\r\n                  <RechartsPieChart>\r\n                    <Pie\r\n                      data={analyticsData.trafficSources}\r\n                      cx=\"50%\"\r\n                      cy=\"50%\"\r\n                      outerRadius={60}\r\n                      fill=\"#8884d8\"\r\n                      dataKey=\"users\"\r\n                    >\r\n                      {analyticsData.trafficSources.map((entry, index) => (\r\n                        <Cell key={\\`cell-\\${index}\\`} fill={entry.color} />\r\n                      ))}\r\n                    </Pie>\r\n                    <Tooltip formatter={(value) => [Number(value).toLocaleString(), 'Users']} />\r\n                  </RechartsPieChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        {/* Revenue Tab - Detailed Revenue Analytics */}\r\n        <TabsContent value=\"revenue\" className=\"space-y-4\">\r\n          <div className=\"flex justify-end\">\r\n            <Button \r\n              variant=\"outline\" \r\n              size=\"sm\"\r\n              onClick={() => exportAnalytics(\"revenue\", \"csv\")}\r\n            >\r\n              <Download className=\"h-4 w-4 mr-2\" />\r\n              Export Revenue Data\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Revenue Analytics Chart */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <BarChart3 className=\"h-5 w-5\" />\r\n                Revenue Analytics\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Detailed revenue breakdown and trends\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <ResponsiveContainer width=\"100%\" height={400}>\r\n                <RechartsLineChart data={analyticsData.revenueData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\r\n                  <XAxis \r\n                    dataKey=\"month\" \r\n                    className=\"text-muted-foreground\"\r\n                    fontSize={12}\r\n                  />\r\n                  <YAxis \r\n                    className=\"text-muted-foreground\"\r\n                    fontSize={12}\r\n                    yAxisId=\"left\"\r\n                    tickFormatter={(value) => \\`$\\${(value / 1000).toFixed(0)}k\\`}\r\n                  />\r\n                  <YAxis \r\n                    className=\"text-muted-foreground\"\r\n                    fontSize={12}\r\n                    yAxisId=\"right\"\r\n                    orientation=\"right\"\r\n                  />\r\n                  <Tooltip \r\n                    contentStyle={{\r\n                      backgroundColor: 'hsl(var(--background))',\r\n                      border: '1px solid hsl(var(--border))',\r\n                      borderRadius: '6px'\r\n                    }}\r\n                    formatter={(value, name) => {\r\n                      if (name === 'revenue') return [\\`$\\${Number(value).toLocaleString()}\\`, 'Revenue']\r\n                      if (name === 'conversion') return [\\`\\${value}%\\`, 'Conversion Rate']\r\n                      return [Number(value).toLocaleString(), name]\r\n                    }}\r\n                  />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"revenue\" \r\n                    stroke=\"hsl(var(--primary))\" \r\n                    strokeWidth={2}\r\n                    yAxisId=\"left\"\r\n                    dot={{ fill: 'hsl(var(--primary))' }}\r\n                  />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"orders\" \r\n                    stroke=\"hsl(var(--chart-2))\" \r\n                    strokeWidth={2}\r\n                    yAxisId=\"right\"\r\n                    dot={{ fill: 'hsl(var(--chart-2))' }}\r\n                  />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"conversion\" \r\n                    stroke=\"hsl(var(--chart-3))\" \r\n                    strokeWidth={2}\r\n                    yAxisId=\"right\"\r\n                    dot={{ fill: 'hsl(var(--chart-3))' }}\r\n                  />\r\n                </RechartsLineChart>\r\n              </ResponsiveContainer>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Revenue Summary Cards */}\r\n          <div className=\"grid gap-4 md:grid-cols-3\">\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Monthly Trend</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold text-green-600\">\r\n                  +$\\${((analyticsData.revenueData[analyticsData.revenueData.length - 1].revenue - analyticsData.revenueData[0].revenue) / analyticsData.revenueData.length).toFixed(0)}\r\n                </div>\r\n                <p className=\"text-xs text-muted-foreground\">Average monthly growth</p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Peak Month</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">\r\n                  \\${analyticsData.revenueData.reduce((prev, current) => (prev.revenue > current.revenue) ? prev : current).month}\r\n                </div>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  $\\${analyticsData.revenueData.reduce((prev, current) => (prev.revenue > current.revenue) ? prev : current).revenue.toLocaleString()} revenue\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Growth Rate</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold text-green-600\">18.5%</div>\r\n                <p className=\"text-xs text-muted-foreground\">Year over year</p>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        {/* Users Tab - User Analytics */}\r\n        <TabsContent value=\"users\" className=\"space-y-4\">\r\n          <div className=\"flex justify-end\">\r\n            <Button \r\n              variant=\"outline\" \r\n              size=\"sm\"\r\n              onClick={() => exportAnalytics(\"users\", \"csv\")}\r\n            >\r\n              <Download className=\"h-4 w-4 mr-2\" />\r\n              Export User Data\r\n            </Button>\r\n          </div>\r\n\r\n          {/* User Analytics Chart */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Users className=\"h-5 w-5\" />\r\n                User Analytics\r\n              </CardTitle>\r\n              <CardDescription>\r\n                User engagement and growth metrics\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <ResponsiveContainer width=\"100%\" height={400}>\r\n                <BarChart data={analyticsData.revenueData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\r\n                  <XAxis \r\n                    dataKey=\"month\" \r\n                    className=\"text-muted-foreground\"\r\n                    fontSize={12}\r\n                  />\r\n                  <YAxis \r\n                    className=\"text-muted-foreground\"\r\n                    fontSize={12}\r\n                  />\r\n                  <Tooltip \r\n                    contentStyle={{\r\n                      backgroundColor: 'hsl(var(--background))',\r\n                      border: '1px solid hsl(var(--border))',\r\n                      borderRadius: '6px'\r\n                    }}\r\n                    formatter={(value) => [Number(value).toLocaleString(), 'Customers']}\r\n                  />\r\n                  <Bar \r\n                    dataKey=\"customers\" \r\n                    fill=\"hsl(var(--primary))\"\r\n                    radius={[4, 4, 0, 0]}\r\n                  />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* User Metrics Cards */}\r\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Total Users</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.userAnalytics.totalUsers.toLocaleString()}</div>\r\n                <p className=\"text-xs text-muted-foreground\">All-time users</p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">New Users</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold text-green-600\">{analyticsData.userAnalytics.newUsers.toLocaleString()}</div>\r\n                <p className=\"text-xs text-muted-foreground\">This month</p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Returning Users</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.userAnalytics.returningUsers.toLocaleString()}</div>\r\n                <p className=\"text-xs text-muted-foreground\">This month</p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Session Duration</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.userAnalytics.sessionDuration}</div>\r\n                <p className=\"text-xs text-muted-foreground\">Average session</p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Bounce Rate</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold text-orange-600\">{analyticsData.userAnalytics.bounceRate}</div>\r\n                <p className=\"text-xs text-muted-foreground\">Single page visits</p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Conversion Rate</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold text-green-600\">{analyticsData.userAnalytics.conversionRate}</div>\r\n                <p className=\"text-xs text-muted-foreground\">Visitors to customers</p>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        {/* Performance Tab - System Performance */}\r\n        <TabsContent value=\"performance\" className=\"space-y-4\">\r\n          <div className=\"flex justify-end\">\r\n            <Button \r\n              variant=\"outline\" \r\n              size=\"sm\"\r\n              onClick={() => exportAnalytics(\"performance\", \"csv\")}\r\n            >\r\n              <Download className=\"h-4 w-4 mr-2\" />\r\n              Export Performance Data\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Performance Charts */}\r\n          <div className=\"grid gap-6 md:grid-cols-2\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Activity className=\"h-5 w-5\" />\r\n                  Performance Metrics\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  System and business performance indicators\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <RadarChart data={analyticsData.performanceMetrics}>\r\n                    <PolarGrid />\r\n                    <PolarAngleAxis dataKey=\"metric\" tick={{ fontSize: 10 }} />\r\n                    <PolarRadiusAxis domain={[0, 100]} tick={{ fontSize: 8 }} />\r\n                    <Radar \r\n                      name=\"Performance Score\" \r\n                      dataKey=\"score\" \r\n                      stroke=\"hsl(var(--primary))\" \r\n                      fill=\"hsl(var(--primary))\" \r\n                      fillOpacity={0.3} \r\n                    />\r\n                  </RadarChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Performance Breakdown */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Performance Breakdown</CardTitle>\r\n                <CardDescription>\r\n                  Detailed performance analysis\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  {analyticsData.performanceMetrics.map((metric, index) => (\r\n                    <div key={index} className=\"space-y-2\">\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <span className=\"text-sm font-medium\">{metric.metric}</span>\r\n                        <Badge \r\n                          variant=\"outline\" \r\n                          className={\r\n                            metric.score >= 90 \r\n                              ? \"bg-green-100 text-green-800 border-green-200\"\r\n                              : metric.score >= 70\r\n                              ? \"bg-yellow-100 text-yellow-800 border-yellow-200\"\r\n                              : \"bg-red-100 text-red-800 border-red-200\"\r\n                          }\r\n                        >\r\n                          {metric.score}%\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        Current: {metric.value}{metric.metric.includes('Time') || metric.metric.includes('Response') ? 's' : metric.metric.includes('Rate') || metric.metric.includes('Uptime') ? '%' : ''} \r\n                        • Target: {metric.target}{metric.metric.includes('Time') || metric.metric.includes('Response') ? 's' : metric.metric.includes('Rate') || metric.metric.includes('Uptime') ? '%' : ''}\r\n                      </div>\r\n                      <div className=\"w-full bg-muted rounded-full h-2\">\r\n                        <div \r\n                          className=\"h-2 rounded-full transition-all duration-300\"\r\n                          style={{ \r\n                            width: \\`\\${metric.score}%\\`,\r\n                            backgroundColor: metric.color\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Performance Summary */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Performance Summary</CardTitle>\r\n              <CardDescription>\r\n                Overall system health and recommendations\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid gap-4 md:grid-cols-3\">\r\n                <div className=\"p-4 border rounded-lg\">\r\n                  <h4 className=\"font-medium text-sm mb-2 flex items-center gap-2\">\r\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\r\n                    Excellent Performance\r\n                  </h4>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    System uptime and error rates are performing exceptionally well, exceeding all target thresholds consistently.\r\n                  </p>\r\n                </div>\r\n                <div className=\"p-4 border rounded-lg\">\r\n                  <h4 className=\"font-medium text-sm mb-2 flex items-center gap-2\">\r\n                    <div className=\"w-2 h-2 bg-yellow-500 rounded-full\" />\r\n                    Areas for Improvement\r\n                  </h4>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    API response times and throughput can be optimized further to handle increasing user load more efficiently.\r\n                  </p>\r\n                </div>\r\n                <div className=\"p-4 border rounded-lg\">\r\n                  <h4 className=\"font-medium text-sm mb-2 flex items-center gap-2\">\r\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\r\n                    Recommendations\r\n                  </h4>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    Consider implementing caching strategies and load balancing to improve overall system performance metrics.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  )\r\n}`\r\n\r\nexport default function Analytics() {\r\n  // State for refresh functionality\r\n  const [isRefreshing, setIsRefreshing] = useState(false)\r\n  const { toast } = useToast()\r\n\r\n  // Handle refreshing analytics data\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true)\r\n    await new Promise(resolve => setTimeout(resolve, 1500))\r\n    setIsRefreshing(false)\r\n    toast({\r\n      title: \"Analytics Refreshed\",\r\n      description: \"All analytics data has been updated with the latest metrics.\",\r\n    })\r\n  }\r\n\r\n  // Export analytics data functionality\r\n  const exportAnalytics = (section: ExportSection = \"all\", format: ExportFormat = \"csv\") => {\r\n    let data: any = {}\r\n    let filename = \"analytics\"\r\n\r\n    switch (section) {\r\n      case \"overview\":\r\n        data = analyticsData.overview\r\n        filename = \"analytics-overview\"\r\n        break\r\n      case \"revenue\":\r\n        data = analyticsData.revenueData\r\n        filename = \"analytics-revenue\"\r\n        break\r\n      case \"users\":\r\n        data = analyticsData.userAnalytics\r\n        filename = \"analytics-users\"\r\n        break\r\n      case \"performance\":\r\n        data = analyticsData.performanceMetrics\r\n        filename = \"analytics-performance\"\r\n        break\r\n      default:\r\n        data = analyticsData\r\n        filename = \"analytics-complete\"\r\n    }\r\n\r\n    if (format === \"csv\") {\r\n      exportToCSV(data, filename)\r\n    } else {\r\n      exportToJSON(data, filename)\r\n    }\r\n  }\r\n\r\n  // Export data to CSV format\r\n  const exportToCSV = (data: any, filename: string) => {\r\n    let csvContent = \"\"\r\n    \r\n    if (Array.isArray(data)) {\r\n      if (data.length > 0) {\r\n        const headers = Object.keys(data[0]).join(\",\")\r\n        csvContent = headers + \"\\n\"\r\n        data.forEach(row => {\r\n          csvContent += Object.values(row).join(\",\") + \"\\n\"\r\n        })\r\n      }\r\n    } else if (typeof data === 'object' && data !== null) {\r\n      csvContent = \"Metric,Value,Change,Trend\\n\"\r\n      Object.entries(data).forEach(([key, value]) => {\r\n        if (typeof value === 'object' && value !== null && 'value' in value) {\r\n          const metric = value as OverviewMetric\r\n          csvContent += `${key},${metric.value},${metric.change || ''},${metric.trend || ''}\\n`\r\n        } else {\r\n          csvContent += `${key},${value},,\\n`\r\n        }\r\n      })\r\n    }\r\n\r\n    const blob = new Blob([csvContent], { type: 'text/csv' })\r\n    const url = window.URL.createObjectURL(blob)\r\n    const a = document.createElement('a')\r\n    a.setAttribute('hidden', '')\r\n    a.setAttribute('href', url)\r\n    a.setAttribute('download', `${filename}.csv`)\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n    \r\n    toast({\r\n      title: \"Export Successful\",\r\n      description: `${filename}.csv has been downloaded successfully.`,\r\n    })\r\n  }\r\n\r\n  // Export data to JSON format\r\n  const exportToJSON = (data: any, filename: string) => {\r\n    const dataStr = JSON.stringify(data, null, 2)\r\n    const blob = new Blob([dataStr], { type: 'application/json' })\r\n    const url = window.URL.createObjectURL(blob)\r\n    const a = document.createElement('a')\r\n    a.setAttribute('hidden', '')\r\n    a.setAttribute('href', url)\r\n    a.setAttribute('download', `${filename}.json`)\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n    \r\n    toast({\r\n      title: \"Export Successful\",\r\n      description: `${filename}.json has been downloaded successfully.`,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6 p-6\">\r\n      {/* Page Header with Action Buttons */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Analytics & Reports</h1>\r\n          <p className=\"text-muted-foreground mt-1\">\r\n            Detailed insights and comprehensive reporting for your business.\r\n          </p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\" \r\n            onClick={handleRefresh}\r\n            disabled={isRefreshing}\r\n          >\r\n            <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n            Refresh\r\n          </Button>\r\n          <V0Button \r\n            prompt=\"just render the ui as it is of this page , dont make any changes, just as it is\"\r\n            code={ANALYTICS_CODE}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tabbed Analytics Interface */}\r\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n          <TabsTrigger value=\"revenue\">Revenue</TabsTrigger>\r\n          <TabsTrigger value=\"users\">Users</TabsTrigger>\r\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\r\n        </TabsList>\r\n\r\n        {/* Overview Tab - Main Dashboard */}\r\n        <TabsContent value=\"overview\" className=\"space-y-4\">\r\n          <div className=\"flex justify-end\">\r\n            <Button \r\n              variant=\"outline\" \r\n              size=\"sm\"\r\n              onClick={() => exportAnalytics(\"overview\", \"csv\")}\r\n            >\r\n              <Download className=\"h-4 w-4 mr-2\" />\r\n              Export Overview\r\n            </Button>\r\n          </div>\r\n          \r\n          {/* Key Metrics Cards */}\r\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n            <Card className=\"card-hover\">\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\r\n                <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.overview.revenue.value}</div>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  <span className=\"text-green-500\">{analyticsData.overview.revenue.change}</span> from last month\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card className=\"card-hover\">\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Subscriptions</CardTitle>\r\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.overview.subscriptions.value}</div>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  <span className=\"text-green-500\">{analyticsData.overview.subscriptions.change}</span> from last month\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card className=\"card-hover\">\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Sales</CardTitle>\r\n                <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.overview.sales.value}</div>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  <span className=\"text-green-500\">{analyticsData.overview.sales.change}</span> from last month\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card className=\"card-hover\">\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Active Now</CardTitle>\r\n                <Activity className=\"h-4 w-4 text-muted-foreground\" />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.overview.activeNow.value}</div>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  <span className=\"text-green-500\">{analyticsData.overview.activeNow.change}</span> since last hour\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Charts Section */}\r\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-7\">\r\n            {/* Revenue Overview Chart */}\r\n            <Card className=\"col-span-4\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center justify-between\">\r\n                  <span>Revenue Overview</span>\r\n                  <Button \r\n                    variant=\"ghost\" \r\n                    size=\"sm\"\r\n                    onClick={() => exportAnalytics(\"revenue\", \"csv\")}\r\n                  >\r\n                    <Download className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"pl-2\">\r\n                <ResponsiveContainer width=\"100%\" height={350}>\r\n                  <AreaChart data={analyticsData.revenueData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\r\n                    <XAxis \r\n                      dataKey=\"month\" \r\n                      className=\"text-muted-foreground\"\r\n                      fontSize={12}\r\n                    />\r\n                    <YAxis \r\n                      className=\"text-muted-foreground\"\r\n                      fontSize={12}\r\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\r\n                    />\r\n                    <Tooltip \r\n                      contentStyle={{\r\n                        backgroundColor: 'hsl(var(--background))',\r\n                        border: '1px solid hsl(var(--border))',\r\n                        borderRadius: '6px'\r\n                      }}\r\n                      formatter={(value, name) => {\r\n                        if (name === 'revenue') return [`$${Number(value).toLocaleString()}`, 'Revenue']\r\n                        return [Number(value).toLocaleString(), name]\r\n                      }}\r\n                    />\r\n                    <Area \r\n                      type=\"monotone\" \r\n                      dataKey=\"revenue\" \r\n                      stroke=\"hsl(var(--primary))\" \r\n                      fill=\"hsl(var(--primary))\"\r\n                      fillOpacity={0.1}\r\n                      strokeWidth={2}\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Traffic Sources */}\r\n            <Card className=\"col-span-3\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center justify-between\">\r\n                  <span>Traffic Sources</span>\r\n                  <Button \r\n                    variant=\"ghost\" \r\n                    size=\"sm\"\r\n                    onClick={() => exportToCSV(analyticsData.trafficSources, \"traffic-sources\")}\r\n                  >\r\n                    <Download className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  User acquisition by channel\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3 mb-4\">\r\n                  {analyticsData.trafficSources.map((source, index) => (\r\n                    <div key={index} className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <div \r\n                          className=\"w-3 h-3 rounded-full\" \r\n                          style={{ backgroundColor: source.color }}\r\n                        />\r\n                        <span className=\"text-sm font-medium\">{source.source}</span>\r\n                      </div>\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        {source.users.toLocaleString()} ({source.percentage}%)\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                <ResponsiveContainer width=\"100%\" height={200}>\r\n                  <RechartsPieChart>\r\n                    <Pie\r\n                      data={analyticsData.trafficSources}\r\n                      cx=\"50%\"\r\n                      cy=\"50%\"\r\n                      outerRadius={60}\r\n                      fill=\"#8884d8\"\r\n                      dataKey=\"users\"\r\n                    >\r\n                      {analyticsData.trafficSources.map((entry, index) => (\r\n                        <Cell key={`cell-${index}`} fill={entry.color} />\r\n                      ))}\r\n                    </Pie>\r\n                    <Tooltip formatter={(value) => [Number(value).toLocaleString(), 'Users']} />\r\n                  </RechartsPieChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        {/* Revenue Tab - Detailed Revenue Analytics */}\r\n        <TabsContent value=\"revenue\" className=\"space-y-4\">\r\n          <div className=\"flex justify-end\">\r\n            <Button \r\n              variant=\"outline\" \r\n              size=\"sm\"\r\n              onClick={() => exportAnalytics(\"revenue\", \"csv\")}\r\n            >\r\n              <Download className=\"h-4 w-4 mr-2\" />\r\n              Export Revenue Data\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Revenue Analytics Chart */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <BarChart3 className=\"h-5 w-5\" />\r\n                Revenue Analytics\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Detailed revenue breakdown and trends\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <ResponsiveContainer width=\"100%\" height={400}>\r\n                <RechartsLineChart data={analyticsData.revenueData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\r\n                  <XAxis \r\n                    dataKey=\"month\" \r\n                    className=\"text-muted-foreground\"\r\n                    fontSize={12}\r\n                  />\r\n                  <YAxis \r\n                    className=\"text-muted-foreground\"\r\n                    fontSize={12}\r\n                    yAxisId=\"left\"\r\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\r\n                  />\r\n                  <YAxis \r\n                    className=\"text-muted-foreground\"\r\n                    fontSize={12}\r\n                    yAxisId=\"right\"\r\n                    orientation=\"right\"\r\n                  />\r\n                  <Tooltip \r\n                    contentStyle={{\r\n                      backgroundColor: 'hsl(var(--background))',\r\n                      border: '1px solid hsl(var(--border))',\r\n                      borderRadius: '6px'\r\n                    }}\r\n                    formatter={(value, name) => {\r\n                      if (name === 'revenue') return [`$${Number(value).toLocaleString()}`, 'Revenue']\r\n                      if (name === 'conversion') return [`${value}%`, 'Conversion Rate']\r\n                      return [Number(value).toLocaleString(), name]\r\n                    }}\r\n                  />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"revenue\" \r\n                    stroke=\"hsl(var(--primary))\" \r\n                    strokeWidth={2}\r\n                    yAxisId=\"left\"\r\n                    dot={{ fill: 'hsl(var(--primary))' }}\r\n                  />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"orders\" \r\n                    stroke=\"hsl(var(--chart-2))\" \r\n                    strokeWidth={2}\r\n                    yAxisId=\"right\"\r\n                    dot={{ fill: 'hsl(var(--chart-2))' }}\r\n                  />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"conversion\" \r\n                    stroke=\"hsl(var(--chart-3))\" \r\n                    strokeWidth={2}\r\n                    yAxisId=\"right\"\r\n                    dot={{ fill: 'hsl(var(--chart-3))' }}\r\n                  />\r\n                </RechartsLineChart>\r\n              </ResponsiveContainer>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Revenue Summary Cards */}\r\n          <div className=\"grid gap-4 md:grid-cols-3\">\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Monthly Trend</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold text-green-600\">\r\n                  +${((analyticsData.revenueData[analyticsData.revenueData.length - 1].revenue - analyticsData.revenueData[0].revenue) / analyticsData.revenueData.length).toFixed(0)}\r\n                </div>\r\n                <p className=\"text-xs text-muted-foreground\">Average monthly growth</p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Peak Month</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">\r\n                  {analyticsData.revenueData.reduce((prev, current) => (prev.revenue > current.revenue) ? prev : current).month}\r\n                </div>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  ${analyticsData.revenueData.reduce((prev, current) => (prev.revenue > current.revenue) ? prev : current).revenue.toLocaleString()} revenue\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Growth Rate</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold text-green-600\">18.5%</div>\r\n                <p className=\"text-xs text-muted-foreground\">Year over year</p>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        {/* Users Tab - User Analytics */}\r\n        <TabsContent value=\"users\" className=\"space-y-4\">\r\n          <div className=\"flex justify-end\">\r\n            <Button \r\n              variant=\"outline\" \r\n              size=\"sm\"\r\n              onClick={() => exportAnalytics(\"users\", \"csv\")}\r\n            >\r\n              <Download className=\"h-4 w-4 mr-2\" />\r\n              Export User Data\r\n            </Button>\r\n          </div>\r\n\r\n          {/* User Analytics Chart */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Users className=\"h-5 w-5\" />\r\n                User Analytics\r\n              </CardTitle>\r\n              <CardDescription>\r\n                User engagement and growth metrics\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <ResponsiveContainer width=\"100%\" height={400}>\r\n                <BarChart data={analyticsData.revenueData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\r\n                  <XAxis \r\n                    dataKey=\"month\" \r\n                    className=\"text-muted-foreground\"\r\n                    fontSize={12}\r\n                  />\r\n                  <YAxis \r\n                    className=\"text-muted-foreground\"\r\n                    fontSize={12}\r\n                  />\r\n                  <Tooltip \r\n                    contentStyle={{\r\n                      backgroundColor: 'hsl(var(--background))',\r\n                      border: '1px solid hsl(var(--border))',\r\n                      borderRadius: '6px'\r\n                    }}\r\n                    formatter={(value) => [Number(value).toLocaleString(), 'Customers']}\r\n                  />\r\n                  <Bar \r\n                    dataKey=\"customers\" \r\n                    fill=\"hsl(var(--primary))\"\r\n                    radius={[4, 4, 0, 0]}\r\n                  />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* User Metrics Cards */}\r\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Total Users</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.userAnalytics.totalUsers.toLocaleString()}</div>\r\n                <p className=\"text-xs text-muted-foreground\">All-time users</p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">New Users</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold text-green-600\">{analyticsData.userAnalytics.newUsers.toLocaleString()}</div>\r\n                <p className=\"text-xs text-muted-foreground\">This month</p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Returning Users</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.userAnalytics.returningUsers.toLocaleString()}</div>\r\n                <p className=\"text-xs text-muted-foreground\">This month</p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Session Duration</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{analyticsData.userAnalytics.sessionDuration}</div>\r\n                <p className=\"text-xs text-muted-foreground\">Average session</p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Bounce Rate</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold text-orange-600\">{analyticsData.userAnalytics.bounceRate}</div>\r\n                <p className=\"text-xs text-muted-foreground\">Single page visits</p>\r\n              </CardContent>\r\n            </Card>\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-base\">Conversion Rate</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold text-green-600\">{analyticsData.userAnalytics.conversionRate}</div>\r\n                <p className=\"text-xs text-muted-foreground\">Visitors to customers</p>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        {/* Performance Tab - System Performance */}\r\n        <TabsContent value=\"performance\" className=\"space-y-4\">\r\n          <div className=\"flex justify-end\">\r\n            <Button \r\n              variant=\"outline\" \r\n              size=\"sm\"\r\n              onClick={() => exportAnalytics(\"performance\", \"csv\")}\r\n            >\r\n              <Download className=\"h-4 w-4 mr-2\" />\r\n              Export Performance Data\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Performance Charts */}\r\n          <div className=\"grid gap-6 md:grid-cols-2\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Activity className=\"h-5 w-5\" />\r\n                  Performance Metrics\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  System and business performance indicators\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <RadarChart data={analyticsData.performanceMetrics}>\r\n                    <PolarGrid />\r\n                    <PolarAngleAxis dataKey=\"metric\" tick={{ fontSize: 10 }} />\r\n                    <PolarRadiusAxis domain={[0, 100]} tick={{ fontSize: 8 }} />\r\n                    <Radar \r\n                      name=\"Performance Score\" \r\n                      dataKey=\"score\" \r\n                      stroke=\"hsl(var(--primary))\" \r\n                      fill=\"hsl(var(--primary))\" \r\n                      fillOpacity={0.3} \r\n                    />\r\n                  </RadarChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Performance Breakdown */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Performance Breakdown</CardTitle>\r\n                <CardDescription>\r\n                  Detailed performance analysis\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  {analyticsData.performanceMetrics.map((metric, index) => (\r\n                    <div key={index} className=\"space-y-2\">\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <span className=\"text-sm font-medium\">{metric.metric}</span>\r\n                        <Badge \r\n                          variant=\"outline\" \r\n                          className={\r\n                            metric.score >= 90 \r\n                              ? \"bg-green-100 text-green-800 border-green-200\"\r\n                              : metric.score >= 70\r\n                              ? \"bg-yellow-100 text-yellow-800 border-yellow-200\"\r\n                              : \"bg-red-100 text-red-800 border-red-200\"\r\n                          }\r\n                        >\r\n                          {metric.score}%\r\n                        </Badge>\r\n                      </div>\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        Current: {metric.value}{metric.metric.includes('Time') || metric.metric.includes('Response') ? 's' : metric.metric.includes('Rate') || metric.metric.includes('Uptime') ? '%' : ''} \r\n                        • Target: {metric.target}{metric.metric.includes('Time') || metric.metric.includes('Response') ? 's' : metric.metric.includes('Rate') || metric.metric.includes('Uptime') ? '%' : ''}\r\n                      </div>\r\n                      <div className=\"w-full bg-muted rounded-full h-2\">\r\n                        <div \r\n                          className=\"h-2 rounded-full transition-all duration-300\"\r\n                          style={{ \r\n                            width: `${metric.score}%`,\r\n                            backgroundColor: metric.color\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Performance Summary */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Performance Summary</CardTitle>\r\n              <CardDescription>\r\n                Overall system health and recommendations\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid gap-4 md:grid-cols-3\">\r\n                <div className=\"p-4 border rounded-lg\">\r\n                  <h4 className=\"font-medium text-sm mb-2 flex items-center gap-2\">\r\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\r\n                    Excellent Performance\r\n                  </h4>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    System uptime and error rates are performing exceptionally well, exceeding all target thresholds consistently.\r\n                  </p>\r\n                </div>\r\n                <div className=\"p-4 border rounded-lg\">\r\n                  <h4 className=\"font-medium text-sm mb-2 flex items-center gap-2\">\r\n                    <div className=\"w-2 h-2 bg-yellow-500 rounded-full\" />\r\n                    Areas for Improvement\r\n                  </h4>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    API response times and throughput can be optimized further to handle increasing user load more efficiently.\r\n                  </p>\r\n                </div>\r\n                <div className=\"p-4 border rounded-lg\">\r\n                  <h4 className=\"font-medium text-sm mb-2 flex items-center gap-2\">\r\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\r\n                    Recommendations\r\n                  </h4>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    Consider implementing caching strategies and load balancing to improve overall system performance metrics.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  )\r\n}"
    }
  ],
  "dependencies": [
    "recharts",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {}
      }
    }
  }
}
{
  "name": "tables",
  "type": "page",
  "files": [
    {
      "name": "page.tsx",
      "content": "\"use client\"\n\nimport { V0Button } from \"@/components/v0-button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { useToast } from \"@/lib/use-toast\"\nimport { ChevronDown, ChevronRight, Search, Download, Filter, Eye, Edit, Trash2, Plus, RefreshCw } from \"lucide-react\"\nimport { useState } from \"react\"\n\ninterface CustomerDetails {\n  address: string\n  phone: string\n  orders: number\n  totalSpent: string\n}\n\ninterface Customer {\n  id: string\n  customer: string\n  email: string\n  status: string\n  amount: string\n  date: string\n  details: CustomerDetails\n}\n\ninterface Product {\n  id: string\n  name: string\n  category: string\n  price: string\n  stock: number\n  status: string\n  sales: number\n}\n\ninterface Order {\n  id: string\n  customer: string\n  product: string\n  amount: string\n  status: string\n  date: string\n}\n\ninterface NewCustomer {\n  customer: string\n  email: string\n  phone: string\n  address: string\n  status: string\n}\n\ninterface NewProduct {\n  name: string\n  category: string\n  price: string\n  stock: string\n  status: string\n}\n\ninterface NewOrder {\n  customer: string\n  product: string\n  amount: string\n  status: string\n}\n\nconst initialCustomerData: Customer[] = [\n  {\n    id: \"1\",\n    customer: \"Olivia Martin\",\n    email: \"olivia.martin@email.com\",\n    status: \"active\",\n    amount: \"$1,999.00\",\n    date: \"2024-01-15\",\n    details: {\n      address: \"123 Main St, San Francisco, CA\",\n      phone: \"+1 (555) 123-4567\",\n      orders: 15,\n      totalSpent: \"$15,420.00\"\n    }\n  },\n  {\n    id: \"2\",\n    customer: \"Jackson Lee\",\n    email: \"jackson.lee@email.com\",\n    status: \"pending\",\n    amount: \"$39.00\",\n    date: \"2024-01-14\",\n    details: {\n      address: \"456 Oak Ave, New York, NY\",\n      phone: \"+1 (555) 234-5678\",\n      orders: 3,\n      totalSpent: \"$420.00\"\n    }\n  },\n  {\n    id: \"3\",\n    customer: \"Isabella Nguyen\",\n    email: \"isabella.nguyen@email.com\",\n    status: \"active\",\n    amount: \"$299.00\",\n    date: \"2024-01-13\",\n    details: {\n      address: \"789 Pine Rd, Los Angeles, CA\",\n      phone: \"+1 (555) 345-6789\",\n      orders: 8,\n      totalSpent: \"$2,350.00\"\n    }\n  },\n  {\n    id: \"4\",\n    customer: \"William Kim\",\n    email: \"will@email.com\",\n    status: \"inactive\",\n    amount: \"$99.00\",\n    date: \"2024-01-12\",\n    details: {\n      address: \"321 Elm St, Chicago, IL\",\n      phone: \"+1 (555) 456-7890\",\n      orders: 2,\n      totalSpent: \"$180.00\"\n    }\n  },\n]\n\nconst initialProductData: Product[] = [\n  {\n    id: \"1\",\n    name: \"Premium Subscription\",\n    category: \"Subscription\",\n    price: \"$29.99\",\n    stock: 999,\n    status: \"active\",\n    sales: 142\n  },\n  {\n    id: \"2\",\n    name: \"Basic Plan\",\n    category: \"Subscription\",\n    price: \"$9.99\",\n    stock: 999,\n    status: \"active\",\n    sales: 89\n  },\n  {\n    id: \"3\",\n    name: \"Enterprise\",\n    category: \"Subscription\",\n    price: \"$99.99\",\n    stock: 999,\n    status: \"active\",\n    sales: 23\n  },\n]\n\nconst initialOrderData: Order[] = [\n  {\n    id: \"ORD-001\",\n    customer: \"Olivia Martin\",\n    product: \"Premium Subscription\",\n    amount: \"$29.99\",\n    status: \"completed\",\n    date: \"2024-01-15\"\n  },\n  {\n    id: \"ORD-002\",\n    customer: \"Jackson Lee\",\n    product: \"Basic Plan\",\n    amount: \"$9.99\",\n    status: \"pending\",\n    date: \"2024-01-14\"\n  },\n  {\n    id: \"ORD-003\",\n    customer: \"Isabella Nguyen\",\n    product: \"Enterprise\",\n    amount: \"$99.99\",\n    status: \"completed\",\n    date: \"2024-01-13\"\n  },\n]\n\nexport default function Tables() {\n  const [customerData, setCustomerData] = useState<Customer[]>(initialCustomerData)\n  const [productData, setProductData] = useState<Product[]>(initialProductData)\n  const [orderData, setOrderData] = useState<Order[]>(initialOrderData)\n  \n  const [expandedRows, setExpandedRows] = useState(new Set<string>())\n  const [customerSearchTerm, setCustomerSearchTerm] = useState(\"\")\n  const [customerStatusFilter, setCustomerStatusFilter] = useState(\"all\")\n  \n  const [productSearchTerm, setProductSearchTerm] = useState(\"\")\n  const [orderSearchTerm, setOrderSearchTerm] = useState(\"\")\n  \n  const [customerModalOpen, setCustomerModalOpen] = useState(false)\n  const [productModalOpen, setProductModalOpen] = useState(false)\n  const [orderModalOpen, setOrderModalOpen] = useState(false)\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  \n  const [newCustomer, setNewCustomer] = useState<NewCustomer>({\n    customer: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n    status: \"active\"\n  })\n  \n  const [newProduct, setNewProduct] = useState<NewProduct>({\n    name: \"\",\n    category: \"\",\n    price: \"\",\n    stock: \"\",\n    status: \"active\"\n  })\n  \n  const [newOrder, setNewOrder] = useState<NewOrder>({\n    customer: \"\",\n    product: \"\",\n    amount: \"\",\n    status: \"pending\"\n  })\n\n  const { toast } = useToast()\n\n  // Export functionality\n  const exportToCSV = (data: any[], filename: string) => {\n    const headers = Object.keys(data[0]).filter(key => key !== 'details').join(\",\")\n    const csvData = data.map(row => \n      Object.entries(row)\n        .filter(([key]) => key !== 'details')\n        .map(([_, value]) => typeof value === 'object' ? JSON.stringify(value) : value)\n        .join(\",\")\n    ).join(\"\\n\")\n    \n    const csv = `${headers}\\n${csvData}`\n    const blob = new Blob([csv], { type: 'text/csv' })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.setAttribute('hidden', '')\n    a.setAttribute('href', url)\n    a.setAttribute('download', `${filename}.csv`)\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n    \n    toast({\n      title: \"Export Successful\",\n      description: `${filename}.csv has been downloaded successfully.`,\n    })\n  }\n\n  const toggleRow = (id: string) => {\n    const newExpanded = new Set(expandedRows)\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id)\n    } else {\n      newExpanded.add(id)\n    }\n    setExpandedRows(newExpanded)\n  }\n\n  const filteredCustomerData = customerData.filter(item => {\n    const matchesSearch = item.customer.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||\n                         item.email.toLowerCase().includes(customerSearchTerm.toLowerCase())\n    const matchesStatus = customerStatusFilter === \"all\" || item.status === customerStatusFilter\n    return matchesSearch && matchesStatus\n  })\n  \n  const filteredProductData = productData.filter(item =>\n    item.name.toLowerCase().includes(productSearchTerm.toLowerCase()) ||\n    item.category.toLowerCase().includes(productSearchTerm.toLowerCase())\n  )\n  \n  const filteredOrderData = orderData.filter(item =>\n    item.customer.toLowerCase().includes(orderSearchTerm.toLowerCase()) ||\n    item.product.toLowerCase().includes(orderSearchTerm.toLowerCase()) ||\n    item.id.toLowerCase().includes(orderSearchTerm.toLowerCase())\n  )\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\": case \"completed\": return \"bg-green-300 text-green-800 border-green-700\"\n      case \"pending\": return \"bg-yellow-300 text-yellow-800 border-yellow-700\"\n      case \"inactive\": return \"bg-red-300 text-red-800 border-red-700\"\n      default: return \"bg-gray-300 text-gray-800 border-gray-700\"\n    }\n  }\n\n  const handleAddCustomer = () => {\n    if (!newCustomer.customer || !newCustomer.email) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in customer name and email.\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    const customer: Customer = {\n      id: (customerData.length + 1).toString(),\n      customer: newCustomer.customer,\n      email: newCustomer.email,\n      status: newCustomer.status,\n      amount: \"$0.00\",\n      date: new Date().toISOString().split('T')[0],\n      details: {\n        address: newCustomer.address,\n        phone: newCustomer.phone,\n        orders: 0,\n        totalSpent: \"$0.00\"\n      }\n    }\n    setCustomerData([...customerData, customer])\n    setNewCustomer({ customer: \"\", email: \"\", phone: \"\", address: \"\", status: \"active\" })\n    setCustomerModalOpen(false)\n    \n    toast({\n      title: \"Customer Added\",\n      description: `${newCustomer.customer} has been added successfully.`,\n    })\n  }\n\n  const handleAddProduct = () => {\n    if (!newProduct.name || !newProduct.price) {\n      toast({\n        title: \"Missing Information\", \n        description: \"Please fill in product name and price.\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    const product: Product = {\n      id: (productData.length + 1).toString(),\n      name: newProduct.name,\n      category: newProduct.category,\n      price: newProduct.price,\n      stock: parseInt(newProduct.stock) || 0,\n      status: newProduct.status,\n      sales: 0\n    }\n    setProductData([...productData, product])\n    setNewProduct({ name: \"\", category: \"\", price: \"\", stock: \"\", status: \"active\" })\n    setProductModalOpen(false)\n    \n    toast({\n      title: \"Product Added\",\n      description: `${newProduct.name} has been added to the catalog.`,\n    })\n  }\n\n  const handleAddOrder = () => {\n    if (!newOrder.customer || !newOrder.product || !newOrder.amount) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all order details.\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    const order: Order = {\n      id: `ORD-${String(orderData.length + 1).padStart(3, '0')}`,\n      customer: newOrder.customer,\n      product: newOrder.product,\n      amount: newOrder.amount,\n      status: newOrder.status,\n      date: new Date().toISOString().split('T')[0]\n    }\n    setOrderData([...orderData, order])\n    setNewOrder({ customer: \"\", product: \"\", amount: \"\", status: \"pending\" })\n    setOrderModalOpen(false)\n    \n    toast({\n      title: \"Order Created\",\n      description: `Order ${order.id} has been created successfully.`,\n    })\n  }\n\n  const handleDeleteItem = (id: string, type: string, name: string) => {\n    switch (type) {\n      case 'customer':\n        setCustomerData(customerData.filter(item => item.id !== id))\n        break\n      case 'product':\n        setProductData(productData.filter(item => item.id !== id))\n        break\n      case 'order':\n        setOrderData(orderData.filter(item => item.id !== id))\n        break\n    }\n    \n    toast({\n      title: \"Item Deleted\",\n      description: `${name} has been removed successfully.`,\n      variant: \"destructive\"\n    })\n  }\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true)\n    await new Promise(resolve => setTimeout(resolve, 1500))\n    setIsRefreshing(false)\n    toast({\n      title: \"Tables Refreshed\",\n      description: \"All table data has been refreshed.\",\n    })\n  }\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Data Tables</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Advanced tables with collapsible rows, filtering, and sorting.\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={handleRefresh}\n            disabled={isRefreshing}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <V0Button componentName=\"tables\" />\n        </div>\n      </div>\n\n      {/* Customer Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Customer Database</CardTitle>\n              <CardDescription>\n                Manage and view customer information with expandable details\n              </CardDescription>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => exportToCSV(customerData, 'customers')}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n              <Dialog open={customerModalOpen} onOpenChange={setCustomerModalOpen}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Customer\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add New Customer</DialogTitle>\n                    <DialogDescription>\n                      Enter the customer details below.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"customer\">Customer Name *</Label>\n                        <Input\n                          id=\"customer\"\n                          value={newCustomer.customer}\n                          onChange={(e) => setNewCustomer({...newCustomer, customer: e.target.value})}\n                          placeholder=\"John Doe\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email *</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={newCustomer.email}\n                          onChange={(e) => setNewCustomer({...newCustomer, email: e.target.value})}\n                          placeholder=\"john@example.com\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"phone\">Phone</Label>\n                      <Input\n                        id=\"phone\"\n                        value={newCustomer.phone}\n                        onChange={(e) => setNewCustomer({...newCustomer, phone: e.target.value})}\n                        placeholder=\"+1 (555) 123-4567\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"address\">Address</Label>\n                      <Textarea\n                        id=\"address\"\n                        value={newCustomer.address}\n                        onChange={(e) => setNewCustomer({...newCustomer, address: e.target.value})}\n                        placeholder=\"123 Main St, City, State\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"status\">Status</Label>\n                      <Select value={newCustomer.status} onValueChange={(value) => setNewCustomer({...newCustomer, status: value})}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"active\">Active</SelectItem>\n                          <SelectItem value=\"pending\">Pending</SelectItem>\n                          <SelectItem value=\"inactive\">Inactive</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button variant=\"outline\" onClick={() => setCustomerModalOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button onClick={handleAddCustomer}>Add Customer</Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                <Input \n                  placeholder=\"Search customers...\" \n                  value={customerSearchTerm}\n                  onChange={(e) => setCustomerSearchTerm(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n              <Select value={customerStatusFilter} onValueChange={setCustomerStatusFilter}>\n                <SelectTrigger className=\"w-32\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              {filteredCustomerData.length} of {customerData.length} customers\n            </p>\n          </div>\n\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-8\"></TableHead>\n                  <TableHead>Customer</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredCustomerData.map((item) => (\n                  <Collapsible key={item.id} asChild>\n                    <>\n                      <TableRow className=\"cursor-pointer hover:bg-muted/50\">\n                        <TableCell>\n                          <CollapsibleTrigger asChild>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => toggleRow(item.id)}\n                              className=\"p-0 h-6 w-6\"\n                            >\n                              {expandedRows.has(item.id) ? (\n                                <ChevronDown className=\"h-4 w-4\" />\n                              ) : (\n                                <ChevronRight className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </CollapsibleTrigger>\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          {item.customer}\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          {item.email}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant=\"outline\" \n                            className={getStatusColor(item.status)}\n                          >\n                            {item.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"font-mono text-sm\">\n                          {item.amount}\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          {item.date}\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex items-center justify-end gap-2\">\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => toast({ title: \"View Customer\", description: `Viewing ${item.customer}` })}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => toast({ title: \"Edit Customer\", description: `Edit ${item.customer}` })}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => handleDeleteItem(item.id, 'customer', item.customer)}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                      <CollapsibleContent asChild>\n                        <TableRow className=\"hover:bg-muted/25\">\n                          <TableCell></TableCell>\n                          <TableCell colSpan={6}>\n                            <div className=\"p-4 bg-muted/25 rounded-md\">\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                                <div>\n                                  <h4 className=\"text-sm font-medium text-muted-foreground\">Address</h4>\n                                  <p className=\"text-sm\">{item.details.address}</p>\n                                </div>\n                                <div>\n                                  <h4 className=\"text-sm font-medium text-muted-foreground\">Phone</h4>\n                                  <p className=\"text-sm\">{item.details.phone}</p>\n                                </div>\n                                <div>\n                                  <h4 className=\"text-sm font-medium text-muted-foreground\">Total Orders</h4>\n                                  <p className=\"text-sm font-medium\">{item.details.orders}</p>\n                                </div>\n                                <div>\n                                  <h4 className=\"text-sm font-medium text-muted-foreground\">Total Spent</h4>\n                                  <p className=\"text-sm font-medium font-mono\">{item.details.totalSpent}</p>\n                                </div>\n                              </div>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      </CollapsibleContent>\n                    </>\n                  </Collapsible>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Products Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Product Catalog</CardTitle>\n              <CardDescription>\n                Manage your products and inventory\n              </CardDescription>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => exportToCSV(productData, 'products')}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n              <Dialog open={productModalOpen} onOpenChange={setProductModalOpen}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Product\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add New Product</DialogTitle>\n                    <DialogDescription>\n                      Enter the product details below.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"name\">Product Name *</Label>\n                        <Input\n                          id=\"name\"\n                          value={newProduct.name}\n                          onChange={(e) => setNewProduct({...newProduct, name: e.target.value})}\n                          placeholder=\"Premium Plan\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"category\">Category</Label>\n                        <Input\n                          id=\"category\"\n                          value={newProduct.category}\n                          onChange={(e) => setNewProduct({...newProduct, category: e.target.value})}\n                          placeholder=\"Subscription\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"price\">Price *</Label>\n                        <Input\n                          id=\"price\"\n                          placeholder=\"$29.99\"\n                          value={newProduct.price}\n                          onChange={(e) => setNewProduct({...newProduct, price: e.target.value})}\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"stock\">Stock</Label>\n                        <Input\n                          id=\"stock\"\n                          type=\"number\"\n                          value={newProduct.stock}\n                          onChange={(e) => setNewProduct({...newProduct, stock: e.target.value})}\n                          placeholder=\"100\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"status\">Status</Label>\n                      <Select value={newProduct.status} onValueChange={(value) => setNewProduct({...newProduct, status: value})}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"active\">Active</SelectItem>\n                          <SelectItem value=\"inactive\">Inactive</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button variant=\"outline\" onClick={() => setProductModalOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button onClick={handleAddProduct}>Add Product</Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n              <Input \n                placeholder=\"Search products...\" \n                value={productSearchTerm}\n                onChange={(e) => setProductSearchTerm(e.target.value)}\n                className=\"pl-10 w-64\"\n              />\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              {filteredProductData.length} of {productData.length} products\n            </p>\n          </div>\n\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Category</TableHead>\n                  <TableHead>Price</TableHead>\n                  <TableHead>Stock</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Sales</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredProductData.map((item) => (\n                  <TableRow key={item.id}>\n                    <TableCell className=\"font-medium\">{item.name}</TableCell>\n                    <TableCell>{item.category}</TableCell>\n                    <TableCell className=\"font-mono\">{item.price}</TableCell>\n                    <TableCell>{item.stock}</TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"outline\" \n                        className={getStatusColor(item.status)}\n                      >\n                        {item.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{item.sales}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex items-center justify-end gap-2\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => toast({ title: \"View Product\", description: `Viewing ${item.name}` })}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => toast({ title: \"Edit Product\", description: `Edit ${item.name}` })}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => handleDeleteItem(item.id, 'product', item.name)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Orders Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Order Management</CardTitle>\n              <CardDescription>\n                Track and manage customer orders\n              </CardDescription>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => exportToCSV(orderData, 'orders')}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n              <Dialog open={orderModalOpen} onOpenChange={setOrderModalOpen}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Order\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add New Order</DialogTitle>\n                    <DialogDescription>\n                      Enter the order details below.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"orderCustomer\">Customer Name *</Label>\n                      <Input\n                        id=\"orderCustomer\"\n                        value={newOrder.customer}\n                        onChange={(e) => setNewOrder({...newOrder, customer: e.target.value})}\n                        placeholder=\"John Doe\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"orderProduct\">Product *</Label>\n                      <Input\n                        id=\"orderProduct\"\n                        value={newOrder.product}\n                        onChange={(e) => setNewOrder({...newOrder, product: e.target.value})}\n                        placeholder=\"Premium Subscription\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"orderAmount\">Amount *</Label>\n                      <Input\n                        id=\"orderAmount\"\n                        placeholder=\"$29.99\"\n                        value={newOrder.amount}\n                        onChange={(e) => setNewOrder({...newOrder, amount: e.target.value})}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"orderStatus\">Status</Label>\n                      <Select value={newOrder.status} onValueChange={(value) => setNewOrder({...newOrder, status: value})}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"pending\">Pending</SelectItem>\n                          <SelectItem value=\"completed\">Completed</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button variant=\"outline\" onClick={() => setOrderModalOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button onClick={handleAddOrder}>Add Order</Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n              <Input \n                placeholder=\"Search orders...\" \n                value={orderSearchTerm}\n                onChange={(e) => setOrderSearchTerm(e.target.value)}\n                className=\"pl-10 w-64\"\n              />\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              {filteredOrderData.length} of {orderData.length} orders\n            </p>\n          </div>\n\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Order ID</TableHead>\n                  <TableHead>Customer</TableHead>\n                  <TableHead>Product</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredOrderData.map((item) => (\n                  <TableRow key={item.id}>\n                    <TableCell className=\"font-mono\">{item.id}</TableCell>\n                    <TableCell className=\"font-medium\">{item.customer}</TableCell>\n                    <TableCell>{item.product}</TableCell>\n                    <TableCell className=\"font-mono\">{item.amount}</TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"outline\" \n                        className={getStatusColor(item.status)}\n                      >\n                        {item.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-muted-foreground\">{item.date}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex items-center justify-end gap-2\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => toast({ title: \"View Order\", description: `Viewing order ${item.id}` })}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => toast({ title: \"Edit Order\", description: `Edit order ${item.id}` })}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => handleDeleteItem(item.id, 'order', `Order ${item.id}`)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}"
    }
  ],
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {}
      }
    }
  },
  "cssVars": {},
  "meta": {
    "description": "tables component from ribbon-gd",
    "source": "http://localhost:3000/r/tables.json"
  }
}
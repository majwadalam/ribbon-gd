{
  "name": "analytics",
  "type": "page",
  "files": [
    {
      "name": "page.tsx",
      "content": "\"use client\"\n\nimport { V0Button } from \"@/components/v0-button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { useToast } from \"@/lib/use-toast\"\nimport { TrendingUp, Users, CreditCard, Activity, Calendar, Download, BarChart3, PieChart, LineChart, RefreshCw } from \"lucide-react\"\nimport { LineChart as RechartsLineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart as RechartsPieChart, Pie, Cell, AreaChart, Area, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts'\nimport { useState } from \"react\"\n\n// Type definitions\ninterface OverviewMetric {\n  value: string;\n  change: string;\n  trend: string;\n}\n\ninterface RecentSale {\n  name: string;\n  email: string;\n  amount: string;\n}\n\ninterface RevenueDataPoint {\n  month: string;\n  revenue: number;\n  orders: number;\n  customers: number;\n  conversion: number;\n}\n\ninterface UserAnalytics {\n  totalUsers: number;\n  newUsers: number;\n  returningUsers: number;\n  sessionDuration: string;\n  bounceRate: string;\n  conversionRate: string;\n}\n\ninterface TrafficSource {\n  source: string;\n  users: number;\n  percentage: number;\n  color: string;\n}\n\ninterface PerformanceMetric {\n  metric: string;\n  value: number;\n  target: number;\n  score: number;\n  color: string;\n}\n\ninterface AnalyticsData {\n  overview: {\n    revenue: OverviewMetric;\n    subscriptions: OverviewMetric;\n    sales: OverviewMetric;\n    activeNow: OverviewMetric;\n  };\n  recentSales: RecentSale[];\n  revenueData: RevenueDataPoint[];\n  userAnalytics: UserAnalytics;\n  trafficSources: TrafficSource[];\n  performanceMetrics: PerformanceMetric[];\n}\n\n// Sample data for analytics\nconst analyticsData: AnalyticsData = {\n  overview: {\n    revenue: { value: \"$45,231.89\", change: \"+20.1%\", trend: \"up\" },\n    subscriptions: { value: \"2,350\", change: \"+180.1%\", trend: \"up\" },\n    sales: { value: \"12,234\", change: \"+19%\", trend: \"up\" },\n    activeNow: { value: \"573\", change: \"+201\", trend: \"up\" }\n  },\n  recentSales: [\n    { name: \"Olivia Martin\", email: \"olivia.martin@email.com\", amount: \"+$1,999.00\" },\n    { name: \"Jackson Lee\", email: \"jackson.lee@email.com\", amount: \"+$39.00\" },\n    { name: \"Isabella Nguyen\", email: \"isabella.nguyen@email.com\", amount: \"+$299.00\" },\n    { name: \"William Kim\", email: \"will@email.com\", amount: \"+$99.00\" },\n    { name: \"Sofia Davis\", email: \"sofia.davis@email.com\", amount: \"+$39.00\" }\n  ],\n  revenueData: [\n    { month: \"Jan\", revenue: 42350, orders: 1234, customers: 856, conversion: 3.2 },\n    { month: \"Feb\", revenue: 45680, orders: 1367, customers: 923, conversion: 3.4 },\n    { month: \"Mar\", revenue: 48920, orders: 1456, customers: 1012, conversion: 3.6 },\n    { month: \"Apr\", revenue: 52100, orders: 1523, customers: 1145, conversion: 3.5 },\n    { month: \"May\", revenue: 48500, orders: 1489, customers: 1203, conversion: 3.3 },\n    { month: \"Jun\", revenue: 51200, orders: 1598, customers: 1278, conversion: 3.7 }\n  ],\n  userAnalytics: {\n    totalUsers: 12456,\n    newUsers: 2343,\n    returningUsers: 10113,\n    sessionDuration: \"4m 32s\",\n    bounceRate: \"32.5%\",\n    conversionRate: \"3.2%\"\n  },\n  trafficSources: [\n    { source: \"Organic Search\", users: 4567, percentage: 36.7, color: \"#0088FE\" },\n    { source: \"Direct\", users: 3456, percentage: 27.8, color: \"#00C49F\" },\n    { source: \"Social Media\", users: 2345, percentage: 18.8, color: \"#FFBB28\" },\n    { source: \"Email\", users: 1234, percentage: 9.9, color: \"#FF8042\" },\n    { source: \"Referral\", users: 854, percentage: 6.8, color: \"#8884D8\" }\n  ],\n  performanceMetrics: [\n    { metric: \"Page Load Time\", value: 1.2, target: 2.0, score: 85, color: \"#10B981\" },\n    { metric: \"API Response\", value: 245, target: 500, score: 92, color: \"#3B82F6\" },\n    { metric: \"Error Rate\", value: 0.1, target: 1.0, score: 95, color: \"#8B5CF6\" },\n    { metric: \"Uptime\", value: 99.9, target: 99.5, score: 100, color: \"#F59E0B\" },\n    { metric: \"Throughput\", value: 1247, target: 1000, score: 88, color: \"#EF4444\" }\n  ]\n}\n\ntype ExportSection = \"overview\" | \"revenue\" | \"users\" | \"performance\" | \"all\";\ntype ExportFormat = \"csv\" | \"json\";\n\nexport default function Analytics() {\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const { toast } = useToast()\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true)\n    await new Promise(resolve => setTimeout(resolve, 1500))\n    setIsRefreshing(false)\n    toast({\n      title: \"Analytics Refreshed\",\n      description: \"All analytics data has been updated with the latest metrics.\",\n    })\n  }\n\n  const exportAnalytics = (section: ExportSection = \"all\", format: ExportFormat = \"csv\") => {\n    let data: any = {}\n    let filename = \"analytics\"\n\n    switch (section) {\n      case \"overview\":\n        data = analyticsData.overview\n        filename = \"analytics-overview\"\n        break\n      case \"revenue\":\n        data = analyticsData.revenueData\n        filename = \"analytics-revenue\"\n        break\n      case \"users\":\n        data = analyticsData.userAnalytics\n        filename = \"analytics-users\"\n        break\n      case \"performance\":\n        data = analyticsData.performanceMetrics\n        filename = \"analytics-performance\"\n        break\n      default:\n        data = analyticsData\n        filename = \"analytics-complete\"\n    }\n\n    if (format === \"csv\") {\n      exportToCSV(data, filename)\n    } else {\n      exportToJSON(data, filename)\n    }\n  }\n\n  const exportToCSV = (data: any, filename: string) => {\n    let csvContent = \"\"\n    \n    if (Array.isArray(data)) {\n      if (data.length > 0) {\n        const headers = Object.keys(data[0]).join(\",\")\n        csvContent = headers + \"\\n\"\n        data.forEach(row => {\n          csvContent += Object.values(row).join(\",\") + \"\\n\"\n        })\n      }\n    } else if (typeof data === 'object' && data !== null) {\n      csvContent = \"Metric,Value,Change,Trend\\n\"\n      Object.entries(data).forEach(([key, value]) => {\n        if (typeof value === 'object' && value !== null && 'value' in value) {\n          const metric = value as OverviewMetric\n          csvContent += `${key},${metric.value},${metric.change || ''},${metric.trend || ''}\\n`\n        } else {\n          csvContent += `${key},${value},,\\n`\n        }\n      })\n    }\n\n    const blob = new Blob([csvContent], { type: 'text/csv' })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.setAttribute('hidden', '')\n    a.setAttribute('href', url)\n    a.setAttribute('download', `${filename}.csv`)\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n    \n    toast({\n      title: \"Export Successful\",\n      description: `${filename}.csv has been downloaded successfully.`,\n    })\n  }\n\n  const exportToJSON = (data: any, filename: string) => {\n    const dataStr = JSON.stringify(data, null, 2)\n    const blob = new Blob([dataStr], { type: 'application/json' })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.setAttribute('hidden', '')\n    a.setAttribute('href', url)\n    a.setAttribute('download', `${filename}.json`)\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n    \n    toast({\n      title: \"Export Successful\",\n      description: `${filename}.json has been downloaded successfully.`,\n    })\n  }\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Analytics & Reports</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Detailed insights and comprehensive reporting for your business.\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={handleRefresh}\n            disabled={isRefreshing}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <V0Button componentName=\"analytics\" />\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"revenue\">Revenue</TabsTrigger>\n          <TabsTrigger value=\"users\">Users</TabsTrigger>\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"flex justify-end\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => exportAnalytics(\"overview\", \"csv\")}\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Overview\n            </Button>\n          </div>\n          \n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <Card className=\"card-hover\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n                <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analyticsData.overview.revenue.value}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  <span className=\"text-green-500\">{analyticsData.overview.revenue.change}</span> from last month\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"card-hover\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Subscriptions</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analyticsData.overview.subscriptions.value}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  <span className=\"text-green-500\">{analyticsData.overview.subscriptions.change}</span> from last month\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"card-hover\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Sales</CardTitle>\n                <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analyticsData.overview.sales.value}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  <span className=\"text-green-500\">{analyticsData.overview.sales.change}</span> from last month\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"card-hover\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Active Now</CardTitle>\n                <Activity className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analyticsData.overview.activeNow.value}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  <span className=\"text-green-500\">{analyticsData.overview.activeNow.change}</span> since last hour\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-7\">\n            <Card className=\"col-span-4\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Revenue Overview</span>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={() => exportAnalytics(\"revenue\", \"csv\")}\n                  >\n                    <Download className=\"h-4 w-4\" />\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pl-2\">\n                <ResponsiveContainer width=\"100%\" height={350}>\n                  <AreaChart data={analyticsData.revenueData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                    <XAxis \n                      dataKey=\"month\" \n                      className=\"text-muted-foreground\"\n                      fontSize={12}\n                    />\n                    <YAxis \n                      className=\"text-muted-foreground\"\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: 'hsl(var(--background))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '6px'\n                      }}\n                      formatter={(value, name) => {\n                        if (name === 'revenue') return [`$${Number(value).toLocaleString()}`, 'Revenue']\n                        return [Number(value).toLocaleString(), name]\n                      }}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"hsl(var(--primary))\" \n                      fill=\"hsl(var(--primary))\"\n                      fillOpacity={0.1}\n                      strokeWidth={2}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card className=\"col-span-3\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Traffic Sources</span>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={() => exportToCSV(analyticsData.trafficSources, \"traffic-sources\")}\n                  >\n                    <Download className=\"h-4 w-4\" />\n                  </Button>\n                </CardTitle>\n                <CardDescription>\n                  User acquisition by channel\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 mb-4\">\n                  {analyticsData.trafficSources.map((source, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className=\"w-3 h-3 rounded-full\" \n                          style={{ backgroundColor: source.color }}\n                        />\n                        <span className=\"text-sm font-medium\">{source.source}</span>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {source.users.toLocaleString()} ({source.percentage}%)\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <RechartsPieChart>\n                    <Pie\n                      data={analyticsData.trafficSources}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={60}\n                      fill=\"#8884d8\"\n                      dataKey=\"users\"\n                    >\n                      {analyticsData.trafficSources.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value) => [Number(value).toLocaleString(), 'Users']} />\n                  </RechartsPieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"revenue\" className=\"space-y-4\">\n          <div className=\"flex justify-end\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => exportAnalytics(\"revenue\", \"csv\")}\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Revenue Data\n            </Button>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5\" />\n                Revenue Analytics\n              </CardTitle>\n              <CardDescription>\n                Detailed revenue breakdown and trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <RechartsLineChart data={analyticsData.revenueData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                  <XAxis \n                    dataKey=\"month\" \n                    className=\"text-muted-foreground\"\n                    fontSize={12}\n                  />\n                  <YAxis \n                    className=\"text-muted-foreground\"\n                    fontSize={12}\n                    yAxisId=\"left\"\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <YAxis \n                    className=\"text-muted-foreground\"\n                    fontSize={12}\n                    yAxisId=\"right\"\n                    orientation=\"right\"\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: 'hsl(var(--background))',\n                      border: '1px solid hsl(var(--border))',\n                      borderRadius: '6px'\n                    }}\n                    formatter={(value, name) => {\n                      if (name === 'revenue') return [`$${Number(value).toLocaleString()}`, 'Revenue']\n                      if (name === 'conversion') return [`${value}%`, 'Conversion Rate']\n                      return [Number(value).toLocaleString(), name]\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"hsl(var(--primary))\" \n                    strokeWidth={2}\n                    yAxisId=\"left\"\n                    dot={{ fill: 'hsl(var(--primary))' }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"hsl(var(--chart-2))\" \n                    strokeWidth={2}\n                    yAxisId=\"right\"\n                    dot={{ fill: 'hsl(var(--chart-2))' }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"conversion\" \n                    stroke=\"hsl(var(--chart-3))\" \n                    strokeWidth={2}\n                    yAxisId=\"right\"\n                    dot={{ fill: 'hsl(var(--chart-3))' }}\n                  />\n                </RechartsLineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          {/* Revenue Summary Cards */}\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base\">Monthly Trend</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  +${((analyticsData.revenueData[analyticsData.revenueData.length - 1].revenue - analyticsData.revenueData[0].revenue) / analyticsData.revenueData.length).toFixed(0)}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Average monthly growth</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base\">Peak Month</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {analyticsData.revenueData.reduce((prev, current) => (prev.revenue > current.revenue) ? prev : current).month}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  ${analyticsData.revenueData.reduce((prev, current) => (prev.revenue > current.revenue) ? prev : current).revenue.toLocaleString()} revenue\n                </p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base\">Growth Rate</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">18.5%</div>\n                <p className=\"text-xs text-muted-foreground\">Year over year</p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <div className=\"flex justify-end\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => exportAnalytics(\"users\", \"csv\")}\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export User Data\n            </Button>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                User Analytics\n              </CardTitle>\n              <CardDescription>\n                User engagement and growth metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <BarChart data={analyticsData.revenueData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                  <XAxis \n                    dataKey=\"month\" \n                    className=\"text-muted-foreground\"\n                    fontSize={12}\n                  />\n                  <YAxis \n                    className=\"text-muted-foreground\"\n                    fontSize={12}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: 'hsl(var(--background))',\n                      border: '1px solid hsl(var(--border))',\n                      borderRadius: '6px'\n                    }}\n                    formatter={(value) => [Number(value).toLocaleString(), 'Customers']}\n                  />\n                  <Bar \n                    dataKey=\"customers\" \n                    fill=\"hsl(var(--primary))\"\n                    radius={[4, 4, 0, 0]}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          {/* User Metrics Cards */}\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base\">Total Users</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analyticsData.userAnalytics.totalUsers.toLocaleString()}</div>\n                <p className=\"text-xs text-muted-foreground\">All-time users</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base\">New Users</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">{analyticsData.userAnalytics.newUsers.toLocaleString()}</div>\n                <p className=\"text-xs text-muted-foreground\">This month</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base\">Returning Users</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analyticsData.userAnalytics.returningUsers.toLocaleString()}</div>\n                <p className=\"text-xs text-muted-foreground\">This month</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base\">Session Duration</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analyticsData.userAnalytics.sessionDuration}</div>\n                <p className=\"text-xs text-muted-foreground\">Average session</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base\">Bounce Rate</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-orange-600\">{analyticsData.userAnalytics.bounceRate}</div>\n                <p className=\"text-xs text-muted-foreground\">Single page visits</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base\">Conversion Rate</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">{analyticsData.userAnalytics.conversionRate}</div>\n                <p className=\"text-xs text-muted-foreground\">Visitors to customers</p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"performance\" className=\"space-y-4\">\n          <div className=\"flex justify-end\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => exportAnalytics(\"performance\", \"csv\")}\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Performance Data\n            </Button>\n          </div>\n\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className=\"h-5 w-5\" />\n                  Performance Metrics\n                </CardTitle>\n                <CardDescription>\n                  System and business performance indicators\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <RadarChart data={analyticsData.performanceMetrics}>\n                    <PolarGrid />\n                    <PolarAngleAxis dataKey=\"metric\" tick={{ fontSize: 10 }} />\n                    <PolarRadiusAxis domain={[0, 100]} tick={{ fontSize: 8 }} />\n                    <Radar \n                      name=\"Performance Score\" \n                      dataKey=\"score\" \n                      stroke=\"hsl(var(--primary))\" \n                      fill=\"hsl(var(--primary))\" \n                      fillOpacity={0.3} \n                    />\n                  </RadarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Performance Breakdown</CardTitle>\n                <CardDescription>\n                  Detailed performance analysis\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {analyticsData.performanceMetrics.map((metric, index) => (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm font-medium\">{metric.metric}</span>\n                        <Badge \n                          variant=\"outline\" \n                          className={\n                            metric.score >= 90 \n                              ? \"bg-green-100 text-green-800 border-green-200\"\n                              : metric.score >= 70\n                              ? \"bg-yellow-100 text-yellow-800 border-yellow-200\"\n                              : \"bg-red-100 text-red-800 border-red-200\"\n                          }\n                        >\n                          {metric.score}%\n                        </Badge>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Current: {metric.value}{metric.metric.includes('Time') || metric.metric.includes('Response') ? 's' : metric.metric.includes('Rate') || metric.metric.includes('Uptime') ? '%' : ''} \n                        • Target: {metric.target}{metric.metric.includes('Time') || metric.metric.includes('Response') ? 's' : metric.metric.includes('Rate') || metric.metric.includes('Uptime') ? '%' : ''}\n                      </div>\n                      <div className=\"w-full bg-muted rounded-full h-2\">\n                        <div \n                          className=\"h-2 rounded-full transition-all duration-300\"\n                          style={{ \n                            width: `${metric.score}%`,\n                            backgroundColor: metric.color\n                          }}\n                        />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Performance Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Summary</CardTitle>\n              <CardDescription>\n                Overall system health and recommendations\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 md:grid-cols-3\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-medium text-sm mb-2 flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                    Excellent Performance\n                  </h4>\n                  <p className=\"text-xs text-muted-foreground\">\n                    System uptime and error rates are performing exceptionally well, exceeding all target thresholds consistently.\n                  </p>\n                </div>\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-medium text-sm mb-2 flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-yellow-500 rounded-full\" />\n                    Areas for Improvement\n                  </h4>\n                  <p className=\"text-xs text-muted-foreground\">\n                    API response times and throughput can be optimized further to handle increasing user load more efficiently.\n                  </p>\n                </div>\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-medium text-sm mb-2 flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\n                    Recommendations\n                  </h4>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Consider implementing caching strategies and load balancing to improve overall system performance metrics.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}"
    }
  ],
  "dependencies": [
    "recharts",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {}
      }
    }
  }
}
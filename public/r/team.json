{
  "name": "team",
  "type": "page",
  "files": [
    {
      "name": "page.tsx",
      "content": "\"use client\"\r\n\r\nimport { V0Button } from \"@/components/v0-button\"\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/components/ui/dialog\"\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { useToast } from \"@/lib/use-toast\"\r\nimport { \r\n  Users, \r\n  Plus, \r\n  Search, \r\n  MoreHorizontal,\r\n  Mail,\r\n  Shield,\r\n  Crown,\r\n  User,\r\n  Settings,\r\n  Trash2,\r\n  UserX,\r\n  Download,\r\n  RefreshCw\r\n} from \"lucide-react\"\r\nimport { useState } from \"react\"\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts'\r\n\r\n// Initial team members data with comprehensive information\r\nconst initialTeamMembers = [\r\n  {\r\n    id: \"1\",\r\n    name: \"Sarah Johnson\",\r\n    email: \"sarah@example.com\",\r\n    role: \"admin\",\r\n    avatar: \"/avatars/01.png\",\r\n    status: \"active\",\r\n    joinedDate: \"Jan 2024\",\r\n    lastActive: \"2 hours ago\"\r\n  },\r\n  {\r\n    id: \"2\",\r\n    name: \"Mike Chen\",\r\n    email: \"mike@example.com\",\r\n    role: \"editor\",\r\n    avatar: \"/avatars/02.png\",\r\n    status: \"active\",\r\n    joinedDate: \"Feb 2024\",\r\n    lastActive: \"5 minutes ago\"\r\n  },\r\n  {\r\n    id: \"3\",\r\n    name: \"Emily Rodriguez\",\r\n    email: \"emily@example.com\",\r\n    role: \"viewer\",\r\n    avatar: \"/avatars/03.png\",\r\n    status: \"invited\",\r\n    joinedDate: \"Mar 2024\",\r\n    lastActive: \"Never\"\r\n  },\r\n  {\r\n    id: \"4\",\r\n    name: \"David Kim\",\r\n    email: \"david@example.com\",\r\n    role: \"editor\",\r\n    avatar: \"/avatars/04.png\",\r\n    status: \"inactive\",\r\n    joinedDate: \"Jan 2024\",\r\n    lastActive: \"2 weeks ago\"\r\n  },\r\n]\r\n\r\n// Role definitions with permissions and styling\r\nconst roles = [\r\n  {\r\n    value: \"admin\",\r\n    label: \"Admin\",\r\n    description: \"Full access to all features\",\r\n    icon: Crown,\r\n    color: \"text-yellow-600\"\r\n  },\r\n  {\r\n    value: \"editor\",\r\n    label: \"Editor\", \r\n    description: \"Can view and edit content\",\r\n    icon: Settings,\r\n    color: \"text-blue-600\"\r\n  },\r\n  {\r\n    value: \"viewer\",\r\n    label: \"Viewer\",\r\n    description: \"Can only view content\",\r\n    icon: User,\r\n    color: \"text-gray-600\"\r\n  }\r\n]\r\n\r\n// Complete code string for V0 button - includes the entire component\r\nconst TEAM_CODE = `\"use client\"\r\n\r\nimport { V0Button } from \"@/components/v0-button\"\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/components/ui/dialog\"\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { useToast } from \"@/lib/use-toast\"\r\nimport { \r\n  Users, \r\n  Plus, \r\n  Search, \r\n  MoreHorizontal,\r\n  Mail,\r\n  Shield,\r\n  Crown,\r\n  User,\r\n  Settings,\r\n  Trash2,\r\n  UserX,\r\n  Download,\r\n  RefreshCw\r\n} from \"lucide-react\"\r\nimport { useState } from \"react\"\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts'\r\n\r\nconst initialTeamMembers = [\r\n  {\r\n    id: \"1\",\r\n    name: \"Sarah Johnson\",\r\n    email: \"sarah@example.com\",\r\n    role: \"admin\",\r\n    avatar: \"/avatars/01.png\",\r\n    status: \"active\",\r\n    joinedDate: \"Jan 2024\",\r\n    lastActive: \"2 hours ago\"\r\n  },\r\n  {\r\n    id: \"2\",\r\n    name: \"Mike Chen\",\r\n    email: \"mike@example.com\",\r\n    role: \"editor\",\r\n    avatar: \"/avatars/02.png\",\r\n    status: \"active\",\r\n    joinedDate: \"Feb 2024\",\r\n    lastActive: \"5 minutes ago\"\r\n  },\r\n  {\r\n    id: \"3\",\r\n    name: \"Emily Rodriguez\",\r\n    email: \"emily@example.com\",\r\n    role: \"viewer\",\r\n    avatar: \"/avatars/03.png\",\r\n    status: \"invited\",\r\n    joinedDate: \"Mar 2024\",\r\n    lastActive: \"Never\"\r\n  },\r\n  {\r\n    id: \"4\",\r\n    name: \"David Kim\",\r\n    email: \"david@example.com\",\r\n    role: \"editor\",\r\n    avatar: \"/avatars/04.png\",\r\n    status: \"inactive\",\r\n    joinedDate: \"Jan 2024\",\r\n    lastActive: \"2 weeks ago\"\r\n  },\r\n]\r\n\r\nconst roles = [\r\n  {\r\n    value: \"admin\",\r\n    label: \"Admin\",\r\n    description: \"Full access to all features\",\r\n    icon: Crown,\r\n    color: \"text-yellow-600\"\r\n  },\r\n  {\r\n    value: \"editor\",\r\n    label: \"Editor\", \r\n    description: \"Can view and edit content\",\r\n    icon: Settings,\r\n    color: \"text-blue-600\"\r\n  },\r\n  {\r\n    value: \"viewer\",\r\n    label: \"Viewer\",\r\n    description: \"Can only view content\",\r\n    icon: User,\r\n    color: \"text-gray-600\"\r\n  }\r\n]\r\n\r\nexport default function Team() {\r\n  // State management for team members and UI interactions\r\n  const [teamMembers, setTeamMembers] = useState(initialTeamMembers)\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [selectedRole, setSelectedRole] = useState(\"all\")\r\n  const [inviteDialogOpen, setInviteDialogOpen] = useState(false)\r\n  const [isRefreshing, setIsRefreshing] = useState(false)\r\n  const [newMember, setNewMember] = useState({\r\n    name: \"\",\r\n    email: \"\", \r\n    role: \"viewer\"\r\n  })\r\n  \r\n  const { toast } = useToast()\r\n\r\n  // Helper function to get role information\r\n  const getRoleInfo = (role: string) => {\r\n    return roles.find(r => r.value === role) || roles[2]\r\n  }\r\n\r\n  // Helper function to get status badge colors\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case \"active\": return \"bg-green-100 text-green-800 border-green-200\"\r\n      case \"invited\": return \"bg-yellow-100 text-yellow-800 border-yellow-200\"\r\n      case \"inactive\": return \"bg-gray-100 text-gray-800 border-gray-200\"\r\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\"\r\n    }\r\n  }\r\n\r\n  // Filter team members based on search and role selection\r\n  const filteredMembers = teamMembers.filter(member => {\r\n    const matchesSearch = member.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         member.email.toLowerCase().includes(searchTerm.toLowerCase())\r\n    const matchesRole = selectedRole === \"all\" || member.role === selectedRole\r\n    return matchesSearch && matchesRole\r\n  })\r\n\r\n  // Handle inviting new team member\r\n  const handleInviteMember = () => {\r\n    if (!newMember.name || !newMember.email) {\r\n      toast({\r\n        title: \"Missing Information\",\r\n        description: \"Please fill in all required fields.\",\r\n        variant: \"destructive\"\r\n      })\r\n      return\r\n    }\r\n\r\n    const member = {\r\n      id: (teamMembers.length + 1).toString(),\r\n      name: newMember.name,\r\n      email: newMember.email,\r\n      role: newMember.role,\r\n      avatar: \"\",\r\n      status: \"invited\",\r\n      joinedDate: new Date().toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),\r\n      lastActive: \"Never\"\r\n    }\r\n\r\n    setTeamMembers([...teamMembers, member])\r\n    setNewMember({ name: \"\", email: \"\", role: \"viewer\" })\r\n    setInviteDialogOpen(false)\r\n    \r\n    toast({\r\n      title: \"Invitation Sent\",\r\n      description: \\`Successfully invited \\${newMember.name} to join the team.\\`,\r\n    })\r\n  }\r\n\r\n  // Handle removing team member\r\n  const handleRemoveMember = (memberId: string, memberName: string) => {\r\n    setTeamMembers(teamMembers.filter(member => member.id !== memberId))\r\n    toast({\r\n      title: \"Member Removed\",\r\n      description: \\`\\${memberName} has been removed from the team.\\`,\r\n    })\r\n  }\r\n\r\n  // Handle changing team member role\r\n  const handleChangeRole = (memberId: string, newRole: string, memberName: string) => {\r\n    setTeamMembers(teamMembers.map(member => \r\n      member.id === memberId ? { ...member, role: newRole } : member\r\n    ))\r\n    toast({\r\n      title: \"Role Updated\",\r\n      description: \\`\\${memberName}'s role has been changed to \\${getRoleInfo(newRole).label}.\\`,\r\n    })\r\n  }\r\n\r\n  // Handle suspending user\r\n  const handleSuspendUser = (memberId: string, memberName: string) => {\r\n    setTeamMembers(teamMembers.map(member => \r\n      member.id === memberId ? { ...member, status: \"inactive\" } : member\r\n    ))\r\n    toast({\r\n      title: \"User Suspended\",\r\n      description: \\`\\${memberName} has been suspended.\\`,\r\n      variant: \"destructive\"\r\n    })\r\n  }\r\n\r\n  // Handle refreshing team data\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true)\r\n    await new Promise(resolve => setTimeout(resolve, 1500))\r\n    setIsRefreshing(false)\r\n    toast({\r\n      title: \"Team Data Refreshed\",\r\n      description: \"Team member information has been updated.\",\r\n    })\r\n  }\r\n\r\n  // Export team data to CSV\r\n  const exportTeamData = () => {\r\n    const csvData = teamMembers.map(member => \r\n      \\`\\${member.name},\\${member.email},\\${member.role},\\${member.status},\\${member.joinedDate},\\${member.lastActive}\\`\r\n    ).join('\\\\n')\r\n    \r\n    const blob = new Blob([\\`Name,Email,Role,Status,Joined Date,Last Active\\\\n\\${csvData}\\`], { type: 'text/csv' })\r\n    const url = window.URL.createObjectURL(blob)\r\n    const a = document.createElement('a')\r\n    a.href = url\r\n    a.download = 'team-members.csv'\r\n    a.click()\r\n    \r\n    toast({\r\n      title: \"Export Successful\",\r\n      description: \"Team data has been exported to CSV.\",\r\n    })\r\n  }\r\n\r\n  // Data for charts - role distribution\r\n  const roleDistribution = roles.map(role => ({\r\n    name: role.label,\r\n    value: teamMembers.filter(member => member.role === role.value).length,\r\n    color: role.value === 'admin' ? '#EAB308' : role.value === 'editor' ? '#3B82F6' : '#6B7280'\r\n  }))\r\n\r\n  // Data for charts - status distribution\r\n  const statusData = [\r\n    { name: 'Active', value: teamMembers.filter(m => m.status === 'active').length, color: '#10B981' },\r\n    { name: 'Invited', value: teamMembers.filter(m => m.status === 'invited').length, color: '#F59E0B' },\r\n    { name: 'Inactive', value: teamMembers.filter(m => m.status === 'inactive').length, color: '#6B7280' }\r\n  ]\r\n\r\n  return (\r\n    <div className=\"space-y-6 p-6\">\r\n      {/* Page Header with Title and Action Buttons */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Team Management</h1>\r\n          <p className=\"text-muted-foreground mt-1\">\r\n            Manage your team members, roles, and permissions.\r\n          </p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\" \r\n            onClick={handleRefresh}\r\n            disabled={isRefreshing}\r\n          >\r\n            <RefreshCw className={\\`h-4 w-4 mr-2 \\${isRefreshing ? 'animate-spin' : ''}\\`} />\r\n            Refresh\r\n          </Button>\r\n          <Button variant=\"outline\" size=\"sm\" onClick={exportTeamData}>\r\n            <Download className=\"h-4 w-4 mr-2\" />\r\n            Export\r\n          </Button>\r\n          <V0Button \r\n            prompt=\"just render the ui as it is of this page , dont make any changes, just as it is\"\r\n            code={TEAM_CODE}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats Cards Row */}\r\n      <div className=\"grid gap-4 md:grid-cols-4\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Members</CardTitle>\r\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{teamMembers.length}</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              +1 from last month\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Active Users</CardTitle>\r\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {teamMembers.filter(m => m.status === 'active').length}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              {Math.round((teamMembers.filter(m => m.status === 'active').length / teamMembers.length) * 100)}% of total members\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Pending Invites</CardTitle>\r\n            <Mail className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {teamMembers.filter(m => m.status === 'invited').length}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Waiting for response\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Admins</CardTitle>\r\n            <Crown className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {teamMembers.filter(m => m.role === 'admin').length}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Full access members\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Charts Row */}\r\n      <div className=\"grid gap-6 md:grid-cols-2\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Role Distribution</CardTitle>\r\n            <CardDescription>Team members by role</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <ResponsiveContainer width=\"100%\" height={200}>\r\n              <PieChart>\r\n                <Pie\r\n                  data={roleDistribution}\r\n                  cx=\"50%\"\r\n                  cy=\"50%\"\r\n                  outerRadius={60}\r\n                  fill=\"#8884d8\"\r\n                  dataKey=\"value\"\r\n                  label={({ name, percent }) => \\`\\${name} \\${(percent * 100).toFixed(0)}%\\`}\r\n                >\r\n                  {roleDistribution.map((entry, index) => (\r\n                    <Cell key={\\`cell-\\${index}\\`} fill={entry.color} />\r\n                  ))}\r\n                </Pie>\r\n                <Tooltip />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Member Status</CardTitle>\r\n            <CardDescription>Team member activity status</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <ResponsiveContainer width=\"100%\" height={200}>\r\n              <BarChart data={statusData}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\r\n                <XAxis dataKey=\"name\" className=\"text-muted-foreground\" fontSize={12} />\r\n                <YAxis className=\"text-muted-foreground\" fontSize={12} />\r\n                <Tooltip />\r\n                <Bar dataKey=\"value\" fill=\"hsl(var(--primary))\" />\r\n              </BarChart>\r\n            </ResponsiveContainer>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Team Members Management Section */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle>Team Members</CardTitle>\r\n              <CardDescription>\r\n                Manage your team members and their permissions\r\n              </CardDescription>\r\n            </div>\r\n            {/* Invite Member Dialog */}\r\n            <Dialog open={inviteDialogOpen} onOpenChange={setInviteDialogOpen}>\r\n              <DialogTrigger asChild>\r\n                <Button>\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Invite Member\r\n                </Button>\r\n              </DialogTrigger>\r\n              <DialogContent className=\"sm:max-w-[425px]\">\r\n                <DialogHeader>\r\n                  <DialogTitle>Invite Team Member</DialogTitle>\r\n                  <DialogDescription>\r\n                    Send an invitation to join your team.\r\n                  </DialogDescription>\r\n                </DialogHeader>\r\n                <div className=\"grid gap-4 py-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"name\">Full Name</Label>\r\n                    <Input\r\n                      id=\"name\"\r\n                      value={newMember.name}\r\n                      onChange={(e) => setNewMember({...newMember, name: e.target.value})}\r\n                      placeholder=\"John Doe\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"email\">Email</Label>\r\n                    <Input\r\n                      id=\"email\"\r\n                      type=\"email\"\r\n                      value={newMember.email}\r\n                      onChange={(e) => setNewMember({...newMember, email: e.target.value})}\r\n                      placeholder=\"colleague@example.com\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"role\">Role</Label>\r\n                    <Select value={newMember.role} onValueChange={(value) => setNewMember({...newMember, role: value})}>\r\n                      <SelectTrigger>\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        {roles.map((role) => (\r\n                          <SelectItem key={role.value} value={role.value}>\r\n                            <div className=\"flex items-center gap-2\">\r\n                              <role.icon className={\\`h-4 w-4 \\${role.color}\\`} />\r\n                              <div>\r\n                                <div className=\"font-medium\">{role.label}</div>\r\n                                <div className=\"text-xs text-muted-foreground\">\r\n                                  {role.description}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </SelectItem>\r\n                        ))}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex justify-end gap-2\">\r\n                  <Button variant=\"outline\" onClick={() => setInviteDialogOpen(false)}>\r\n                    Cancel\r\n                  </Button>\r\n                  <Button onClick={handleInviteMember}>Send Invitation</Button>\r\n                </div>\r\n              </DialogContent>\r\n            </Dialog>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Search and Filter Controls */}\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\r\n                <Input \r\n                  placeholder=\"Search members...\" \r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10 w-64\"\r\n                />\r\n              </div>\r\n              <Select value={selectedRole} onValueChange={setSelectedRole}>\r\n                <SelectTrigger className=\"w-32\">\r\n                  <SelectValue placeholder=\"Role\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Roles</SelectItem>\r\n                  <SelectItem value=\"admin\">Admin</SelectItem>\r\n                  <SelectItem value=\"editor\">Editor</SelectItem>\r\n                  <SelectItem value=\"viewer\">Viewer</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              {filteredMembers.length} of {teamMembers.length} members\r\n            </p>\r\n          </div>\r\n\r\n          {/* Team Members List */}\r\n          <div className=\"space-y-3\">\r\n            {filteredMembers.map((member) => {\r\n              const roleInfo = getRoleInfo(member.role)\r\n              const RoleIcon = roleInfo.icon\r\n\r\n              return (\r\n                <Card key={member.id} className=\"p-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center space-x-4\">\r\n                      <Avatar className=\"h-10 w-10\">\r\n                        <AvatarImage src={member.avatar} />\r\n                        <AvatarFallback>\r\n                          {member.name.split(' ').map(n => n[0]).join('')}\r\n                        </AvatarFallback>\r\n                      </Avatar>\r\n                      <div className=\"space-y-1\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <h4 className=\"text-sm font-semibold\">{member.name}</h4>\r\n                          <Badge \r\n                            variant=\"outline\" \r\n                            className={getStatusColor(member.status)}\r\n                          >\r\n                            {member.status}\r\n                          </Badge>\r\n                        </div>\r\n                        <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\r\n                          <span>{member.email}</span>\r\n                          <span>•</span>\r\n                          <span>Joined {member.joinedDate}</span>\r\n                          <span>•</span>\r\n                          <span>Active {member.lastActive}</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <div className=\"flex items-center gap-2 text-sm\">\r\n                        <RoleIcon className={\\`h-4 w-4 \\${roleInfo.color}\\`} />\r\n                        <span className=\"font-medium\">{roleInfo.label}</span>\r\n                      </div>\r\n                      \r\n                      {/* Member Actions Dropdown */}\r\n                      <DropdownMenu>\r\n                        <DropdownMenuTrigger asChild>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <MoreHorizontal className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </DropdownMenuTrigger>\r\n                        <DropdownMenuContent align=\"end\">\r\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\r\n                          <DropdownMenuItem onClick={() => {\r\n                            toast({\r\n                              title: \"Email Sent\",\r\n                              description: \\`Email sent to \\${member.name}\\`,\r\n                            })\r\n                          }}>\r\n                            <Mail className=\"mr-2 h-4 w-4\" />\r\n                            Send Email\r\n                          </DropdownMenuItem>\r\n                          <DropdownMenuItem onClick={() => handleChangeRole(member.id, member.role === 'viewer' ? 'editor' : 'viewer', member.name)}>\r\n                            <Settings className=\"mr-2 h-4 w-4\" />\r\n                            Change Role\r\n                          </DropdownMenuItem>\r\n                          <DropdownMenuSeparator />\r\n                          <DropdownMenuItem onClick={() => handleSuspendUser(member.id, member.name)}>\r\n                            <UserX className=\"mr-2 h-4 w-4\" />\r\n                            Suspend User\r\n                          </DropdownMenuItem>\r\n                          <DropdownMenuItem \r\n                            className=\"text-destructive\"\r\n                            onClick={() => handleRemoveMember(member.id, member.name)}\r\n                          >\r\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\r\n                            Remove User\r\n                          </DropdownMenuItem>\r\n                        </DropdownMenuContent>\r\n                      </DropdownMenu>\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              )\r\n            })}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}`\r\n\r\nexport default function Team() {\r\n  // State management for team members and UI interactions\r\n  const [teamMembers, setTeamMembers] = useState(initialTeamMembers)\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [selectedRole, setSelectedRole] = useState(\"all\")\r\n  const [inviteDialogOpen, setInviteDialogOpen] = useState(false)\r\n  const [isRefreshing, setIsRefreshing] = useState(false)\r\n  const [newMember, setNewMember] = useState({\r\n    name: \"\",\r\n    email: \"\", \r\n    role: \"viewer\"\r\n  })\r\n  \r\n  const { toast } = useToast()\r\n\r\n  // Helper function to get role information\r\n  const getRoleInfo = (role: string) => {\r\n    return roles.find(r => r.value === role) || roles[2]\r\n  }\r\n\r\n  // Helper function to get status badge colors\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case \"active\": return \"bg-green-100 text-green-800 border-green-200\"\r\n      case \"invited\": return \"bg-yellow-100 text-yellow-800 border-yellow-200\"\r\n      case \"inactive\": return \"bg-gray-100 text-gray-800 border-gray-200\"\r\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\"\r\n    }\r\n  }\r\n\r\n  // Filter team members based on search and role selection\r\n  const filteredMembers = teamMembers.filter(member => {\r\n    const matchesSearch = member.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         member.email.toLowerCase().includes(searchTerm.toLowerCase())\r\n    const matchesRole = selectedRole === \"all\" || member.role === selectedRole\r\n    return matchesSearch && matchesRole\r\n  })\r\n\r\n  // Handle inviting new team member\r\n  const handleInviteMember = () => {\r\n    if (!newMember.name || !newMember.email) {\r\n      toast({\r\n        title: \"Missing Information\",\r\n        description: \"Please fill in all required fields.\",\r\n        variant: \"destructive\"\r\n      })\r\n      return\r\n    }\r\n\r\n    const member = {\r\n      id: (teamMembers.length + 1).toString(),\r\n      name: newMember.name,\r\n      email: newMember.email,\r\n      role: newMember.role,\r\n      avatar: \"\",\r\n      status: \"invited\",\r\n      joinedDate: new Date().toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),\r\n      lastActive: \"Never\"\r\n    }\r\n\r\n    setTeamMembers([...teamMembers, member])\r\n    setNewMember({ name: \"\", email: \"\", role: \"viewer\" })\r\n    setInviteDialogOpen(false)\r\n    \r\n    toast({\r\n      title: \"Invitation Sent\",\r\n      description: `Successfully invited ${newMember.name} to join the team.`,\r\n    })\r\n  }\r\n\r\n  // Handle removing team member\r\n  const handleRemoveMember = (memberId: string, memberName: string) => {\r\n    setTeamMembers(teamMembers.filter(member => member.id !== memberId))\r\n    toast({\r\n      title: \"Member Removed\",\r\n      description: `${memberName} has been removed from the team.`,\r\n    })\r\n  }\r\n\r\n  // Handle changing team member role\r\n  const handleChangeRole = (memberId: string, newRole: string, memberName: string) => {\r\n    setTeamMembers(teamMembers.map(member => \r\n      member.id === memberId ? { ...member, role: newRole } : member\r\n    ))\r\n    toast({\r\n      title: \"Role Updated\",\r\n      description: `${memberName}'s role has been changed to ${getRoleInfo(newRole).label}.`,\r\n    })\r\n  }\r\n\r\n  // Handle suspending user\r\n  const handleSuspendUser = (memberId: string, memberName: string) => {\r\n    setTeamMembers(teamMembers.map(member => \r\n      member.id === memberId ? { ...member, status: \"inactive\" } : member\r\n    ))\r\n    toast({\r\n      title: \"User Suspended\",\r\n      description: `${memberName} has been suspended.`,\r\n      variant: \"destructive\"\r\n    })\r\n  }\r\n\r\n  // Handle refreshing team data\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true)\r\n    await new Promise(resolve => setTimeout(resolve, 1500))\r\n    setIsRefreshing(false)\r\n    toast({\r\n      title: \"Team Data Refreshed\",\r\n      description: \"Team member information has been updated.\",\r\n    })\r\n  }\r\n\r\n  // Export team data to CSV\r\n  const exportTeamData = () => {\r\n    const csvData = teamMembers.map(member => \r\n      `${member.name},${member.email},${member.role},${member.status},${member.joinedDate},${member.lastActive}`\r\n    ).join('\\n')\r\n    \r\n    const blob = new Blob([`Name,Email,Role,Status,Joined Date,Last Active\\n${csvData}`], { type: 'text/csv' })\r\n    const url = window.URL.createObjectURL(blob)\r\n    const a = document.createElement('a')\r\n    a.href = url\r\n    a.download = 'team-members.csv'\r\n    a.click()\r\n    \r\n    toast({\r\n      title: \"Export Successful\",\r\n      description: \"Team data has been exported to CSV.\",\r\n    })\r\n  }\r\n\r\n  // Data for charts - role distribution\r\n  const roleDistribution = roles.map(role => ({\r\n    name: role.label,\r\n    value: teamMembers.filter(member => member.role === role.value).length,\r\n    color: role.value === 'admin' ? '#EAB308' : role.value === 'editor' ? '#3B82F6' : '#6B7280'\r\n  }))\r\n\r\n  // Data for charts - status distribution\r\n  const statusData = [\r\n    { name: 'Active', value: teamMembers.filter(m => m.status === 'active').length, color: '#10B981' },\r\n    { name: 'Invited', value: teamMembers.filter(m => m.status === 'invited').length, color: '#F59E0B' },\r\n    { name: 'Inactive', value: teamMembers.filter(m => m.status === 'inactive').length, color: '#6B7280' }\r\n  ]\r\n\r\n  return (\r\n    <div className=\"space-y-6 p-6\">\r\n      {/* Page Header with Title and Action Buttons */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Team Management</h1>\r\n          <p className=\"text-muted-foreground mt-1\">\r\n            Manage your team members, roles, and permissions.\r\n          </p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\" \r\n            onClick={handleRefresh}\r\n            disabled={isRefreshing}\r\n          >\r\n            <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n            Refresh\r\n          </Button>\r\n          <Button variant=\"outline\" size=\"sm\" onClick={exportTeamData}>\r\n            <Download className=\"h-4 w-4 mr-2\" />\r\n            Export\r\n          </Button>\r\n          <V0Button \r\n            prompt=\"just render the ui as it is of this page , dont make any changes, just as it is\"\r\n            code={TEAM_CODE}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats Cards Row */}\r\n      <div className=\"grid gap-4 md:grid-cols-4\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Members</CardTitle>\r\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{teamMembers.length}</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              +1 from last month\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Active Users</CardTitle>\r\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {teamMembers.filter(m => m.status === 'active').length}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              {Math.round((teamMembers.filter(m => m.status === 'active').length / teamMembers.length) * 100)}% of total members\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Pending Invites</CardTitle>\r\n            <Mail className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {teamMembers.filter(m => m.status === 'invited').length}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Waiting for response\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Admins</CardTitle>\r\n            <Crown className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {teamMembers.filter(m => m.role === 'admin').length}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Full access members\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Charts Row */}\r\n      <div className=\"grid gap-6 md:grid-cols-2\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Role Distribution</CardTitle>\r\n            <CardDescription>Team members by role</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <ResponsiveContainer width=\"100%\" height={200}>\r\n              <PieChart>\r\n                <Pie\r\n                  data={roleDistribution}\r\n                  cx=\"50%\"\r\n                  cy=\"50%\"\r\n                  outerRadius={60}\r\n                  fill=\"#8884d8\"\r\n                  dataKey=\"value\"\r\n                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\r\n                >\r\n                  {roleDistribution.map((entry, index) => (\r\n                    <Cell key={`cell-${index}`} fill={entry.color} />\r\n                  ))}\r\n                </Pie>\r\n                <Tooltip />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Member Status</CardTitle>\r\n            <CardDescription>Team member activity status</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <ResponsiveContainer width=\"100%\" height={200}>\r\n              <BarChart data={statusData}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\r\n                <XAxis dataKey=\"name\" className=\"text-muted-foreground\" fontSize={12} />\r\n                <YAxis className=\"text-muted-foreground\" fontSize={12} />\r\n                <Tooltip />\r\n                <Bar dataKey=\"value\" fill=\"hsl(var(--primary))\" />\r\n              </BarChart>\r\n            </ResponsiveContainer>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Team Members Management Section */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle>Team Members</CardTitle>\r\n              <CardDescription>\r\n                Manage your team members and their permissions\r\n              </CardDescription>\r\n            </div>\r\n            {/* Invite Member Dialog */}\r\n            <Dialog open={inviteDialogOpen} onOpenChange={setInviteDialogOpen}>\r\n              <DialogTrigger asChild>\r\n                <Button>\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Invite Member\r\n                </Button>\r\n              </DialogTrigger>\r\n              <DialogContent className=\"sm:max-w-[425px]\">\r\n                <DialogHeader>\r\n                  <DialogTitle>Invite Team Member</DialogTitle>\r\n                  <DialogDescription>\r\n                    Send an invitation to join your team.\r\n                  </DialogDescription>\r\n                </DialogHeader>\r\n                <div className=\"grid gap-4 py-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"name\">Full Name</Label>\r\n                    <Input\r\n                      id=\"name\"\r\n                      value={newMember.name}\r\n                      onChange={(e) => setNewMember({...newMember, name: e.target.value})}\r\n                      placeholder=\"John Doe\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"email\">Email</Label>\r\n                    <Input\r\n                      id=\"email\"\r\n                      type=\"email\"\r\n                      value={newMember.email}\r\n                      onChange={(e) => setNewMember({...newMember, email: e.target.value})}\r\n                      placeholder=\"colleague@example.com\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"role\">Role</Label>\r\n                    <Select value={newMember.role} onValueChange={(value) => setNewMember({...newMember, role: value})}>\r\n                      <SelectTrigger>\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        {roles.map((role) => (\r\n                          <SelectItem key={role.value} value={role.value}>\r\n                            <div className=\"flex items-center gap-2\">\r\n                              <role.icon className={`h-4 w-4 ${role.color}`} />\r\n                              <div>\r\n                                <div className=\"font-medium\">{role.label}</div>\r\n                                <div className=\"text-xs text-muted-foreground\">\r\n                                  {role.description}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </SelectItem>\r\n                        ))}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex justify-end gap-2\">\r\n                  <Button variant=\"outline\" onClick={() => setInviteDialogOpen(false)}>\r\n                    Cancel\r\n                  </Button>\r\n                  <Button onClick={handleInviteMember}>Send Invitation</Button>\r\n                </div>\r\n              </DialogContent>\r\n            </Dialog>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Search and Filter Controls */}\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\r\n                <Input \r\n                  placeholder=\"Search members...\" \r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10 w-64\"\r\n                />\r\n              </div>\r\n              <Select value={selectedRole} onValueChange={setSelectedRole}>\r\n                <SelectTrigger className=\"w-32\">\r\n                  <SelectValue placeholder=\"Role\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Roles</SelectItem>\r\n                  <SelectItem value=\"admin\">Admin</SelectItem>\r\n                  <SelectItem value=\"editor\">Editor</SelectItem>\r\n                  <SelectItem value=\"viewer\">Viewer</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              {filteredMembers.length} of {teamMembers.length} members\r\n            </p>\r\n          </div>\r\n\r\n          {/* Team Members List */}\r\n          <div className=\"space-y-3\">\r\n            {filteredMembers.map((member) => {\r\n              const roleInfo = getRoleInfo(member.role)\r\n              const RoleIcon = roleInfo.icon\r\n\r\n              return (\r\n                <Card key={member.id} className=\"p-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center space-x-4\">\r\n                      <Avatar className=\"h-10 w-10\">\r\n                        <AvatarImage src={member.avatar} />\r\n                        <AvatarFallback>\r\n                          {member.name.split(' ').map(n => n[0]).join('')}\r\n                        </AvatarFallback>\r\n                      </Avatar>\r\n                      <div className=\"space-y-1\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <h4 className=\"text-sm font-semibold\">{member.name}</h4>\r\n                          <Badge \r\n                            variant=\"outline\" \r\n                            className={getStatusColor(member.status)}\r\n                          >\r\n                            {member.status}\r\n                          </Badge>\r\n                        </div>\r\n                        <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\r\n                          <span>{member.email}</span>\r\n                          <span>•</span>\r\n                          <span>Joined {member.joinedDate}</span>\r\n                          <span>•</span>\r\n                          <span>Active {member.lastActive}</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <div className=\"flex items-center gap-2 text-sm\">\r\n                        <RoleIcon className={`h-4 w-4 ${roleInfo.color}`} />\r\n                        <span className=\"font-medium\">{roleInfo.label}</span>\r\n                      </div>\r\n                      \r\n                      {/* Member Actions Dropdown */}\r\n                      <DropdownMenu>\r\n                        <DropdownMenuTrigger asChild>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <MoreHorizontal className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </DropdownMenuTrigger>\r\n                        <DropdownMenuContent align=\"end\">\r\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\r\n                          <DropdownMenuItem onClick={() => {\r\n                            toast({\r\n                              title: \"Email Sent\",\r\n                              description: `Email sent to ${member.name}`,\r\n                            })\r\n                          }}>\r\n                            <Mail className=\"mr-2 h-4 w-4\" />\r\n                            Send Email\r\n                          </DropdownMenuItem>\r\n                          <DropdownMenuItem onClick={() => handleChangeRole(member.id, member.role === 'viewer' ? 'editor' : 'viewer', member.name)}>\r\n                            <Settings className=\"mr-2 h-4 w-4\" />\r\n                            Change Role\r\n                          </DropdownMenuItem>\r\n                          <DropdownMenuSeparator />\r\n                          <DropdownMenuItem onClick={() => handleSuspendUser(member.id, member.name)}>\r\n                            <UserX className=\"mr-2 h-4 w-4\" />\r\n                            Suspend User\r\n                          </DropdownMenuItem>\r\n                          <DropdownMenuItem \r\n                            className=\"text-destructive\"\r\n                            onClick={() => handleRemoveMember(member.id, member.name)}\r\n                          >\r\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\r\n                            Remove User\r\n                          </DropdownMenuItem>\r\n                        </DropdownMenuContent>\r\n                      </DropdownMenu>\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              )\r\n            })}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}"
    }
  ],
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {}
      }
    }
  }
}
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "team",
  "type": "registry:block",
  "title": "Team",
  "description": "team component from ribbon-gd",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "app/team/page.tsx",
      "content": "\"use client\"\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Tooltip as UITooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\nimport { \n  Users, \n  Plus, \n  Search, \n  MoreHorizontal,\n  Mail,\n  Shield,\n  Crown,\n  User,\n  Settings,\n  Trash2,\n  UserX,\n  Download,\n  RefreshCw,\n  Code,\n  ExternalLink\n} from \"lucide-react\"\nimport { useState } from \"react\"\nimport { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts'\n\nconst initialTeamMembers = [\n  {\n    id: \"1\",\n    name: \"Sarah Johnson\",\n    email: \"sarah@example.com\",\n    role: \"admin\",\n    avatar: \"/avatars/01.png\",\n    status: \"active\",\n    joinedDate: \"Jan 2024\",\n    lastActive: \"2 hours ago\"\n  },\n  {\n    id: \"2\",\n    name: \"Mike Chen\",\n    email: \"mike@example.com\",\n    role: \"editor\",\n    avatar: \"/avatars/02.png\",\n    status: \"active\",\n    joinedDate: \"Feb 2024\",\n    lastActive: \"5 minutes ago\"\n  },\n  {\n    id: \"3\",\n    name: \"Emily Rodriguez\",\n    email: \"emily@example.com\",\n    role: \"viewer\",\n    avatar: \"/avatars/03.png\",\n    status: \"invited\",\n    joinedDate: \"Mar 2024\",\n    lastActive: \"Never\"\n  },\n  {\n    id: \"4\",\n    name: \"David Kim\",\n    email: \"david@example.com\",\n    role: \"editor\",\n    avatar: \"/avatars/04.png\",\n    status: \"inactive\",\n    joinedDate: \"Jan 2024\",\n    lastActive: \"2 weeks ago\"\n  },\n]\n\nconst roles = [\n  {\n    value: \"admin\",\n    label: \"Admin\",\n    description: \"Full access to all features\",\n    icon: Crown,\n    color: \"text-yellow-600\"\n  },\n  {\n    value: \"editor\",\n    label: \"Editor\", \n    description: \"Can view and edit content\",\n    icon: Settings,\n    color: \"text-blue-600\"\n  },\n  {\n    value: \"viewer\",\n    label: \"Viewer\",\n    description: \"Can only view content\",\n    icon: User,\n    color: \"text-gray-600\"\n  }\n]\n\nexport default function Team() {\n  const [teamMembers, setTeamMembers] = useState(initialTeamMembers)\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [selectedRole, setSelectedRole] = useState(\"all\")\n  const [inviteDialogOpen, setInviteDialogOpen] = useState(false)\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const [newMember, setNewMember] = useState({\n    name: \"\",\n    email: \"\", \n    role: \"viewer\"\n  })\n\n  const getRoleInfo = (role: string) => {\n    return roles.find(r => r.value === role) || roles[2]\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-green-100 text-green-800 border-green-200\"\n      case \"invited\": return \"bg-yellow-100 text-yellow-800 border-yellow-200\"\n      case \"inactive\": return \"bg-gray-100 text-gray-800 border-gray-200\"\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\"\n    }\n  }\n\n  const filteredMembers = teamMembers.filter(member => {\n    const matchesSearch = member.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         member.email.toLowerCase().includes(searchTerm.toLowerCase())\n    const matchesRole = selectedRole === \"all\" || member.role === selectedRole\n    return matchesSearch && matchesRole\n  })\n\n  const handleInviteMember = () => {\n    if (!newMember.name || !newMember.email) {\n      return\n    }\n\n    const member = {\n      id: (teamMembers.length + 1).toString(),\n      name: newMember.name,\n      email: newMember.email,\n      role: newMember.role,\n      avatar: \"\",\n      status: \"invited\",\n      joinedDate: new Date().toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),\n      lastActive: \"Never\"\n    }\n\n    setTeamMembers([...teamMembers, member])\n    setNewMember({ name: \"\", email: \"\", role: \"viewer\" })\n    setInviteDialogOpen(false)\n  }\n\n  const handleRemoveMember = (memberId: string, memberName: string) => {\n    setTeamMembers(teamMembers.filter(member => member.id !== memberId))\n  }\n\n  const handleChangeRole = (memberId: string, newRole: string, memberName: string) => {\n    setTeamMembers(teamMembers.map(member => \n      member.id === memberId ? { ...member, role: newRole } : member\n    ))\n  }\n\n  const handleSuspendUser = (memberId: string, memberName: string) => {\n    setTeamMembers(teamMembers.map(member => \n      member.id === memberId ? { ...member, status: \"inactive\" } : member\n    ))\n  }\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true)\n    await new Promise(resolve => setTimeout(resolve, 1500))\n    setIsRefreshing(false)\n  }\n\n  const exportTeamData = () => {\n    const csvData = teamMembers.map(member => \n      `${member.name},${member.email},${member.role},${member.status},${member.joinedDate},${member.lastActive}`\n    ).join('\\n')\n    \n    const blob = new Blob([`Name,Email,Role,Status,Joined Date,Last Active\\n${csvData}`], { type: 'text/csv' })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = 'team-members.csv'\n    a.click()\n  }\n\n  // Data for charts\n  const roleDistribution = roles.map(role => ({\n    name: role.label,\n    value: teamMembers.filter(member => member.role === role.value).length,\n    color: role.value === 'admin' ? '#EAB308' : role.value === 'editor' ? '#3B82F6' : '#6B7280'\n  }))\n\n  const statusData = [\n    { name: 'Active', value: teamMembers.filter(m => m.status === 'active').length, color: '#10B981' },\n    { name: 'Invited', value: teamMembers.filter(m => m.status === 'invited').length, color: '#F59E0B' },\n    { name: 'Inactive', value: teamMembers.filter(m => m.status === 'inactive').length, color: '#6B7280' }\n  ]\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Team Management</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your team members, roles, and permissions.\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={handleRefresh}\n            disabled={isRefreshing}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={exportTeamData}>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <TooltipProvider>\n            <UITooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    const baseUrl = typeof window !== 'undefined' ? window.location.origin : ''\n                    const registryUrl = `${baseUrl}/r/team.json`\n                    const v0Url = `https://v0.dev/chat/api/open?url=${encodeURIComponent(registryUrl)}`\n                    window.open(v0Url, '_blank', 'noopener,noreferrer')\n                  }}\n                  className=\"flex items-center gap-2\"\n                  aria-label=\"Open in v0\"\n                >\n                  <Code className=\"h-4 w-4\" />\n                  <span className=\"hidden sm:inline\">Open in v0</span>\n                  <ExternalLink className=\"h-3 w-3\" />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Open this component in v0 for AI-powered editing</p>\n              </TooltipContent>\n            </UITooltip>\n          </TooltipProvider>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Members</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{teamMembers.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              +1 from last month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Users</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {teamMembers.filter(m => m.status === 'active').length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {Math.round((teamMembers.filter(m => m.status === 'active').length / teamMembers.length) * 100)}% of total members\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Invites</CardTitle>\n            <Mail className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {teamMembers.filter(m => m.status === 'invited').length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Waiting for response\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Admins</CardTitle>\n            <Crown className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {teamMembers.filter(m => m.role === 'admin').length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Full access members\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Row */}\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Role Distribution</CardTitle>\n            <CardDescription>Team members by role</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <PieChart>\n                <Pie\n                  data={roleDistribution}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={60}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                >\n                  {roleDistribution.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Member Status</CardTitle>\n            <CardDescription>Team member activity status</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <BarChart data={statusData}>\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                <XAxis dataKey=\"name\" className=\"text-muted-foreground\" fontSize={12} />\n                <YAxis className=\"text-muted-foreground\" fontSize={12} />\n                <Tooltip />\n                <Bar dataKey=\"value\" fill=\"hsl(var(--primary))\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Team Members</CardTitle>\n              <CardDescription>\n                Manage your team members and their permissions\n              </CardDescription>\n            </div>\n            <Dialog open={inviteDialogOpen} onOpenChange={setInviteDialogOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Invite Member\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[425px]\">\n                <DialogHeader>\n                  <DialogTitle>Invite Team Member</DialogTitle>\n                  <DialogDescription>\n                    Send an invitation to join your team.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"grid gap-4 py-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Full Name</Label>\n                    <Input\n                      id=\"name\"\n                      value={newMember.name}\n                      onChange={(e) => setNewMember({...newMember, name: e.target.value})}\n                      placeholder=\"John Doe\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={newMember.email}\n                      onChange={(e) => setNewMember({...newMember, email: e.target.value})}\n                      placeholder=\"colleague@example.com\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"role\">Role</Label>\n                    <Select value={newMember.role} onValueChange={(value) => setNewMember({...newMember, role: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {roles.map((role) => (\n                          <SelectItem key={role.value} value={role.value}>\n                            <div className=\"flex items-center gap-2\">\n                              <role.icon className={`h-4 w-4 ${role.color}`} />\n                              <div>\n                                <div className=\"font-medium\">{role.label}</div>\n                                <div className=\"text-xs text-muted-foreground\">\n                                  {role.description}\n                                </div>\n                              </div>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setInviteDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={handleInviteMember}>Send Invitation</Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                <Input \n                  placeholder=\"Search members...\" \n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n              <Select value={selectedRole} onValueChange={setSelectedRole}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Roles</SelectItem>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                  <SelectItem value=\"editor\">Editor</SelectItem>\n                  <SelectItem value=\"viewer\">Viewer</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              {filteredMembers.length} of {teamMembers.length} members\n            </p>\n          </div>\n\n          <div className=\"space-y-3\">\n            {filteredMembers.map((member) => {\n              const roleInfo = getRoleInfo(member.role)\n              const RoleIcon = roleInfo.icon\n\n              return (\n                <Card key={member.id} className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <Avatar className=\"h-10 w-10\">\n                        <AvatarImage src={member.avatar} />\n                        <AvatarFallback>\n                          {member.name.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <h4 className=\"text-sm font-semibold\">{member.name}</h4>\n                          <Badge \n                            variant=\"outline\" \n                            className={getStatusColor(member.status)}\n                          >\n                            {member.status}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                          <span>{member.email}</span>\n                          <span>•</span>\n                          <span>Joined {member.joinedDate}</span>\n                          <span>•</span>\n                          <span>Active {member.lastActive}</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <RoleIcon className={`h-4 w-4 ${roleInfo.color}`} />\n                        <span className=\"font-medium\">{roleInfo.label}</span>\n                      </div>\n                      \n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem onClick={() => {\n                          }}>\n                            <Mail className=\"mr-2 h-4 w-4\" />\n                            Send Email\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={() => handleChangeRole(member.id, member.role === 'viewer' ? 'editor' : 'viewer', member.name)}>\n                            <Settings className=\"mr-2 h-4 w-4\" />\n                            Change Role\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem onClick={() => handleSuspendUser(member.id, member.name)}>\n                            <UserX className=\"mr-2 h-4 w-4\" />\n                            Suspend User\n                          </DropdownMenuItem>\n                          <DropdownMenuItem \n                            className=\"text-destructive\"\n                            onClick={() => handleRemoveMember(member.id, member.name)}\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Remove User\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                  </div>\n                </Card>\n              )\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}",
      "type": "registry:component"
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {}
      }
    }
  },
  "meta": {
    "description": "team component from ribbon-gd",
    "source": "https://ribbon-gd.vercel.app/r/team.json"
  }
}
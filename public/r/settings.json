{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "settings",
  "type": "registry:block",
  "description": "settings component from ribbon-gd",
  "registryDependencies": [],
  "files": [
    {
      "path": "page.tsx",
      "content": "\"use client\"\nimport React, { useState, useRef } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { V0Button } from '@/components/v0-button';\nimport { \n  User, \n  Bell, \n  Shield, \n  CreditCard, \n  Key, \n  Upload,\n  Trash2,\n  Eye,\n  EyeOff,\n  Check,\n  X\n} from 'lucide-react';\n\n// Type definitions for better code maintainability\ninterface ToastType {\n  id: string;\n  title: string;\n  description?: string;\n  variant: \"default\" | \"destructive\";\n  open: boolean;\n}\n\ninterface ProfileData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  company: string;\n  bio: string;\n  timezone: string;\n  avatar: string;\n}\n\ninterface NotificationSettings {\n  marketing: boolean;\n  security: boolean;\n  payments: boolean;\n  realTime: boolean;\n  weeklyReports: boolean;\n}\n\ninterface PasswordData {\n  current: string;\n  new: string;\n  confirm: string;\n}\n\ninterface ApiKey {\n  id: number;\n  name: string;\n  key: string;\n  type: 'production' | 'development';\n}\n\ninterface Session {\n  id: number;\n  name: string;\n  device: string;\n  location: string;\n  active: boolean;\n}\n\ninterface UseToastReturn {\n  toasts: ToastType[];\n  toast: (options: { title: string; description?: string; variant?: \"default\" | \"destructive\" }) => { id: string; dismiss: () => void };\n  dismiss: (toastId: string) => void;\n}\n\n// Custom toast hook implementation\nconst useToast = (): UseToastReturn => {\n  const [toasts, setToasts] = useState<ToastType[]>([]);\n\n  const toast = ({ title, description, variant = \"default\" }: { \n    title: string; \n    description?: string; \n    variant?: \"default\" | \"destructive\" \n  }) => {\n    const id = Date.now().toString();\n    const newToast: ToastType = {\n      id,\n      title,\n      description,\n      variant,\n      open: true\n    };\n\n    setToasts(prev => [...prev, newToast]);\n\n    // Auto dismiss after 3 seconds\n    setTimeout(() => {\n      setToasts(prev => prev.filter(t => t.id !== id));\n    }, 3000);\n\n    return {\n      id,\n      dismiss: () => setToasts(prev => prev.filter(t => t.id !== id))\n    };\n  };\n\n  const dismiss = (toastId: string) => {\n    setToasts(prev => prev.filter(t => t.id !== toastId));\n  };\n\n  return { toasts, toast, dismiss };\n};\n\n// Toast Component Props\ninterface ToasterProps {\n  toasts: ToastType[];\n  dismiss: (toastId: string) => void;\n}\n\n// Toast notification component\nconst Toaster: React.FC<ToasterProps> = ({ toasts, dismiss }) => {\n  return (\n    <div className=\"fixed top-4 right-4 z-50 flex flex-col space-y-2 max-w-sm\">\n      {toasts.map((toast) => (\n        <div\n          key={toast.id}\n          className={`flex items-center justify-between space-x-4 overflow-hidden rounded-md border p-4 shadow-lg transition-all animate-in slide-in-from-top-2 ${\n            toast.variant === \"destructive\"\n              ? \"border-red-200 bg-red-50 text-red-900\"\n              : \"border-green-200 bg-green-50 text-green-900\"\n          }`}\n        >\n          <div className=\"flex items-center space-x-2\">\n            {toast.variant === \"destructive\" ? (\n              <X className=\"h-4 w-4 text-red-500\" />\n            ) : (\n              <Check className=\"h-4 w-4 text-green-500\" />\n            )}\n            <div>\n              {toast.title && <div className=\"text-sm font-semibold\">{toast.title}</div>}\n              {toast.description && <div className=\"text-sm\">{toast.description}</div>}\n            </div>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            className=\"h-6 w-6 p-0\"\n            onClick={() => dismiss(toast.id)}\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Complete code string for V0 button - includes the entire component\nconst SETTINGS_CODE = `\"use client\"\nimport React, { useState, useRef } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { V0Button } from '@/components/v0-button';\nimport { \n  User, \n  Bell, \n  Shield, \n  CreditCard, \n  Key, \n  Upload,\n  Trash2,\n  Eye,\n  EyeOff,\n  Check,\n  X\n} from 'lucide-react';\n\n// Type definitions for better code maintainability\ninterface ToastType {\n  id: string;\n  title: string;\n  description?: string;\n  variant: \"default\" | \"destructive\";\n  open: boolean;\n}\n\ninterface ProfileData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  company: string;\n  bio: string;\n  timezone: string;\n  avatar: string;\n}\n\ninterface NotificationSettings {\n  marketing: boolean;\n  security: boolean;\n  payments: boolean;\n  realTime: boolean;\n  weeklyReports: boolean;\n}\n\ninterface PasswordData {\n  current: string;\n  new: string;\n  confirm: string;\n}\n\ninterface ApiKey {\n  id: number;\n  name: string;\n  key: string;\n  type: 'production' | 'development';\n}\n\ninterface Session {\n  id: number;\n  name: string;\n  device: string;\n  location: string;\n  active: boolean;\n}\n\ninterface UseToastReturn {\n  toasts: ToastType[];\n  toast: (options: { title: string; description?: string; variant?: \"default\" | \"destructive\" }) => { id: string; dismiss: () => void };\n  dismiss: (toastId: string) => void;\n}\n\n// Custom toast hook implementation\nconst useToast = (): UseToastReturn => {\n  const [toasts, setToasts] = useState<ToastType[]>([]);\n\n  const toast = ({ title, description, variant = \"default\" }: { \n    title: string; \n    description?: string; \n    variant?: \"default\" | \"destructive\" \n  }) => {\n    const id = Date.now().toString();\n    const newToast: ToastType = {\n      id,\n      title,\n      description,\n      variant,\n      open: true\n    };\n\n    setToasts(prev => [...prev, newToast]);\n\n    // Auto dismiss after 3 seconds\n    setTimeout(() => {\n      setToasts(prev => prev.filter(t => t.id !== id));\n    }, 3000);\n\n    return {\n      id,\n      dismiss: () => setToasts(prev => prev.filter(t => t.id !== id))\n    };\n  };\n\n  const dismiss = (toastId: string) => {\n    setToasts(prev => prev.filter(t => t.id !== toastId));\n  };\n\n  return { toasts, toast, dismiss };\n};\n\n// Toast Component Props\ninterface ToasterProps {\n  toasts: ToastType[];\n  dismiss: (toastId: string) => void;\n}\n\n// Toast notification component\nconst Toaster: React.FC<ToasterProps> = ({ toasts, dismiss }) => {\n  return (\n    <div className=\"fixed top-4 right-4 z-50 flex flex-col space-y-2 max-w-sm\">\n      {toasts.map((toast) => (\n        <div\n          key={toast.id}\n          className={\\`flex items-center justify-between space-x-4 overflow-hidden rounded-md border p-4 shadow-lg transition-all animate-in slide-in-from-top-2 \\${\n            toast.variant === \"destructive\"\n              ? \"border-red-200 bg-red-50 text-red-900\"\n              : \"border-green-200 bg-green-50 text-green-900\"\n          }\\`}\n        >\n          <div className=\"flex items-center space-x-2\">\n            {toast.variant === \"destructive\" ? (\n              <X className=\"h-4 w-4 text-red-500\" />\n            ) : (\n              <Check className=\"h-4 w-4 text-green-500\" />\n            )}\n            <div>\n              {toast.title && <div className=\"text-sm font-semibold\">{toast.title}</div>}\n              {toast.description && <div className=\"text-sm\">{toast.description}</div>}\n            </div>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            className=\"h-6 w-6 p-0\"\n            onClick={() => dismiss(toast.id)}\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst Settings: React.FC = () => {\n  // Custom toast functionality\n  const { toasts, toast, dismiss } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Profile State Management\n  const [profileData, setProfileData] = useState<ProfileData>({\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'john@example.com',\n    company: 'Acme Inc.',\n    bio: 'Software engineer passionate about building great user experiences.',\n    timezone: 'utc-5',\n    avatar: '/avatars/01.png'\n  });\n\n  // Notification Settings State\n  const [notifications, setNotifications] = useState<NotificationSettings>({\n    marketing: false,\n    security: true,\n    payments: true,\n    realTime: true,\n    weeklyReports: false\n  });\n\n  // Security Settings State\n  const [passwords, setPasswords] = useState<PasswordData>({\n    current: '',\n    new: '',\n    confirm: ''\n  });\n\n  // API Management State\n  const [showApiKey, setShowApiKey] = useState<boolean>(false);\n  const [apiKeys, setApiKeys] = useState<ApiKey[]>([\n    { id: 1, name: 'Production API Key', key: 'rk_live_51H7vX2eZvKYlo2C...', type: 'production' },\n    { id: 2, name: 'Development API Key', key: 'rk_test_4eC39HqLyjWDarjtT1zdp7dc', type: 'development' }\n  ]);\n\n  // Active Sessions State\n  const [sessions, setSessions] = useState<Session[]>([\n    { id: 1, name: 'Current Session', device: 'Chrome on MacOS', location: 'San Francisco, CA', active: true },\n    { id: 2, name: 'iPhone', device: 'Mobile App', location: 'Last seen 2 hours ago', active: false }\n  ]);\n\n  // Handle Profile Updates\n  const handleProfileUpdate = (field: keyof ProfileData, value: string): void => {\n    setProfileData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const saveProfile = (): void => {\n    toast({\n      title: \"Success\",\n      description: \"Profile updated successfully!\",\n      variant: \"default\"\n    });\n  };\n\n  // Handle Avatar Upload\n  const handleAvatarUpload = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.size > 1024 * 1024) { // 1MB limit\n        toast({\n          title: \"Error\",\n          description: \"File size must be less than 1MB\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      \n      const reader = new FileReader();\n      reader.onload = (e: ProgressEvent<FileReader>) => {\n        const result = e.target?.result as string;\n        if (result) {\n          setProfileData(prev => ({ ...prev, avatar: result }));\n          toast({\n            title: \"Success\",\n            description: \"Avatar uploaded successfully!\",\n            variant: \"default\"\n          });\n        }\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Handle Notification Updates\n  const handleNotificationChange = (key: keyof NotificationSettings, value: boolean): void => {\n    setNotifications(prev => ({ ...prev, [key]: value }));\n    toast({\n      title: \"Success\",\n      description: \"Notification preferences updated!\",\n      variant: \"default\"\n    });\n  };\n\n  // Handle Password Update\n  const updatePassword = (): void => {\n    if (!passwords.current || !passwords.new || !passwords.confirm) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all password fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (passwords.new !== passwords.confirm) {\n      toast({\n        title: \"Error\",\n        description: \"New passwords don't match\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (passwords.new.length < 8) {\n      toast({\n        title: \"Error\",\n        description: \"Password must be at least 8 characters\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setPasswords({ current: '', new: '', confirm: '' });\n    toast({\n      title: \"Success\",\n      description: \"Password updated successfully!\",\n      variant: \"default\"\n    });\n  };\n\n  // Handle Session Revoke\n  const revokeSession = (sessionId: number): void => {\n    setSessions(prev => prev.filter(session => session.id !== sessionId));\n    toast({\n      title: \"Success\",\n      description: \"Session revoked successfully!\",\n      variant: \"default\"\n    });\n  };\n\n  // Handle API Key Actions\n  const generateApiKey = (): void => {\n    const newKey: ApiKey = {\n      id: apiKeys.length + 1,\n      name: \\`API Key \\${apiKeys.length + 1}\\`,\n      key: \\`rk_\\${Math.random().toString(36).substring(2, 15)}\\`,\n      type: 'development'\n    };\n    setApiKeys(prev => [...prev, newKey]);\n    toast({\n      title: \"Success\",\n      description: \"New API key generated!\",\n      variant: \"default\"\n    });\n  };\n\n  const deleteApiKey = (keyId: number): void => {\n    setApiKeys(prev => prev.filter(key => key.id !== keyId));\n    toast({\n      title: \"Success\",\n      description: \"API key deleted successfully!\",\n      variant: \"default\"\n    });\n  };\n\n  return (\n    <>\n      <div className=\"space-y-6 p-6\">\n        {/* Page Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Settings</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Manage your account settings and preferences.\n            </p>\n          </div>\n          <V0Button \n            prompt=\"just render the ui as it is of this page , dont make any changes, just as it is\"\n            code={SETTINGS_CODE}\n          />\n        </div>\n\n        {/* Settings Tabs */}\n        <Tabs defaultValue=\"profile\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n            <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n            <TabsTrigger value=\"security\">Security</TabsTrigger>\n            <TabsTrigger value=\"billing\">Billing</TabsTrigger>\n            <TabsTrigger value=\"api\">API</TabsTrigger>\n          </TabsList>\n\n          {/* Profile Tab */}\n          <TabsContent value=\"profile\" className=\"space-y-4\">\n            <div className=\"grid gap-4 md:grid-cols-3\">\n              <Card className=\"md:col-span-2\">\n                <CardHeader>\n                  <CardTitle>Profile Information</CardTitle>\n                  <CardDescription>\n                    Update your profile information and how others see you.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Avatar Upload Section */}\n                  <div className=\"flex items-center gap-4\">\n                    <Avatar className=\"h-20 w-20\">\n                      <AvatarImage src={profileData.avatar} />\n                      <AvatarFallback>\n                        {profileData.firstName[0]}{profileData.lastName[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <input\n                        type=\"file\"\n                        ref={fileInputRef}\n                        onChange={handleAvatarUpload}\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                      />\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => fileInputRef.current?.click()}\n                      >\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        Upload Photo\n                      </Button>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        JPG, GIF or PNG. 1MB Max.\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Profile Form Fields */}\n                  <div className=\"grid gap-4 md:grid-cols-2\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input \n                        id=\"firstName\" \n                        value={profileData.firstName}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('firstName', e.target.value)}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input \n                        id=\"lastName\" \n                        value={profileData.lastName}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('lastName', e.target.value)}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input \n                      id=\"email\" \n                      type=\"email\" \n                      value={profileData.email}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('email', e.target.value)}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company\">Company</Label>\n                    <Input \n                      id=\"company\" \n                      value={profileData.company}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('company', e.target.value)}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"bio\">Bio</Label>\n                    <Textarea\n                      id=\"bio\"\n                      placeholder=\"Tell us about yourself...\"\n                      value={profileData.bio}\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleProfileUpdate('bio', e.target.value)}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"timezone\">Timezone</Label>\n                    <Select \n                      value={profileData.timezone} \n                      onValueChange={(value: string) => handleProfileUpdate('timezone', value)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"utc-8\">Pacific Standard Time (UTC-8)</SelectItem>\n                        <SelectItem value=\"utc-7\">Mountain Standard Time (UTC-7)</SelectItem>\n                        <SelectItem value=\"utc-6\">Central Standard Time (UTC-6)</SelectItem>\n                        <SelectItem value=\"utc-5\">Eastern Standard Time (UTC-5)</SelectItem>\n                        <SelectItem value=\"utc+0\">Greenwich Mean Time (UTC+0)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"flex justify-end\">\n                    <Button onClick={saveProfile}>Save Changes</Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Account Status Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Account Status</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Plan</span>\n                    <Badge>Pro</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Status</span>\n                    <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                      Active\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Member since</span>\n                    <span className=\"text-sm text-muted-foreground\">Jan 2024</span>\n                  </div>\n                  <Separator />\n                  <Button variant=\"outline\" className=\"w-full\">\n                    Upgrade Plan\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Notifications Tab */}\n          <TabsContent value=\"notifications\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Notification Preferences</CardTitle>\n                <CardDescription>\n                  Choose what notifications you want to receive and how.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Email Notifications Section */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-sm font-medium\">Email Notifications</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <div className=\"text-sm font-medium\">Marketing emails</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Receive emails about new products and features\n                        </div>\n                      </div>\n                      <Switch \n                        checked={notifications.marketing}\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('marketing', checked)}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <div className=\"text-sm font-medium\">Security alerts</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Get notified about account security events\n                        </div>\n                      </div>\n                      <Switch \n                        checked={notifications.security}\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('security', checked)}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <div className=\"text-sm font-medium\">Payment notifications</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Alerts about billing and payments\n                        </div>\n                      </div>\n                      <Switch \n                        checked={notifications.payments}\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('payments', checked)}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Push Notifications Section */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-sm font-medium\">Push Notifications</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <div className=\"text-sm font-medium\">Real-time updates</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Get instant notifications for important events\n                        </div>\n                      </div>\n                      <Switch \n                        checked={notifications.realTime}\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('realTime', checked)}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <div className=\"text-sm font-medium\">Weekly reports</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Summary of your account activity\n                        </div>\n                      </div>\n                      <Switch \n                        checked={notifications.weeklyReports}\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('weeklyReports', checked)}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Security Tab */}\n          <TabsContent value=\"security\" className=\"space-y-4\">\n            <div className=\"grid gap-4\">\n              {/* Password Change Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Password</CardTitle>\n                  <CardDescription>\n                    Change your password to keep your account secure.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currentPassword\">Current Password</Label>\n                    <Input \n                      id=\"currentPassword\" \n                      type=\"password\" \n                      value={passwords.current}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPasswords(prev => ({ ...prev, current: e.target.value }))}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"newPassword\">New Password</Label>\n                    <Input \n                      id=\"newPassword\" \n                      type=\"password\" \n                      value={passwords.new}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPasswords(prev => ({ ...prev, new: e.target.value }))}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                    <Input \n                      id=\"confirmPassword\" \n                      type=\"password\" \n                      value={passwords.confirm}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPasswords(prev => ({ ...prev, confirm: e.target.value }))}\n                    />\n                  </div>\n                  <Button onClick={updatePassword}>Update Password</Button>\n                </CardContent>\n              </Card>\n\n              {/* Two-Factor Authentication Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Two-Factor Authentication</CardTitle>\n                  <CardDescription>\n                    Add an extra layer of security to your account.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"font-medium\">Authenticator App</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Use an authenticator app to generate codes\n                      </div>\n                    </div>\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => toast({\n                        title: \"2FA Setup\",\n                        description: \"Two-factor authentication setup started!\",\n                        variant: \"default\"\n                      })}\n                    >\n                      Setup\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Active Sessions Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Active Sessions</CardTitle>\n                  <CardDescription>\n                    Manage your active sessions across devices.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {sessions.map((session) => (\n                    <div key={session.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div>\n                        <div className=\"font-medium\">{session.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {session.device} • {session.location}\n                        </div>\n                      </div>\n                      {session.active ? (\n                        <Badge variant=\"secondary\">Active</Badge>\n                      ) : (\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => revokeSession(session.id)}\n                        >\n                          Revoke\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Billing Tab */}\n          <TabsContent value=\"billing\" className=\"space-y-4\">\n            <div className=\"grid gap-4\">\n              {/* Current Plan Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Current Plan</CardTitle>\n                  <CardDescription>\n                    Manage your subscription and billing details.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <div className=\"font-medium\">Pro Plan</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        $29/month • Next billing date: Feb 15, 2024\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button \n                        variant=\"outline\"\n                        onClick={() => toast({\n                          title: \"Plan Change\",\n                          description: \"Plan change initiated!\",\n                          variant: \"default\"\n                        })}\n                      >\n                        Change Plan\n                      </Button>\n                      <Button \n                        variant=\"outline\"\n                        onClick={() => toast({\n                          title: \"Cancellation\",\n                          description: \"Subscription cancellation processed!\",\n                          variant: \"destructive\"\n                        })}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Payment Methods Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Payment Methods</CardTitle>\n                  <CardDescription>\n                    Manage your payment methods and billing information.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <CreditCard className=\"h-6 w-6\" />\n                      <div>\n                        <div className=\"font-medium\">•••• •••• •••• 4242</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Expires 12/2025\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Badge variant=\"secondary\">Default</Badge>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => toast({\n                          title: \"Payment Method\",\n                          description: \"Payment method edit initiated!\",\n                          variant: \"default\"\n                        })}\n                      >\n                        Edit\n                      </Button>\n                    </div>\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => toast({\n                      title: \"Payment Method\",\n                      description: \"Add payment method initiated!\",\n                      variant: \"default\"\n                    })}\n                  >\n                    Add Payment Method\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* API Tab */}\n          <TabsContent value=\"api\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>API Keys</CardTitle>\n                <CardDescription>\n                  Manage API keys for accessing our services programmatically.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* API Keys List */}\n                <div className=\"space-y-3\">\n                  {apiKeys.map((apiKey) => (\n                    <div key={apiKey.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <Key className=\"h-5 w-5\" />\n                        <div>\n                          <div className=\"font-medium\">{apiKey.name}</div>\n                          <div className=\"text-sm text-muted-foreground font-mono\">\n                            {apiKey.type === 'production' && showApiKey ? apiKey.key : \\`\\${apiKey.key.substring(0, 12)}...\\`}\n                            {apiKey.type === 'development' && \\`\\${apiKey.key.substring(0, 12)}...\\`}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        {apiKey.type === 'production' && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setShowApiKey(!showApiKey)}\n                          >\n                            {showApiKey ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </Button>\n                        )}\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => deleteApiKey(apiKey.id)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <Button onClick={generateApiKey}>Generate New Key</Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n      \n      {/* Toast Notifications */}\n      <Toaster toasts={toasts} dismiss={dismiss} />\n    </>\n  );\n};\n\nexport default Settings;`\n\nconst Settings: React.FC = () => {\n  // Custom toast functionality\n  const { toasts, toast, dismiss } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Profile State Management\n  const [profileData, setProfileData] = useState<ProfileData>({\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'john@example.com',\n    company: 'Acme Inc.',\n    bio: 'Software engineer passionate about building great user experiences.',\n    timezone: 'utc-5',\n    avatar: '/avatars/01.png'\n  });\n\n  // Notification Settings State\n  const [notifications, setNotifications] = useState<NotificationSettings>({\n    marketing: false,\n    security: true,\n    payments: true,\n    realTime: true,\n    weeklyReports: false\n  });\n\n  // Security Settings State\n  const [passwords, setPasswords] = useState<PasswordData>({\n    current: '',\n    new: '',\n    confirm: ''\n  });\n\n  // API Management State\n  const [showApiKey, setShowApiKey] = useState<boolean>(false);\n  const [apiKeys, setApiKeys] = useState<ApiKey[]>([\n    { id: 1, name: 'Production API Key', key: 'rk_live_51H7vX2eZvKYlo2C...', type: 'production' },\n    { id: 2, name: 'Development API Key', key: 'rk_test_4eC39HqLyjWDarjtT1zdp7dc', type: 'development' }\n  ]);\n\n  // Active Sessions State\n  const [sessions, setSessions] = useState<Session[]>([\n    { id: 1, name: 'Current Session', device: 'Chrome on MacOS', location: 'San Francisco, CA', active: true },\n    { id: 2, name: 'iPhone', device: 'Mobile App', location: 'Last seen 2 hours ago', active: false }\n  ]);\n\n  // Handle Profile Updates\n  const handleProfileUpdate = (field: keyof ProfileData, value: string): void => {\n    setProfileData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const saveProfile = (): void => {\n    toast({\n      title: \"Success\",\n      description: \"Profile updated successfully!\",\n      variant: \"default\"\n    });\n  };\n\n  // Handle Avatar Upload\n  const handleAvatarUpload = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.size > 1024 * 1024) { // 1MB limit\n        toast({\n          title: \"Error\",\n          description: \"File size must be less than 1MB\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      \n      const reader = new FileReader();\n      reader.onload = (e: ProgressEvent<FileReader>) => {\n        const result = e.target?.result as string;\n        if (result) {\n          setProfileData(prev => ({ ...prev, avatar: result }));\n          toast({\n            title: \"Success\",\n            description: \"Avatar uploaded successfully!\",\n            variant: \"default\"\n          });\n        }\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Handle Notification Updates\n  const handleNotificationChange = (key: keyof NotificationSettings, value: boolean): void => {\n    setNotifications(prev => ({ ...prev, [key]: value }));\n    toast({\n      title: \"Success\",\n      description: \"Notification preferences updated!\",\n      variant: \"default\"\n    });\n  };\n\n  // Handle Password Update\n  const updatePassword = (): void => {\n    if (!passwords.current || !passwords.new || !passwords.confirm) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all password fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (passwords.new !== passwords.confirm) {\n      toast({\n        title: \"Error\",\n        description: \"New passwords don't match\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (passwords.new.length < 8) {\n      toast({\n        title: \"Error\",\n        description: \"Password must be at least 8 characters\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setPasswords({ current: '', new: '', confirm: '' });\n    toast({\n      title: \"Success\",\n      description: \"Password updated successfully!\",\n      variant: \"default\"\n    });\n  };\n\n  // Handle Session Revoke\n  const revokeSession = (sessionId: number): void => {\n    setSessions(prev => prev.filter(session => session.id !== sessionId));\n    toast({\n      title: \"Success\",\n      description: \"Session revoked successfully!\",\n      variant: \"default\"\n    });\n  };\n\n  // Handle API Key Actions\n  const generateApiKey = (): void => {\n    const newKey: ApiKey = {\n      id: apiKeys.length + 1,\n      name: `API Key ${apiKeys.length + 1}`,\n      key: `rk_${Math.random().toString(36).substring(2, 15)}`,\n      type: 'development'\n    };\n    setApiKeys(prev => [...prev, newKey]);\n    toast({\n      title: \"Success\",\n      description: \"New API key generated!\",\n      variant: \"default\"\n    });\n  };\n\n  const deleteApiKey = (keyId: number): void => {\n    setApiKeys(prev => prev.filter(key => key.id !== keyId));\n    toast({\n      title: \"Success\",\n      description: \"API key deleted successfully!\",\n      variant: \"default\"\n    });\n  };\n\n  return (\n    <>\n      <div className=\"space-y-6 p-6\">\n        {/* Page Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Settings</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Manage your account settings and preferences.\n            </p>\n          </div>\n          <V0Button \n            prompt=\"just render the ui as it is of this page , dont make any changes, just as it is\"\n            code={SETTINGS_CODE}\n          />\n        </div>\n\n        {/* Settings Tabs */}\n        <Tabs defaultValue=\"profile\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n            <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n            <TabsTrigger value=\"security\">Security</TabsTrigger>\n            <TabsTrigger value=\"billing\">Billing</TabsTrigger>\n            <TabsTrigger value=\"api\">API</TabsTrigger>\n          </TabsList>\n\n          {/* Profile Tab */}\n          <TabsContent value=\"profile\" className=\"space-y-4\">\n            <div className=\"grid gap-4 md:grid-cols-3\">\n              <Card className=\"md:col-span-2\">\n                <CardHeader>\n                  <CardTitle>Profile Information</CardTitle>\n                  <CardDescription>\n                    Update your profile information and how others see you.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Avatar Upload Section */}\n                  <div className=\"flex items-center gap-4\">\n                    <Avatar className=\"h-20 w-20\">\n                      <AvatarImage src={profileData.avatar} />\n                      <AvatarFallback>\n                        {profileData.firstName[0]}{profileData.lastName[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <input\n                        type=\"file\"\n                        ref={fileInputRef}\n                        onChange={handleAvatarUpload}\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                      />\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => fileInputRef.current?.click()}\n                      >\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        Upload Photo\n                      </Button>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        JPG, GIF or PNG. 1MB Max.\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Profile Form Fields */}\n                  <div className=\"grid gap-4 md:grid-cols-2\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input \n                        id=\"firstName\" \n                        value={profileData.firstName}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('firstName', e.target.value)}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input \n                        id=\"lastName\" \n                        value={profileData.lastName}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('lastName', e.target.value)}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input \n                      id=\"email\" \n                      type=\"email\" \n                      value={profileData.email}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('email', e.target.value)}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company\">Company</Label>\n                    <Input \n                      id=\"company\" \n                      value={profileData.company}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('company', e.target.value)}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"bio\">Bio</Label>\n                    <Textarea\n                      id=\"bio\"\n                      placeholder=\"Tell us about yourself...\"\n                      value={profileData.bio}\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleProfileUpdate('bio', e.target.value)}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"timezone\">Timezone</Label>\n                    <Select \n                      value={profileData.timezone} \n                      onValueChange={(value: string) => handleProfileUpdate('timezone', value)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"utc-8\">Pacific Standard Time (UTC-8)</SelectItem>\n                        <SelectItem value=\"utc-7\">Mountain Standard Time (UTC-7)</SelectItem>\n                        <SelectItem value=\"utc-6\">Central Standard Time (UTC-6)</SelectItem>\n                        <SelectItem value=\"utc-5\">Eastern Standard Time (UTC-5)</SelectItem>\n                        <SelectItem value=\"utc+0\">Greenwich Mean Time (UTC+0)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"flex justify-end\">\n                    <Button onClick={saveProfile}>Save Changes</Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Account Status Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Account Status</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Plan</span>\n                    <Badge>Pro</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Status</span>\n                    <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                      Active\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Member since</span>\n                    <span className=\"text-sm text-muted-foreground\">Jan 2024</span>\n                  </div>\n                  <Separator />\n                  <Button variant=\"outline\" className=\"w-full\">\n                    Upgrade Plan\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Notifications Tab */}\n          <TabsContent value=\"notifications\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Notification Preferences</CardTitle>\n                <CardDescription>\n                  Choose what notifications you want to receive and how.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Email Notifications Section */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-sm font-medium\">Email Notifications</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <div className=\"text-sm font-medium\">Marketing emails</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Receive emails about new products and features\n                        </div>\n                      </div>\n                      <Switch \n                        checked={notifications.marketing}\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('marketing', checked)}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <div className=\"text-sm font-medium\">Security alerts</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Get notified about account security events\n                        </div>\n                      </div>\n                      <Switch \n                        checked={notifications.security}\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('security', checked)}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <div className=\"text-sm font-medium\">Payment notifications</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Alerts about billing and payments\n                        </div>\n                      </div>\n                      <Switch \n                        checked={notifications.payments}\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('payments', checked)}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Push Notifications Section */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-sm font-medium\">Push Notifications</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <div className=\"text-sm font-medium\">Real-time updates</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Get instant notifications for important events\n                        </div>\n                      </div>\n                      <Switch \n                        checked={notifications.realTime}\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('realTime', checked)}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <div className=\"text-sm font-medium\">Weekly reports</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Summary of your account activity\n                        </div>\n                      </div>\n                      <Switch \n                        checked={notifications.weeklyReports}\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('weeklyReports', checked)}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Security Tab */}\n          <TabsContent value=\"security\" className=\"space-y-4\">\n            <div className=\"grid gap-4\">\n              {/* Password Change Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Password</CardTitle>\n                  <CardDescription>\n                    Change your password to keep your account secure.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currentPassword\">Current Password</Label>\n                    <Input \n                      id=\"currentPassword\" \n                      type=\"password\" \n                      value={passwords.current}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPasswords(prev => ({ ...prev, current: e.target.value }))}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"newPassword\">New Password</Label>\n                    <Input \n                      id=\"newPassword\" \n                      type=\"password\" \n                      value={passwords.new}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPasswords(prev => ({ ...prev, new: e.target.value }))}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                    <Input \n                      id=\"confirmPassword\" \n                      type=\"password\" \n                      value={passwords.confirm}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPasswords(prev => ({ ...prev, confirm: e.target.value }))}\n                    />\n                  </div>\n                  <Button onClick={updatePassword}>Update Password</Button>\n                </CardContent>\n              </Card>\n\n              {/* Two-Factor Authentication Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Two-Factor Authentication</CardTitle>\n                  <CardDescription>\n                    Add an extra layer of security to your account.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"font-medium\">Authenticator App</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Use an authenticator app to generate codes\n                      </div>\n                    </div>\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => toast({\n                        title: \"2FA Setup\",\n                        description: \"Two-factor authentication setup started!\",\n                        variant: \"default\"\n                      })}\n                    >\n                      Setup\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Active Sessions Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Active Sessions</CardTitle>\n                  <CardDescription>\n                    Manage your active sessions across devices.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {sessions.map((session) => (\n                    <div key={session.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div>\n                        <div className=\"font-medium\">{session.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {session.device} • {session.location}\n                        </div>\n                      </div>\n                      {session.active ? (\n                        <Badge variant=\"secondary\">Active</Badge>\n                      ) : (\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => revokeSession(session.id)}\n                        >\n                          Revoke\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Billing Tab */}\n          <TabsContent value=\"billing\" className=\"space-y-4\">\n            <div className=\"grid gap-4\">\n              {/* Current Plan Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Current Plan</CardTitle>\n                  <CardDescription>\n                    Manage your subscription and billing details.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <div className=\"font-medium\">Pro Plan</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        $29/month • Next billing date: Feb 15, 2024\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button \n                        variant=\"outline\"\n                        onClick={() => toast({\n                          title: \"Plan Change\",\n                          description: \"Plan change initiated!\",\n                          variant: \"default\"\n                        })}\n                      >\n                        Change Plan\n                      </Button>\n                      <Button \n                        variant=\"outline\"\n                        onClick={() => toast({\n                          title: \"Cancellation\",\n                          description: \"Subscription cancellation processed!\",\n                          variant: \"destructive\"\n                        })}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Payment Methods Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Payment Methods</CardTitle>\n                  <CardDescription>\n                    Manage your payment methods and billing information.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <CreditCard className=\"h-6 w-6\" />\n                      <div>\n                        <div className=\"font-medium\">•••• •••• •••• 4242</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Expires 12/2025\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Badge variant=\"secondary\">Default</Badge>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => toast({\n                          title: \"Payment Method\",\n                          description: \"Payment method edit initiated!\",\n                          variant: \"default\"\n                        })}\n                      >\n                        Edit\n                      </Button>\n                    </div>\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => toast({\n                      title: \"Payment Method\",\n                      description: \"Add payment method initiated!\",\n                      variant: \"default\"\n                    })}\n                  >\n                    Add Payment Method\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* API Tab */}\n          <TabsContent value=\"api\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>API Keys</CardTitle>\n                <CardDescription>\n                  Manage API keys for accessing our services programmatically.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* API Keys List */}\n                <div className=\"space-y-3\">\n                  {apiKeys.map((apiKey) => (\n                    <div key={apiKey.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <Key className=\"h-5 w-5\" />\n                        <div>\n                          <div className=\"font-medium\">{apiKey.name}</div>\n                          <div className=\"text-sm text-muted-foreground font-mono\">\n                            {apiKey.type === 'production' && showApiKey ? apiKey.key : `${apiKey.key.substring(0, 12)}...`}\n                            {apiKey.type === 'development' && `${apiKey.key.substring(0, 12)}...`}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        {apiKey.type === 'production' && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setShowApiKey(!showApiKey)}\n                          >\n                            {showApiKey ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </Button>\n                        )}\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => deleteApiKey(apiKey.id)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <Button onClick={generateApiKey}>Generate New Key</Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n      \n      {/* Toast Notifications */}\n      <Toaster toasts={toasts} dismiss={dismiss} />\n    </>\n  );\n};\n\nexport default Settings;",
      "type": "registry:page",
      "target": "app/settings/page.tsx"
    }
  ],
  "dependencies": [],
  "devDependencies": [],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {}
      }
    }
  },
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "categories": [
    "pages"
  ]
}
{
  "name": "settings",
  "type": "page",
  "files": [
    {
      "name": "page.tsx",
      "content": "\"use client\"\r\nimport React, { useState, useRef } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { V0Button } from '@/components/v0-button';\r\nimport { \r\n  User, \r\n  Bell, \r\n  Shield, \r\n  CreditCard, \r\n  Key, \r\n  Upload,\r\n  Trash2,\r\n  Eye,\r\n  EyeOff,\r\n  Check,\r\n  X\r\n} from 'lucide-react';\r\n\r\n// Type definitions for better code maintainability\r\ninterface ToastType {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  variant: \"default\" | \"destructive\";\r\n  open: boolean;\r\n}\r\n\r\ninterface ProfileData {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  company: string;\r\n  bio: string;\r\n  timezone: string;\r\n  avatar: string;\r\n}\r\n\r\ninterface NotificationSettings {\r\n  marketing: boolean;\r\n  security: boolean;\r\n  payments: boolean;\r\n  realTime: boolean;\r\n  weeklyReports: boolean;\r\n}\r\n\r\ninterface PasswordData {\r\n  current: string;\r\n  new: string;\r\n  confirm: string;\r\n}\r\n\r\ninterface ApiKey {\r\n  id: number;\r\n  name: string;\r\n  key: string;\r\n  type: 'production' | 'development';\r\n}\r\n\r\ninterface Session {\r\n  id: number;\r\n  name: string;\r\n  device: string;\r\n  location: string;\r\n  active: boolean;\r\n}\r\n\r\ninterface UseToastReturn {\r\n  toasts: ToastType[];\r\n  toast: (options: { title: string; description?: string; variant?: \"default\" | \"destructive\" }) => { id: string; dismiss: () => void };\r\n  dismiss: (toastId: string) => void;\r\n}\r\n\r\n// Custom toast hook implementation\r\nconst useToast = (): UseToastReturn => {\r\n  const [toasts, setToasts] = useState<ToastType[]>([]);\r\n\r\n  const toast = ({ title, description, variant = \"default\" }: { \r\n    title: string; \r\n    description?: string; \r\n    variant?: \"default\" | \"destructive\" \r\n  }) => {\r\n    const id = Date.now().toString();\r\n    const newToast: ToastType = {\r\n      id,\r\n      title,\r\n      description,\r\n      variant,\r\n      open: true\r\n    };\r\n\r\n    setToasts(prev => [...prev, newToast]);\r\n\r\n    // Auto dismiss after 3 seconds\r\n    setTimeout(() => {\r\n      setToasts(prev => prev.filter(t => t.id !== id));\r\n    }, 3000);\r\n\r\n    return {\r\n      id,\r\n      dismiss: () => setToasts(prev => prev.filter(t => t.id !== id))\r\n    };\r\n  };\r\n\r\n  const dismiss = (toastId: string) => {\r\n    setToasts(prev => prev.filter(t => t.id !== toastId));\r\n  };\r\n\r\n  return { toasts, toast, dismiss };\r\n};\r\n\r\n// Toast Component Props\r\ninterface ToasterProps {\r\n  toasts: ToastType[];\r\n  dismiss: (toastId: string) => void;\r\n}\r\n\r\n// Toast notification component\r\nconst Toaster: React.FC<ToasterProps> = ({ toasts, dismiss }) => {\r\n  return (\r\n    <div className=\"fixed top-4 right-4 z-50 flex flex-col space-y-2 max-w-sm\">\r\n      {toasts.map((toast) => (\r\n        <div\r\n          key={toast.id}\r\n          className={`flex items-center justify-between space-x-4 overflow-hidden rounded-md border p-4 shadow-lg transition-all animate-in slide-in-from-top-2 ${\r\n            toast.variant === \"destructive\"\r\n              ? \"border-red-200 bg-red-50 text-red-900\"\r\n              : \"border-green-200 bg-green-50 text-green-900\"\r\n          }`}\r\n        >\r\n          <div className=\"flex items-center space-x-2\">\r\n            {toast.variant === \"destructive\" ? (\r\n              <X className=\"h-4 w-4 text-red-500\" />\r\n            ) : (\r\n              <Check className=\"h-4 w-4 text-green-500\" />\r\n            )}\r\n            <div>\r\n              {toast.title && <div className=\"text-sm font-semibold\">{toast.title}</div>}\r\n              {toast.description && <div className=\"text-sm\">{toast.description}</div>}\r\n            </div>\r\n          </div>\r\n          <Button\r\n            size=\"sm\"\r\n            variant=\"ghost\"\r\n            className=\"h-6 w-6 p-0\"\r\n            onClick={() => dismiss(toast.id)}\r\n          >\r\n            <X className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Complete code string for V0 button - includes the entire component\r\nconst SETTINGS_CODE = `\"use client\"\r\nimport React, { useState, useRef } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { V0Button } from '@/components/v0-button';\r\nimport { \r\n  User, \r\n  Bell, \r\n  Shield, \r\n  CreditCard, \r\n  Key, \r\n  Upload,\r\n  Trash2,\r\n  Eye,\r\n  EyeOff,\r\n  Check,\r\n  X\r\n} from 'lucide-react';\r\n\r\n// Type definitions for better code maintainability\r\ninterface ToastType {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  variant: \"default\" | \"destructive\";\r\n  open: boolean;\r\n}\r\n\r\ninterface ProfileData {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  company: string;\r\n  bio: string;\r\n  timezone: string;\r\n  avatar: string;\r\n}\r\n\r\ninterface NotificationSettings {\r\n  marketing: boolean;\r\n  security: boolean;\r\n  payments: boolean;\r\n  realTime: boolean;\r\n  weeklyReports: boolean;\r\n}\r\n\r\ninterface PasswordData {\r\n  current: string;\r\n  new: string;\r\n  confirm: string;\r\n}\r\n\r\ninterface ApiKey {\r\n  id: number;\r\n  name: string;\r\n  key: string;\r\n  type: 'production' | 'development';\r\n}\r\n\r\ninterface Session {\r\n  id: number;\r\n  name: string;\r\n  device: string;\r\n  location: string;\r\n  active: boolean;\r\n}\r\n\r\ninterface UseToastReturn {\r\n  toasts: ToastType[];\r\n  toast: (options: { title: string; description?: string; variant?: \"default\" | \"destructive\" }) => { id: string; dismiss: () => void };\r\n  dismiss: (toastId: string) => void;\r\n}\r\n\r\n// Custom toast hook implementation\r\nconst useToast = (): UseToastReturn => {\r\n  const [toasts, setToasts] = useState<ToastType[]>([]);\r\n\r\n  const toast = ({ title, description, variant = \"default\" }: { \r\n    title: string; \r\n    description?: string; \r\n    variant?: \"default\" | \"destructive\" \r\n  }) => {\r\n    const id = Date.now().toString();\r\n    const newToast: ToastType = {\r\n      id,\r\n      title,\r\n      description,\r\n      variant,\r\n      open: true\r\n    };\r\n\r\n    setToasts(prev => [...prev, newToast]);\r\n\r\n    // Auto dismiss after 3 seconds\r\n    setTimeout(() => {\r\n      setToasts(prev => prev.filter(t => t.id !== id));\r\n    }, 3000);\r\n\r\n    return {\r\n      id,\r\n      dismiss: () => setToasts(prev => prev.filter(t => t.id !== id))\r\n    };\r\n  };\r\n\r\n  const dismiss = (toastId: string) => {\r\n    setToasts(prev => prev.filter(t => t.id !== toastId));\r\n  };\r\n\r\n  return { toasts, toast, dismiss };\r\n};\r\n\r\n// Toast Component Props\r\ninterface ToasterProps {\r\n  toasts: ToastType[];\r\n  dismiss: (toastId: string) => void;\r\n}\r\n\r\n// Toast notification component\r\nconst Toaster: React.FC<ToasterProps> = ({ toasts, dismiss }) => {\r\n  return (\r\n    <div className=\"fixed top-4 right-4 z-50 flex flex-col space-y-2 max-w-sm\">\r\n      {toasts.map((toast) => (\r\n        <div\r\n          key={toast.id}\r\n          className={\\`flex items-center justify-between space-x-4 overflow-hidden rounded-md border p-4 shadow-lg transition-all animate-in slide-in-from-top-2 \\${\r\n            toast.variant === \"destructive\"\r\n              ? \"border-red-200 bg-red-50 text-red-900\"\r\n              : \"border-green-200 bg-green-50 text-green-900\"\r\n          }\\`}\r\n        >\r\n          <div className=\"flex items-center space-x-2\">\r\n            {toast.variant === \"destructive\" ? (\r\n              <X className=\"h-4 w-4 text-red-500\" />\r\n            ) : (\r\n              <Check className=\"h-4 w-4 text-green-500\" />\r\n            )}\r\n            <div>\r\n              {toast.title && <div className=\"text-sm font-semibold\">{toast.title}</div>}\r\n              {toast.description && <div className=\"text-sm\">{toast.description}</div>}\r\n            </div>\r\n          </div>\r\n          <Button\r\n            size=\"sm\"\r\n            variant=\"ghost\"\r\n            className=\"h-6 w-6 p-0\"\r\n            onClick={() => dismiss(toast.id)}\r\n          >\r\n            <X className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Settings: React.FC = () => {\r\n  // Custom toast functionality\r\n  const { toasts, toast, dismiss } = useToast();\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // Profile State Management\r\n  const [profileData, setProfileData] = useState<ProfileData>({\r\n    firstName: 'John',\r\n    lastName: 'Doe',\r\n    email: 'john@example.com',\r\n    company: 'Acme Inc.',\r\n    bio: 'Software engineer passionate about building great user experiences.',\r\n    timezone: 'utc-5',\r\n    avatar: '/avatars/01.png'\r\n  });\r\n\r\n  // Notification Settings State\r\n  const [notifications, setNotifications] = useState<NotificationSettings>({\r\n    marketing: false,\r\n    security: true,\r\n    payments: true,\r\n    realTime: true,\r\n    weeklyReports: false\r\n  });\r\n\r\n  // Security Settings State\r\n  const [passwords, setPasswords] = useState<PasswordData>({\r\n    current: '',\r\n    new: '',\r\n    confirm: ''\r\n  });\r\n\r\n  // API Management State\r\n  const [showApiKey, setShowApiKey] = useState<boolean>(false);\r\n  const [apiKeys, setApiKeys] = useState<ApiKey[]>([\r\n    { id: 1, name: 'Production API Key', key: 'rk_live_51H7vX2eZvKYlo2C...', type: 'production' },\r\n    { id: 2, name: 'Development API Key', key: 'rk_test_4eC39HqLyjWDarjtT1zdp7dc', type: 'development' }\r\n  ]);\r\n\r\n  // Active Sessions State\r\n  const [sessions, setSessions] = useState<Session[]>([\r\n    { id: 1, name: 'Current Session', device: 'Chrome on MacOS', location: 'San Francisco, CA', active: true },\r\n    { id: 2, name: 'iPhone', device: 'Mobile App', location: 'Last seen 2 hours ago', active: false }\r\n  ]);\r\n\r\n  // Handle Profile Updates\r\n  const handleProfileUpdate = (field: keyof ProfileData, value: string): void => {\r\n    setProfileData(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  const saveProfile = (): void => {\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"Profile updated successfully!\",\r\n      variant: \"default\"\r\n    });\r\n  };\r\n\r\n  // Handle Avatar Upload\r\n  const handleAvatarUpload = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const file = event.target.files?.[0];\r\n    if (file) {\r\n      if (file.size > 1024 * 1024) { // 1MB limit\r\n        toast({\r\n          title: \"Error\",\r\n          description: \"File size must be less than 1MB\",\r\n          variant: \"destructive\"\r\n        });\r\n        return;\r\n      }\r\n      \r\n      const reader = new FileReader();\r\n      reader.onload = (e: ProgressEvent<FileReader>) => {\r\n        const result = e.target?.result as string;\r\n        if (result) {\r\n          setProfileData(prev => ({ ...prev, avatar: result }));\r\n          toast({\r\n            title: \"Success\",\r\n            description: \"Avatar uploaded successfully!\",\r\n            variant: \"default\"\r\n          });\r\n        }\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  // Handle Notification Updates\r\n  const handleNotificationChange = (key: keyof NotificationSettings, value: boolean): void => {\r\n    setNotifications(prev => ({ ...prev, [key]: value }));\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"Notification preferences updated!\",\r\n      variant: \"default\"\r\n    });\r\n  };\r\n\r\n  // Handle Password Update\r\n  const updatePassword = (): void => {\r\n    if (!passwords.current || !passwords.new || !passwords.confirm) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Please fill in all password fields\",\r\n        variant: \"destructive\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (passwords.new !== passwords.confirm) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"New passwords don't match\",\r\n        variant: \"destructive\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (passwords.new.length < 8) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Password must be at least 8 characters\",\r\n        variant: \"destructive\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    setPasswords({ current: '', new: '', confirm: '' });\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"Password updated successfully!\",\r\n      variant: \"default\"\r\n    });\r\n  };\r\n\r\n  // Handle Session Revoke\r\n  const revokeSession = (sessionId: number): void => {\r\n    setSessions(prev => prev.filter(session => session.id !== sessionId));\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"Session revoked successfully!\",\r\n      variant: \"default\"\r\n    });\r\n  };\r\n\r\n  // Handle API Key Actions\r\n  const generateApiKey = (): void => {\r\n    const newKey: ApiKey = {\r\n      id: apiKeys.length + 1,\r\n      name: \\`API Key \\${apiKeys.length + 1}\\`,\r\n      key: \\`rk_\\${Math.random().toString(36).substring(2, 15)}\\`,\r\n      type: 'development'\r\n    };\r\n    setApiKeys(prev => [...prev, newKey]);\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"New API key generated!\",\r\n      variant: \"default\"\r\n    });\r\n  };\r\n\r\n  const deleteApiKey = (keyId: number): void => {\r\n    setApiKeys(prev => prev.filter(key => key.id !== keyId));\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"API key deleted successfully!\",\r\n      variant: \"default\"\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"space-y-6 p-6\">\r\n        {/* Page Header */}\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold tracking-tight\">Settings</h1>\r\n            <p className=\"text-muted-foreground mt-1\">\r\n              Manage your account settings and preferences.\r\n            </p>\r\n          </div>\r\n          <V0Button \r\n            prompt=\"just render the ui as it is of this page , dont make any changes, just as it is\"\r\n            code={SETTINGS_CODE}\r\n          />\r\n        </div>\r\n\r\n        {/* Settings Tabs */}\r\n        <Tabs defaultValue=\"profile\" className=\"space-y-4\">\r\n          <TabsList className=\"grid w-full grid-cols-5\">\r\n            <TabsTrigger value=\"profile\">Profile</TabsTrigger>\r\n            <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\r\n            <TabsTrigger value=\"security\">Security</TabsTrigger>\r\n            <TabsTrigger value=\"billing\">Billing</TabsTrigger>\r\n            <TabsTrigger value=\"api\">API</TabsTrigger>\r\n          </TabsList>\r\n\r\n          {/* Profile Tab */}\r\n          <TabsContent value=\"profile\" className=\"space-y-4\">\r\n            <div className=\"grid gap-4 md:grid-cols-3\">\r\n              <Card className=\"md:col-span-2\">\r\n                <CardHeader>\r\n                  <CardTitle>Profile Information</CardTitle>\r\n                  <CardDescription>\r\n                    Update your profile information and how others see you.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  {/* Avatar Upload Section */}\r\n                  <div className=\"flex items-center gap-4\">\r\n                    <Avatar className=\"h-20 w-20\">\r\n                      <AvatarImage src={profileData.avatar} />\r\n                      <AvatarFallback>\r\n                        {profileData.firstName[0]}{profileData.lastName[0]}\r\n                      </AvatarFallback>\r\n                    </Avatar>\r\n                    <div>\r\n                      <input\r\n                        type=\"file\"\r\n                        ref={fileInputRef}\r\n                        onChange={handleAvatarUpload}\r\n                        accept=\"image/*\"\r\n                        className=\"hidden\"\r\n                      />\r\n                      <Button \r\n                        variant=\"outline\" \r\n                        size=\"sm\"\r\n                        onClick={() => fileInputRef.current?.click()}\r\n                      >\r\n                        <Upload className=\"h-4 w-4 mr-2\" />\r\n                        Upload Photo\r\n                      </Button>\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        JPG, GIF or PNG. 1MB Max.\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Profile Form Fields */}\r\n                  <div className=\"grid gap-4 md:grid-cols-2\">\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"firstName\">First Name</Label>\r\n                      <Input \r\n                        id=\"firstName\" \r\n                        value={profileData.firstName}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('firstName', e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"lastName\">Last Name</Label>\r\n                      <Input \r\n                        id=\"lastName\" \r\n                        value={profileData.lastName}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('lastName', e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"email\">Email</Label>\r\n                    <Input \r\n                      id=\"email\" \r\n                      type=\"email\" \r\n                      value={profileData.email}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('email', e.target.value)}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"company\">Company</Label>\r\n                    <Input \r\n                      id=\"company\" \r\n                      value={profileData.company}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('company', e.target.value)}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"bio\">Bio</Label>\r\n                    <Textarea\r\n                      id=\"bio\"\r\n                      placeholder=\"Tell us about yourself...\"\r\n                      value={profileData.bio}\r\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleProfileUpdate('bio', e.target.value)}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"timezone\">Timezone</Label>\r\n                    <Select \r\n                      value={profileData.timezone} \r\n                      onValueChange={(value: string) => handleProfileUpdate('timezone', value)}\r\n                    >\r\n                      <SelectTrigger>\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"utc-8\">Pacific Standard Time (UTC-8)</SelectItem>\r\n                        <SelectItem value=\"utc-7\">Mountain Standard Time (UTC-7)</SelectItem>\r\n                        <SelectItem value=\"utc-6\">Central Standard Time (UTC-6)</SelectItem>\r\n                        <SelectItem value=\"utc-5\">Eastern Standard Time (UTC-5)</SelectItem>\r\n                        <SelectItem value=\"utc+0\">Greenwich Mean Time (UTC+0)</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n\r\n                  <div className=\"flex justify-end\">\r\n                    <Button onClick={saveProfile}>Save Changes</Button>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Account Status Card */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Account Status</CardTitle>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-sm\">Plan</span>\r\n                    <Badge>Pro</Badge>\r\n                  </div>\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-sm\">Status</span>\r\n                    <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\r\n                      Active\r\n                    </Badge>\r\n                  </div>\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-sm\">Member since</span>\r\n                    <span className=\"text-sm text-muted-foreground\">Jan 2024</span>\r\n                  </div>\r\n                  <Separator />\r\n                  <Button variant=\"outline\" className=\"w-full\">\r\n                    Upgrade Plan\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          {/* Notifications Tab */}\r\n          <TabsContent value=\"notifications\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Notification Preferences</CardTitle>\r\n                <CardDescription>\r\n                  Choose what notifications you want to receive and how.\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-6\">\r\n                {/* Email Notifications Section */}\r\n                <div className=\"space-y-4\">\r\n                  <h4 className=\"text-sm font-medium\">Email Notifications</h4>\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"space-y-0.5\">\r\n                        <div className=\"text-sm font-medium\">Marketing emails</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          Receive emails about new products and features\r\n                        </div>\r\n                      </div>\r\n                      <Switch \r\n                        checked={notifications.marketing}\r\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('marketing', checked)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"space-y-0.5\">\r\n                        <div className=\"text-sm font-medium\">Security alerts</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          Get notified about account security events\r\n                        </div>\r\n                      </div>\r\n                      <Switch \r\n                        checked={notifications.security}\r\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('security', checked)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"space-y-0.5\">\r\n                        <div className=\"text-sm font-medium\">Payment notifications</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          Alerts about billing and payments\r\n                        </div>\r\n                      </div>\r\n                      <Switch \r\n                        checked={notifications.payments}\r\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('payments', checked)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <Separator />\r\n\r\n                {/* Push Notifications Section */}\r\n                <div className=\"space-y-4\">\r\n                  <h4 className=\"text-sm font-medium\">Push Notifications</h4>\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"space-y-0.5\">\r\n                        <div className=\"text-sm font-medium\">Real-time updates</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          Get instant notifications for important events\r\n                        </div>\r\n                      </div>\r\n                      <Switch \r\n                        checked={notifications.realTime}\r\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('realTime', checked)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"space-y-0.5\">\r\n                        <div className=\"text-sm font-medium\">Weekly reports</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          Summary of your account activity\r\n                        </div>\r\n                      </div>\r\n                      <Switch \r\n                        checked={notifications.weeklyReports}\r\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('weeklyReports', checked)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          {/* Security Tab */}\r\n          <TabsContent value=\"security\" className=\"space-y-4\">\r\n            <div className=\"grid gap-4\">\r\n              {/* Password Change Card */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Password</CardTitle>\r\n                  <CardDescription>\r\n                    Change your password to keep your account secure.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"currentPassword\">Current Password</Label>\r\n                    <Input \r\n                      id=\"currentPassword\" \r\n                      type=\"password\" \r\n                      value={passwords.current}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPasswords(prev => ({ ...prev, current: e.target.value }))}\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"newPassword\">New Password</Label>\r\n                    <Input \r\n                      id=\"newPassword\" \r\n                      type=\"password\" \r\n                      value={passwords.new}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPasswords(prev => ({ ...prev, new: e.target.value }))}\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\r\n                    <Input \r\n                      id=\"confirmPassword\" \r\n                      type=\"password\" \r\n                      value={passwords.confirm}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPasswords(prev => ({ ...prev, confirm: e.target.value }))}\r\n                    />\r\n                  </div>\r\n                  <Button onClick={updatePassword}>Update Password</Button>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Two-Factor Authentication Card */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Two-Factor Authentication</CardTitle>\r\n                  <CardDescription>\r\n                    Add an extra layer of security to your account.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                      <div className=\"font-medium\">Authenticator App</div>\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        Use an authenticator app to generate codes\r\n                      </div>\r\n                    </div>\r\n                    <Button \r\n                      variant=\"outline\"\r\n                      onClick={() => toast({\r\n                        title: \"2FA Setup\",\r\n                        description: \"Two-factor authentication setup started!\",\r\n                        variant: \"default\"\r\n                      })}\r\n                    >\r\n                      Setup\r\n                    </Button>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Active Sessions Card */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Active Sessions</CardTitle>\r\n                  <CardDescription>\r\n                    Manage your active sessions across devices.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  {sessions.map((session) => (\r\n                    <div key={session.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                      <div>\r\n                        <div className=\"font-medium\">{session.name}</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          {session.device} • {session.location}\r\n                        </div>\r\n                      </div>\r\n                      {session.active ? (\r\n                        <Badge variant=\"secondary\">Active</Badge>\r\n                      ) : (\r\n                        <Button \r\n                          variant=\"outline\" \r\n                          size=\"sm\"\r\n                          onClick={() => revokeSession(session.id)}\r\n                        >\r\n                          Revoke\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          {/* Billing Tab */}\r\n          <TabsContent value=\"billing\" className=\"space-y-4\">\r\n            <div className=\"grid gap-4\">\r\n              {/* Current Plan Card */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Current Plan</CardTitle>\r\n                  <CardDescription>\r\n                    Manage your subscription and billing details.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                    <div>\r\n                      <div className=\"font-medium\">Pro Plan</div>\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        $29/month • Next billing date: Feb 15, 2024\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex gap-2\">\r\n                      <Button \r\n                        variant=\"outline\"\r\n                        onClick={() => toast({\r\n                          title: \"Plan Change\",\r\n                          description: \"Plan change initiated!\",\r\n                          variant: \"default\"\r\n                        })}\r\n                      >\r\n                        Change Plan\r\n                      </Button>\r\n                      <Button \r\n                        variant=\"outline\"\r\n                        onClick={() => toast({\r\n                          title: \"Cancellation\",\r\n                          description: \"Subscription cancellation processed!\",\r\n                          variant: \"destructive\"\r\n                        })}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Payment Methods Card */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Payment Methods</CardTitle>\r\n                  <CardDescription>\r\n                    Manage your payment methods and billing information.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <CreditCard className=\"h-6 w-6\" />\r\n                      <div>\r\n                        <div className=\"font-medium\">•••• •••• •••• 4242</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          Expires 12/2025\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex gap-2\">\r\n                      <Badge variant=\"secondary\">Default</Badge>\r\n                      <Button \r\n                        variant=\"outline\" \r\n                        size=\"sm\"\r\n                        onClick={() => toast({\r\n                          title: \"Payment Method\",\r\n                          description: \"Payment method edit initiated!\",\r\n                          variant: \"default\"\r\n                        })}\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                  <Button \r\n                    variant=\"outline\" \r\n                    className=\"w-full\"\r\n                    onClick={() => toast({\r\n                      title: \"Payment Method\",\r\n                      description: \"Add payment method initiated!\",\r\n                      variant: \"default\"\r\n                    })}\r\n                  >\r\n                    Add Payment Method\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          {/* API Tab */}\r\n          <TabsContent value=\"api\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>API Keys</CardTitle>\r\n                <CardDescription>\r\n                  Manage API keys for accessing our services programmatically.\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                {/* API Keys List */}\r\n                <div className=\"space-y-3\">\r\n                  {apiKeys.map((apiKey) => (\r\n                    <div key={apiKey.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <Key className=\"h-5 w-5\" />\r\n                        <div>\r\n                          <div className=\"font-medium\">{apiKey.name}</div>\r\n                          <div className=\"text-sm text-muted-foreground font-mono\">\r\n                            {apiKey.type === 'production' && showApiKey ? apiKey.key : \\`\\${apiKey.key.substring(0, 12)}...\\`}\r\n                            {apiKey.type === 'development' && \\`\\${apiKey.key.substring(0, 12)}...\\`}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex gap-2\">\r\n                        {apiKey.type === 'production' && (\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={() => setShowApiKey(!showApiKey)}\r\n                          >\r\n                            {showApiKey ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n                          </Button>\r\n                        )}\r\n                        <Button \r\n                          variant=\"outline\" \r\n                          size=\"sm\"\r\n                          onClick={() => deleteApiKey(apiKey.id)}\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                <Button onClick={generateApiKey}>Generate New Key</Button>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n      \r\n      {/* Toast Notifications */}\r\n      <Toaster toasts={toasts} dismiss={dismiss} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Settings;`\r\n\r\nconst Settings: React.FC = () => {\r\n  // Custom toast functionality\r\n  const { toasts, toast, dismiss } = useToast();\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // Profile State Management\r\n  const [profileData, setProfileData] = useState<ProfileData>({\r\n    firstName: 'John',\r\n    lastName: 'Doe',\r\n    email: 'john@example.com',\r\n    company: 'Acme Inc.',\r\n    bio: 'Software engineer passionate about building great user experiences.',\r\n    timezone: 'utc-5',\r\n    avatar: '/avatars/01.png'\r\n  });\r\n\r\n  // Notification Settings State\r\n  const [notifications, setNotifications] = useState<NotificationSettings>({\r\n    marketing: false,\r\n    security: true,\r\n    payments: true,\r\n    realTime: true,\r\n    weeklyReports: false\r\n  });\r\n\r\n  // Security Settings State\r\n  const [passwords, setPasswords] = useState<PasswordData>({\r\n    current: '',\r\n    new: '',\r\n    confirm: ''\r\n  });\r\n\r\n  // API Management State\r\n  const [showApiKey, setShowApiKey] = useState<boolean>(false);\r\n  const [apiKeys, setApiKeys] = useState<ApiKey[]>([\r\n    { id: 1, name: 'Production API Key', key: 'rk_live_51H7vX2eZvKYlo2C...', type: 'production' },\r\n    { id: 2, name: 'Development API Key', key: 'rk_test_4eC39HqLyjWDarjtT1zdp7dc', type: 'development' }\r\n  ]);\r\n\r\n  // Active Sessions State\r\n  const [sessions, setSessions] = useState<Session[]>([\r\n    { id: 1, name: 'Current Session', device: 'Chrome on MacOS', location: 'San Francisco, CA', active: true },\r\n    { id: 2, name: 'iPhone', device: 'Mobile App', location: 'Last seen 2 hours ago', active: false }\r\n  ]);\r\n\r\n  // Handle Profile Updates\r\n  const handleProfileUpdate = (field: keyof ProfileData, value: string): void => {\r\n    setProfileData(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  const saveProfile = (): void => {\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"Profile updated successfully!\",\r\n      variant: \"default\"\r\n    });\r\n  };\r\n\r\n  // Handle Avatar Upload\r\n  const handleAvatarUpload = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const file = event.target.files?.[0];\r\n    if (file) {\r\n      if (file.size > 1024 * 1024) { // 1MB limit\r\n        toast({\r\n          title: \"Error\",\r\n          description: \"File size must be less than 1MB\",\r\n          variant: \"destructive\"\r\n        });\r\n        return;\r\n      }\r\n      \r\n      const reader = new FileReader();\r\n      reader.onload = (e: ProgressEvent<FileReader>) => {\r\n        const result = e.target?.result as string;\r\n        if (result) {\r\n          setProfileData(prev => ({ ...prev, avatar: result }));\r\n          toast({\r\n            title: \"Success\",\r\n            description: \"Avatar uploaded successfully!\",\r\n            variant: \"default\"\r\n          });\r\n        }\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  // Handle Notification Updates\r\n  const handleNotificationChange = (key: keyof NotificationSettings, value: boolean): void => {\r\n    setNotifications(prev => ({ ...prev, [key]: value }));\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"Notification preferences updated!\",\r\n      variant: \"default\"\r\n    });\r\n  };\r\n\r\n  // Handle Password Update\r\n  const updatePassword = (): void => {\r\n    if (!passwords.current || !passwords.new || !passwords.confirm) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Please fill in all password fields\",\r\n        variant: \"destructive\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (passwords.new !== passwords.confirm) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"New passwords don't match\",\r\n        variant: \"destructive\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (passwords.new.length < 8) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Password must be at least 8 characters\",\r\n        variant: \"destructive\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    setPasswords({ current: '', new: '', confirm: '' });\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"Password updated successfully!\",\r\n      variant: \"default\"\r\n    });\r\n  };\r\n\r\n  // Handle Session Revoke\r\n  const revokeSession = (sessionId: number): void => {\r\n    setSessions(prev => prev.filter(session => session.id !== sessionId));\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"Session revoked successfully!\",\r\n      variant: \"default\"\r\n    });\r\n  };\r\n\r\n  // Handle API Key Actions\r\n  const generateApiKey = (): void => {\r\n    const newKey: ApiKey = {\r\n      id: apiKeys.length + 1,\r\n      name: `API Key ${apiKeys.length + 1}`,\r\n      key: `rk_${Math.random().toString(36).substring(2, 15)}`,\r\n      type: 'development'\r\n    };\r\n    setApiKeys(prev => [...prev, newKey]);\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"New API key generated!\",\r\n      variant: \"default\"\r\n    });\r\n  };\r\n\r\n  const deleteApiKey = (keyId: number): void => {\r\n    setApiKeys(prev => prev.filter(key => key.id !== keyId));\r\n    toast({\r\n      title: \"Success\",\r\n      description: \"API key deleted successfully!\",\r\n      variant: \"default\"\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"space-y-6 p-6\">\r\n        {/* Page Header */}\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold tracking-tight\">Settings</h1>\r\n            <p className=\"text-muted-foreground mt-1\">\r\n              Manage your account settings and preferences.\r\n            </p>\r\n          </div>\r\n          <V0Button \r\n            prompt=\"just render the ui as it is of this page , dont make any changes, just as it is\"\r\n            code={SETTINGS_CODE}\r\n          />\r\n        </div>\r\n\r\n        {/* Settings Tabs */}\r\n        <Tabs defaultValue=\"profile\" className=\"space-y-4\">\r\n          <TabsList className=\"grid w-full grid-cols-5\">\r\n            <TabsTrigger value=\"profile\">Profile</TabsTrigger>\r\n            <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\r\n            <TabsTrigger value=\"security\">Security</TabsTrigger>\r\n            <TabsTrigger value=\"billing\">Billing</TabsTrigger>\r\n            <TabsTrigger value=\"api\">API</TabsTrigger>\r\n          </TabsList>\r\n\r\n          {/* Profile Tab */}\r\n          <TabsContent value=\"profile\" className=\"space-y-4\">\r\n            <div className=\"grid gap-4 md:grid-cols-3\">\r\n              <Card className=\"md:col-span-2\">\r\n                <CardHeader>\r\n                  <CardTitle>Profile Information</CardTitle>\r\n                  <CardDescription>\r\n                    Update your profile information and how others see you.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  {/* Avatar Upload Section */}\r\n                  <div className=\"flex items-center gap-4\">\r\n                    <Avatar className=\"h-20 w-20\">\r\n                      <AvatarImage src={profileData.avatar} />\r\n                      <AvatarFallback>\r\n                        {profileData.firstName[0]}{profileData.lastName[0]}\r\n                      </AvatarFallback>\r\n                    </Avatar>\r\n                    <div>\r\n                      <input\r\n                        type=\"file\"\r\n                        ref={fileInputRef}\r\n                        onChange={handleAvatarUpload}\r\n                        accept=\"image/*\"\r\n                        className=\"hidden\"\r\n                      />\r\n                      <Button \r\n                        variant=\"outline\" \r\n                        size=\"sm\"\r\n                        onClick={() => fileInputRef.current?.click()}\r\n                      >\r\n                        <Upload className=\"h-4 w-4 mr-2\" />\r\n                        Upload Photo\r\n                      </Button>\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        JPG, GIF or PNG. 1MB Max.\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Profile Form Fields */}\r\n                  <div className=\"grid gap-4 md:grid-cols-2\">\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"firstName\">First Name</Label>\r\n                      <Input \r\n                        id=\"firstName\" \r\n                        value={profileData.firstName}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('firstName', e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"lastName\">Last Name</Label>\r\n                      <Input \r\n                        id=\"lastName\" \r\n                        value={profileData.lastName}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('lastName', e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"email\">Email</Label>\r\n                    <Input \r\n                      id=\"email\" \r\n                      type=\"email\" \r\n                      value={profileData.email}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('email', e.target.value)}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"company\">Company</Label>\r\n                    <Input \r\n                      id=\"company\" \r\n                      value={profileData.company}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleProfileUpdate('company', e.target.value)}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"bio\">Bio</Label>\r\n                    <Textarea\r\n                      id=\"bio\"\r\n                      placeholder=\"Tell us about yourself...\"\r\n                      value={profileData.bio}\r\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleProfileUpdate('bio', e.target.value)}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"timezone\">Timezone</Label>\r\n                    <Select \r\n                      value={profileData.timezone} \r\n                      onValueChange={(value: string) => handleProfileUpdate('timezone', value)}\r\n                    >\r\n                      <SelectTrigger>\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"utc-8\">Pacific Standard Time (UTC-8)</SelectItem>\r\n                        <SelectItem value=\"utc-7\">Mountain Standard Time (UTC-7)</SelectItem>\r\n                        <SelectItem value=\"utc-6\">Central Standard Time (UTC-6)</SelectItem>\r\n                        <SelectItem value=\"utc-5\">Eastern Standard Time (UTC-5)</SelectItem>\r\n                        <SelectItem value=\"utc+0\">Greenwich Mean Time (UTC+0)</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n\r\n                  <div className=\"flex justify-end\">\r\n                    <Button onClick={saveProfile}>Save Changes</Button>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Account Status Card */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Account Status</CardTitle>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-sm\">Plan</span>\r\n                    <Badge>Pro</Badge>\r\n                  </div>\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-sm\">Status</span>\r\n                    <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\r\n                      Active\r\n                    </Badge>\r\n                  </div>\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-sm\">Member since</span>\r\n                    <span className=\"text-sm text-muted-foreground\">Jan 2024</span>\r\n                  </div>\r\n                  <Separator />\r\n                  <Button variant=\"outline\" className=\"w-full\">\r\n                    Upgrade Plan\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          {/* Notifications Tab */}\r\n          <TabsContent value=\"notifications\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Notification Preferences</CardTitle>\r\n                <CardDescription>\r\n                  Choose what notifications you want to receive and how.\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-6\">\r\n                {/* Email Notifications Section */}\r\n                <div className=\"space-y-4\">\r\n                  <h4 className=\"text-sm font-medium\">Email Notifications</h4>\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"space-y-0.5\">\r\n                        <div className=\"text-sm font-medium\">Marketing emails</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          Receive emails about new products and features\r\n                        </div>\r\n                      </div>\r\n                      <Switch \r\n                        checked={notifications.marketing}\r\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('marketing', checked)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"space-y-0.5\">\r\n                        <div className=\"text-sm font-medium\">Security alerts</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          Get notified about account security events\r\n                        </div>\r\n                      </div>\r\n                      <Switch \r\n                        checked={notifications.security}\r\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('security', checked)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"space-y-0.5\">\r\n                        <div className=\"text-sm font-medium\">Payment notifications</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          Alerts about billing and payments\r\n                        </div>\r\n                      </div>\r\n                      <Switch \r\n                        checked={notifications.payments}\r\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('payments', checked)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <Separator />\r\n\r\n                {/* Push Notifications Section */}\r\n                <div className=\"space-y-4\">\r\n                  <h4 className=\"text-sm font-medium\">Push Notifications</h4>\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"space-y-0.5\">\r\n                        <div className=\"text-sm font-medium\">Real-time updates</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          Get instant notifications for important events\r\n                        </div>\r\n                      </div>\r\n                      <Switch \r\n                        checked={notifications.realTime}\r\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('realTime', checked)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"space-y-0.5\">\r\n                        <div className=\"text-sm font-medium\">Weekly reports</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          Summary of your account activity\r\n                        </div>\r\n                      </div>\r\n                      <Switch \r\n                        checked={notifications.weeklyReports}\r\n                        onCheckedChange={(checked: boolean) => handleNotificationChange('weeklyReports', checked)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          {/* Security Tab */}\r\n          <TabsContent value=\"security\" className=\"space-y-4\">\r\n            <div className=\"grid gap-4\">\r\n              {/* Password Change Card */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Password</CardTitle>\r\n                  <CardDescription>\r\n                    Change your password to keep your account secure.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"currentPassword\">Current Password</Label>\r\n                    <Input \r\n                      id=\"currentPassword\" \r\n                      type=\"password\" \r\n                      value={passwords.current}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPasswords(prev => ({ ...prev, current: e.target.value }))}\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"newPassword\">New Password</Label>\r\n                    <Input \r\n                      id=\"newPassword\" \r\n                      type=\"password\" \r\n                      value={passwords.new}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPasswords(prev => ({ ...prev, new: e.target.value }))}\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\r\n                    <Input \r\n                      id=\"confirmPassword\" \r\n                      type=\"password\" \r\n                      value={passwords.confirm}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPasswords(prev => ({ ...prev, confirm: e.target.value }))}\r\n                    />\r\n                  </div>\r\n                  <Button onClick={updatePassword}>Update Password</Button>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Two-Factor Authentication Card */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Two-Factor Authentication</CardTitle>\r\n                  <CardDescription>\r\n                    Add an extra layer of security to your account.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                      <div className=\"font-medium\">Authenticator App</div>\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        Use an authenticator app to generate codes\r\n                      </div>\r\n                    </div>\r\n                    <Button \r\n                      variant=\"outline\"\r\n                      onClick={() => toast({\r\n                        title: \"2FA Setup\",\r\n                        description: \"Two-factor authentication setup started!\",\r\n                        variant: \"default\"\r\n                      })}\r\n                    >\r\n                      Setup\r\n                    </Button>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Active Sessions Card */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Active Sessions</CardTitle>\r\n                  <CardDescription>\r\n                    Manage your active sessions across devices.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  {sessions.map((session) => (\r\n                    <div key={session.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                      <div>\r\n                        <div className=\"font-medium\">{session.name}</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          {session.device} • {session.location}\r\n                        </div>\r\n                      </div>\r\n                      {session.active ? (\r\n                        <Badge variant=\"secondary\">Active</Badge>\r\n                      ) : (\r\n                        <Button \r\n                          variant=\"outline\" \r\n                          size=\"sm\"\r\n                          onClick={() => revokeSession(session.id)}\r\n                        >\r\n                          Revoke\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          {/* Billing Tab */}\r\n          <TabsContent value=\"billing\" className=\"space-y-4\">\r\n            <div className=\"grid gap-4\">\r\n              {/* Current Plan Card */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Current Plan</CardTitle>\r\n                  <CardDescription>\r\n                    Manage your subscription and billing details.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                    <div>\r\n                      <div className=\"font-medium\">Pro Plan</div>\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        $29/month • Next billing date: Feb 15, 2024\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex gap-2\">\r\n                      <Button \r\n                        variant=\"outline\"\r\n                        onClick={() => toast({\r\n                          title: \"Plan Change\",\r\n                          description: \"Plan change initiated!\",\r\n                          variant: \"default\"\r\n                        })}\r\n                      >\r\n                        Change Plan\r\n                      </Button>\r\n                      <Button \r\n                        variant=\"outline\"\r\n                        onClick={() => toast({\r\n                          title: \"Cancellation\",\r\n                          description: \"Subscription cancellation processed!\",\r\n                          variant: \"destructive\"\r\n                        })}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Payment Methods Card */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Payment Methods</CardTitle>\r\n                  <CardDescription>\r\n                    Manage your payment methods and billing information.\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <CreditCard className=\"h-6 w-6\" />\r\n                      <div>\r\n                        <div className=\"font-medium\">•••• •••• •••• 4242</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          Expires 12/2025\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex gap-2\">\r\n                      <Badge variant=\"secondary\">Default</Badge>\r\n                      <Button \r\n                        variant=\"outline\" \r\n                        size=\"sm\"\r\n                        onClick={() => toast({\r\n                          title: \"Payment Method\",\r\n                          description: \"Payment method edit initiated!\",\r\n                          variant: \"default\"\r\n                        })}\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                  <Button \r\n                    variant=\"outline\" \r\n                    className=\"w-full\"\r\n                    onClick={() => toast({\r\n                      title: \"Payment Method\",\r\n                      description: \"Add payment method initiated!\",\r\n                      variant: \"default\"\r\n                    })}\r\n                  >\r\n                    Add Payment Method\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          {/* API Tab */}\r\n          <TabsContent value=\"api\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>API Keys</CardTitle>\r\n                <CardDescription>\r\n                  Manage API keys for accessing our services programmatically.\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                {/* API Keys List */}\r\n                <div className=\"space-y-3\">\r\n                  {apiKeys.map((apiKey) => (\r\n                    <div key={apiKey.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <Key className=\"h-5 w-5\" />\r\n                        <div>\r\n                          <div className=\"font-medium\">{apiKey.name}</div>\r\n                          <div className=\"text-sm text-muted-foreground font-mono\">\r\n                            {apiKey.type === 'production' && showApiKey ? apiKey.key : `${apiKey.key.substring(0, 12)}...`}\r\n                            {apiKey.type === 'development' && `${apiKey.key.substring(0, 12)}...`}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex gap-2\">\r\n                        {apiKey.type === 'production' && (\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={() => setShowApiKey(!showApiKey)}\r\n                          >\r\n                            {showApiKey ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n                          </Button>\r\n                        )}\r\n                        <Button \r\n                          variant=\"outline\" \r\n                          size=\"sm\"\r\n                          onClick={() => deleteApiKey(apiKey.id)}\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                <Button onClick={generateApiKey}>Generate New Key</Button>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n      \r\n      {/* Toast Notifications */}\r\n      <Toaster toasts={toasts} dismiss={dismiss} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Settings;"
    }
  ],
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {}
      }
    }
  }
}
{
  "name": "tables",
  "type": "page",
  "files": [
    {
      "name": "page.tsx",
      "content": "\"use client\"\r\n\r\nimport { V0Button } from \"@/components/v0-button\"\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\r\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\r\nimport { useToast } from \"@/lib/use-toast\"\r\nimport { ChevronDown, ChevronRight, Search, Download, Filter, Eye, Edit, Trash2, Plus, RefreshCw } from \"lucide-react\"\r\nimport { useState } from \"react\"\r\n\r\n// TypeScript interfaces for type safety\r\ninterface CustomerDetails {\r\n  address: string\r\n  phone: string\r\n  orders: number\r\n  totalSpent: string\r\n}\r\n\r\ninterface Customer {\r\n  id: string\r\n  customer: string\r\n  email: string\r\n  status: string\r\n  amount: string\r\n  date: string\r\n  details: CustomerDetails\r\n}\r\n\r\ninterface Product {\r\n  id: string\r\n  name: string\r\n  category: string\r\n  price: string\r\n  stock: number\r\n  status: string\r\n  sales: number\r\n}\r\n\r\ninterface Order {\r\n  id: string\r\n  customer: string\r\n  product: string\r\n  amount: string\r\n  status: string\r\n  date: string\r\n}\r\n\r\ninterface NewCustomer {\r\n  customer: string\r\n  email: string\r\n  phone: string\r\n  address: string\r\n  status: string\r\n}\r\n\r\ninterface NewProduct {\r\n  name: string\r\n  category: string\r\n  price: string\r\n  stock: string\r\n  status: string\r\n}\r\n\r\ninterface NewOrder {\r\n  customer: string\r\n  product: string\r\n  amount: string\r\n  status: string\r\n}\r\n\r\n// Initial sample data for customers with detailed information\r\nconst initialCustomerData: Customer[] = [\r\n  {\r\n    id: \"1\",\r\n    customer: \"Olivia Martin\",\r\n    email: \"olivia.martin@email.com\",\r\n    status: \"active\",\r\n    amount: \"$1,999.00\",\r\n    date: \"2024-01-15\",\r\n    details: {\r\n      address: \"123 Main St, San Francisco, CA\",\r\n      phone: \"+1 (555) 123-4567\",\r\n      orders: 15,\r\n      totalSpent: \"$15,420.00\"\r\n    }\r\n  },\r\n  {\r\n    id: \"2\",\r\n    customer: \"Jackson Lee\",\r\n    email: \"jackson.lee@email.com\",\r\n    status: \"pending\",\r\n    amount: \"$39.00\",\r\n    date: \"2024-01-14\",\r\n    details: {\r\n      address: \"456 Oak Ave, New York, NY\",\r\n      phone: \"+1 (555) 234-5678\",\r\n      orders: 3,\r\n      totalSpent: \"$420.00\"\r\n    }\r\n  },\r\n  {\r\n    id: \"3\",\r\n    customer: \"Isabella Nguyen\",\r\n    email: \"isabella.nguyen@email.com\",\r\n    status: \"active\",\r\n    amount: \"$299.00\",\r\n    date: \"2024-01-13\",\r\n    details: {\r\n      address: \"789 Pine Rd, Los Angeles, CA\",\r\n      phone: \"+1 (555) 345-6789\",\r\n      orders: 8,\r\n      totalSpent: \"$2,350.00\"\r\n    }\r\n  },\r\n  {\r\n    id: \"4\",\r\n    customer: \"William Kim\",\r\n    email: \"will@email.com\",\r\n    status: \"inactive\",\r\n    amount: \"$99.00\",\r\n    date: \"2024-01-12\",\r\n    details: {\r\n      address: \"321 Elm St, Chicago, IL\",\r\n      phone: \"+1 (555) 456-7890\",\r\n      orders: 2,\r\n      totalSpent: \"$180.00\"\r\n    }\r\n  },\r\n]\r\n\r\n// Initial sample data for products\r\nconst initialProductData: Product[] = [\r\n  {\r\n    id: \"1\",\r\n    name: \"Premium Subscription\",\r\n    category: \"Subscription\",\r\n    price: \"$29.99\",\r\n    stock: 999,\r\n    status: \"active\",\r\n    sales: 142\r\n  },\r\n  {\r\n    id: \"2\",\r\n    name: \"Basic Plan\",\r\n    category: \"Subscription\",\r\n    price: \"$9.99\",\r\n    stock: 999,\r\n    status: \"active\",\r\n    sales: 89\r\n  },\r\n  {\r\n    id: \"3\",\r\n    name: \"Enterprise\",\r\n    category: \"Subscription\",\r\n    price: \"$99.99\",\r\n    stock: 999,\r\n    status: \"active\",\r\n    sales: 23\r\n  },\r\n]\r\n\r\n// Initial sample data for orders\r\nconst initialOrderData: Order[] = [\r\n  {\r\n    id: \"ORD-001\",\r\n    customer: \"Olivia Martin\",\r\n    product: \"Premium Subscription\",\r\n    amount: \"$29.99\",\r\n    status: \"completed\",\r\n    date: \"2024-01-15\"\r\n  },\r\n  {\r\n    id: \"ORD-002\",\r\n    customer: \"Jackson Lee\",\r\n    product: \"Basic Plan\",\r\n    amount: \"$9.99\",\r\n    status: \"pending\",\r\n    date: \"2024-01-14\"\r\n  },\r\n  {\r\n    id: \"ORD-003\",\r\n    customer: \"Isabella Nguyen\",\r\n    product: \"Enterprise\",\r\n    amount: \"$99.99\",\r\n    status: \"completed\",\r\n    date: \"2024-01-13\"\r\n  },\r\n]\r\n\r\n// Complete code string for V0 button - includes the entire component\r\nconst TABLES_CODE = `\"use client\"\r\n\r\nimport { V0Button } from \"@/components/v0-button\"\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\r\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\r\nimport { useToast } from \"@/lib/use-toast\"\r\nimport { ChevronDown, ChevronRight, Search, Download, Filter, Eye, Edit, Trash2, Plus, RefreshCw } from \"lucide-react\"\r\nimport { useState } from \"react\"\r\n\r\n// TypeScript interfaces for type safety\r\ninterface CustomerDetails {\r\n  address: string\r\n  phone: string\r\n  orders: number\r\n  totalSpent: string\r\n}\r\n\r\ninterface Customer {\r\n  id: string\r\n  customer: string\r\n  email: string\r\n  status: string\r\n  amount: string\r\n  date: string\r\n  details: CustomerDetails\r\n}\r\n\r\ninterface Product {\r\n  id: string\r\n  name: string\r\n  category: string\r\n  price: string\r\n  stock: number\r\n  status: string\r\n  sales: number\r\n}\r\n\r\ninterface Order {\r\n  id: string\r\n  customer: string\r\n  product: string\r\n  amount: string\r\n  status: string\r\n  date: string\r\n}\r\n\r\ninterface NewCustomer {\r\n  customer: string\r\n  email: string\r\n  phone: string\r\n  address: string\r\n  status: string\r\n}\r\n\r\ninterface NewProduct {\r\n  name: string\r\n  category: string\r\n  price: string\r\n  stock: string\r\n  status: string\r\n}\r\n\r\ninterface NewOrder {\r\n  customer: string\r\n  product: string\r\n  amount: string\r\n  status: string\r\n}\r\n\r\n// Initial sample data for customers with detailed information\r\nconst initialCustomerData: Customer[] = [\r\n  {\r\n    id: \"1\",\r\n    customer: \"Olivia Martin\",\r\n    email: \"olivia.martin@email.com\",\r\n    status: \"active\",\r\n    amount: \"$1,999.00\",\r\n    date: \"2024-01-15\",\r\n    details: {\r\n      address: \"123 Main St, San Francisco, CA\",\r\n      phone: \"+1 (555) 123-4567\",\r\n      orders: 15,\r\n      totalSpent: \"$15,420.00\"\r\n    }\r\n  },\r\n  {\r\n    id: \"2\",\r\n    customer: \"Jackson Lee\",\r\n    email: \"jackson.lee@email.com\",\r\n    status: \"pending\",\r\n    amount: \"$39.00\",\r\n    date: \"2024-01-14\",\r\n    details: {\r\n      address: \"456 Oak Ave, New York, NY\",\r\n      phone: \"+1 (555) 234-5678\",\r\n      orders: 3,\r\n      totalSpent: \"$420.00\"\r\n    }\r\n  },\r\n  {\r\n    id: \"3\",\r\n    customer: \"Isabella Nguyen\",\r\n    email: \"isabella.nguyen@email.com\",\r\n    status: \"active\",\r\n    amount: \"$299.00\",\r\n    date: \"2024-01-13\",\r\n    details: {\r\n      address: \"789 Pine Rd, Los Angeles, CA\",\r\n      phone: \"+1 (555) 345-6789\",\r\n      orders: 8,\r\n      totalSpent: \"$2,350.00\"\r\n    }\r\n  },\r\n  {\r\n    id: \"4\",\r\n    customer: \"William Kim\",\r\n    email: \"will@email.com\",\r\n    status: \"inactive\",\r\n    amount: \"$99.00\",\r\n    date: \"2024-01-12\",\r\n    details: {\r\n      address: \"321 Elm St, Chicago, IL\",\r\n      phone: \"+1 (555) 456-7890\",\r\n      orders: 2,\r\n      totalSpent: \"$180.00\"\r\n    }\r\n  },\r\n]\r\n\r\n// Initial sample data for products\r\nconst initialProductData: Product[] = [\r\n  {\r\n    id: \"1\",\r\n    name: \"Premium Subscription\",\r\n    category: \"Subscription\",\r\n    price: \"$29.99\",\r\n    stock: 999,\r\n    status: \"active\",\r\n    sales: 142\r\n  },\r\n  {\r\n    id: \"2\",\r\n    name: \"Basic Plan\",\r\n    category: \"Subscription\",\r\n    price: \"$9.99\",\r\n    stock: 999,\r\n    status: \"active\",\r\n    sales: 89\r\n  },\r\n  {\r\n    id: \"3\",\r\n    name: \"Enterprise\",\r\n    category: \"Subscription\",\r\n    price: \"$99.99\",\r\n    stock: 999,\r\n    status: \"active\",\r\n    sales: 23\r\n  },\r\n]\r\n\r\n// Initial sample data for orders\r\nconst initialOrderData: Order[] = [\r\n  {\r\n    id: \"ORD-001\",\r\n    customer: \"Olivia Martin\",\r\n    product: \"Premium Subscription\",\r\n    amount: \"$29.99\",\r\n    status: \"completed\",\r\n    date: \"2024-01-15\"\r\n  },\r\n  {\r\n    id: \"ORD-002\",\r\n    customer: \"Jackson Lee\",\r\n    product: \"Basic Plan\",\r\n    amount: \"$9.99\",\r\n    status: \"pending\",\r\n    date: \"2024-01-14\"\r\n  },\r\n  {\r\n    id: \"ORD-003\",\r\n    customer: \"Isabella Nguyen\",\r\n    product: \"Enterprise\",\r\n    amount: \"$99.99\",\r\n    status: \"completed\",\r\n    date: \"2024-01-13\"\r\n  },\r\n]\r\n\r\nexport default function Tables() {\r\n  // State management for all table data and UI interactions\r\n  const [customerData, setCustomerData] = useState<Customer[]>(initialCustomerData)\r\n  const [productData, setProductData] = useState<Product[]>(initialProductData)\r\n  const [orderData, setOrderData] = useState<Order[]>(initialOrderData)\r\n  \r\n  // UI state for expandable rows and search functionality\r\n  const [expandedRows, setExpandedRows] = useState(new Set<string>())\r\n  const [customerSearchTerm, setCustomerSearchTerm] = useState(\"\")\r\n  const [customerStatusFilter, setCustomerStatusFilter] = useState(\"all\")\r\n  \r\n  const [productSearchTerm, setProductSearchTerm] = useState(\"\")\r\n  const [orderSearchTerm, setOrderSearchTerm] = useState(\"\")\r\n  \r\n  // Modal states for adding new entries\r\n  const [customerModalOpen, setCustomerModalOpen] = useState(false)\r\n  const [productModalOpen, setProductModalOpen] = useState(false)\r\n  const [orderModalOpen, setOrderModalOpen] = useState(false)\r\n  const [isRefreshing, setIsRefreshing] = useState(false)\r\n  \r\n  // Form states for new entries\r\n  const [newCustomer, setNewCustomer] = useState<NewCustomer>({\r\n    customer: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    address: \"\",\r\n    status: \"active\"\r\n  })\r\n  \r\n  const [newProduct, setNewProduct] = useState<NewProduct>({\r\n    name: \"\",\r\n    category: \"\",\r\n    price: \"\",\r\n    stock: \"\",\r\n    status: \"active\"\r\n  })\r\n  \r\n  const [newOrder, setNewOrder] = useState<NewOrder>({\r\n    customer: \"\",\r\n    product: \"\",\r\n    amount: \"\",\r\n    status: \"pending\"\r\n  })\r\n\r\n  const { toast } = useToast()\r\n\r\n  // Export functionality for data tables\r\n  const exportToCSV = (data: any[], filename: string) => {\r\n    const headers = Object.keys(data[0]).filter(key => key !== 'details').join(\",\")\r\n    const csvData = data.map(row => \r\n      Object.entries(row)\r\n        .filter(([key]) => key !== 'details')\r\n        .map(([_, value]) => typeof value === 'object' ? JSON.stringify(value) : value)\r\n        .join(\",\")\r\n    ).join(\"\\\\n\")\r\n    \r\n    const csv = \\`\\${headers}\\\\n\\${csvData}\\`\r\n    const blob = new Blob([csv], { type: 'text/csv' })\r\n    const url = window.URL.createObjectURL(blob)\r\n    const a = document.createElement('a')\r\n    a.setAttribute('hidden', '')\r\n    a.setAttribute('href', url)\r\n    a.setAttribute('download', \\`\\${filename}.csv\\`)\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n    \r\n    toast({\r\n      title: \"Export Successful\",\r\n      description: \\`\\${filename}.csv has been downloaded successfully.\\`,\r\n    })\r\n  }\r\n\r\n  // Toggle expandable table rows\r\n  const toggleRow = (id: string) => {\r\n    const newExpanded = new Set(expandedRows)\r\n    if (newExpanded.has(id)) {\r\n      newExpanded.delete(id)\r\n    } else {\r\n      newExpanded.add(id)\r\n    }\r\n    setExpandedRows(newExpanded)\r\n  }\r\n\r\n  // Filter functions for different tables\r\n  const filteredCustomerData = customerData.filter(item => {\r\n    const matchesSearch = item.customer.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||\r\n                         item.email.toLowerCase().includes(customerSearchTerm.toLowerCase())\r\n    const matchesStatus = customerStatusFilter === \"all\" || item.status === customerStatusFilter\r\n    return matchesSearch && matchesStatus\r\n  })\r\n  \r\n  const filteredProductData = productData.filter(item =>\r\n    item.name.toLowerCase().includes(productSearchTerm.toLowerCase()) ||\r\n    item.category.toLowerCase().includes(productSearchTerm.toLowerCase())\r\n  )\r\n  \r\n  const filteredOrderData = orderData.filter(item =>\r\n    item.customer.toLowerCase().includes(orderSearchTerm.toLowerCase()) ||\r\n    item.product.toLowerCase().includes(orderSearchTerm.toLowerCase()) ||\r\n    item.id.toLowerCase().includes(orderSearchTerm.toLowerCase())\r\n  )\r\n\r\n  // Helper function to get status badge colors\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case \"active\": case \"completed\": return \"bg-green-300 text-green-800 border-green-700\"\r\n      case \"pending\": return \"bg-yellow-300 text-yellow-800 border-yellow-700\"\r\n      case \"inactive\": return \"bg-red-300 text-red-800 border-red-700\"\r\n      default: return \"bg-gray-300 text-gray-800 border-gray-700\"\r\n    }\r\n  }\r\n\r\n  // Handle adding new customer\r\n  const handleAddCustomer = () => {\r\n    if (!newCustomer.customer || !newCustomer.email) {\r\n      toast({\r\n        title: \"Missing Information\",\r\n        description: \"Please fill in customer name and email.\",\r\n        variant: \"destructive\"\r\n      })\r\n      return\r\n    }\r\n\r\n    const customer: Customer = {\r\n      id: (customerData.length + 1).toString(),\r\n      customer: newCustomer.customer,\r\n      email: newCustomer.email,\r\n      status: newCustomer.status,\r\n      amount: \"$0.00\",\r\n      date: new Date().toISOString().split('T')[0],\r\n      details: {\r\n        address: newCustomer.address,\r\n        phone: newCustomer.phone,\r\n        orders: 0,\r\n        totalSpent: \"$0.00\"\r\n      }\r\n    }\r\n    setCustomerData([...customerData, customer])\r\n    setNewCustomer({ customer: \"\", email: \"\", phone: \"\", address: \"\", status: \"active\" })\r\n    setCustomerModalOpen(false)\r\n    \r\n    toast({\r\n      title: \"Customer Added\",\r\n      description: \\`\\${newCustomer.customer} has been added successfully.\\`,\r\n    })\r\n  }\r\n\r\n  // Handle adding new product\r\n  const handleAddProduct = () => {\r\n    if (!newProduct.name || !newProduct.price) {\r\n      toast({\r\n        title: \"Missing Information\", \r\n        description: \"Please fill in product name and price.\",\r\n        variant: \"destructive\"\r\n      })\r\n      return\r\n    }\r\n\r\n    const product: Product = {\r\n      id: (productData.length + 1).toString(),\r\n      name: newProduct.name,\r\n      category: newProduct.category,\r\n      price: newProduct.price,\r\n      stock: parseInt(newProduct.stock) || 0,\r\n      status: newProduct.status,\r\n      sales: 0\r\n    }\r\n    setProductData([...productData, product])\r\n    setNewProduct({ name: \"\", category: \"\", price: \"\", stock: \"\", status: \"active\" })\r\n    setProductModalOpen(false)\r\n    \r\n    toast({\r\n      title: \"Product Added\",\r\n      description: \\`\\${newProduct.name} has been added to the catalog.\\`,\r\n    })\r\n  }\r\n\r\n  // Handle adding new order\r\n  const handleAddOrder = () => {\r\n    if (!newOrder.customer || !newOrder.product || !newOrder.amount) {\r\n      toast({\r\n        title: \"Missing Information\",\r\n        description: \"Please fill in all order details.\",\r\n        variant: \"destructive\"\r\n      })\r\n      return\r\n    }\r\n\r\n    const order: Order = {\r\n      id: \\`ORD-\\${String(orderData.length + 1).padStart(3, '0')}\\`,\r\n      customer: newOrder.customer,\r\n      product: newOrder.product,\r\n      amount: newOrder.amount,\r\n      status: newOrder.status,\r\n      date: new Date().toISOString().split('T')[0]\r\n    }\r\n    setOrderData([...orderData, order])\r\n    setNewOrder({ customer: \"\", product: \"\", amount: \"\", status: \"pending\" })\r\n    setOrderModalOpen(false)\r\n    \r\n    toast({\r\n      title: \"Order Created\",\r\n      description: \\`Order \\${order.id} has been created successfully.\\`,\r\n    })\r\n  }\r\n\r\n  // Handle deleting items from any table\r\n  const handleDeleteItem = (id: string, type: string, name: string) => {\r\n    switch (type) {\r\n      case 'customer':\r\n        setCustomerData(customerData.filter(item => item.id !== id))\r\n        break\r\n      case 'product':\r\n        setProductData(productData.filter(item => item.id !== id))\r\n        break\r\n      case 'order':\r\n        setOrderData(orderData.filter(item => item.id !== id))\r\n        break\r\n    }\r\n    \r\n    toast({\r\n      title: \"Item Deleted\",\r\n      description: \\`\\${name} has been removed successfully.\\`,\r\n      variant: \"destructive\"\r\n    })\r\n  }\r\n\r\n  // Handle refreshing all table data\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true)\r\n    await new Promise(resolve => setTimeout(resolve, 1500))\r\n    setIsRefreshing(false)\r\n    toast({\r\n      title: \"Tables Refreshed\",\r\n      description: \"All table data has been refreshed.\",\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6 p-6\">\r\n      {/* Page Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Data Tables</h1>\r\n          <p className=\"text-muted-foreground mt-1\">\r\n            Advanced tables with collapsible rows, filtering, and sorting.\r\n          </p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\" \r\n            onClick={handleRefresh}\r\n            disabled={isRefreshing}\r\n          >\r\n            <RefreshCw className={\\`h-4 w-4 mr-2 \\${isRefreshing ? 'animate-spin' : ''}\\`} />\r\n            Refresh\r\n          </Button>\r\n          <V0Button \r\n            prompt=\"just render the ui as it is of this page , dont make any changes, just as it is\"\r\n            code={TABLES_CODE}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Customer Table */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle>Customer Database</CardTitle>\r\n              <CardDescription>\r\n                Manage and view customer information with expandable details\r\n              </CardDescription>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"sm\"\r\n                onClick={() => exportToCSV(customerData, 'customers')}\r\n              >\r\n                <Download className=\"h-4 w-4 mr-2\" />\r\n                Export\r\n              </Button>\r\n              <Dialog open={customerModalOpen} onOpenChange={setCustomerModalOpen}>\r\n                <DialogTrigger asChild>\r\n                  <Button size=\"sm\">\r\n                    <Plus className=\"h-4 w-4 mr-2\" />\r\n                    Add Customer\r\n                  </Button>\r\n                </DialogTrigger>\r\n                <DialogContent>\r\n                  <DialogHeader>\r\n                    <DialogTitle>Add New Customer</DialogTitle>\r\n                    <DialogDescription>\r\n                      Enter the customer details below.\r\n                    </DialogDescription>\r\n                  </DialogHeader>\r\n                  <div className=\"grid gap-4 py-4\">\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"customer\">Customer Name *</Label>\r\n                        <Input\r\n                          id=\"customer\"\r\n                          value={newCustomer.customer}\r\n                          onChange={(e) => setNewCustomer({...newCustomer, customer: e.target.value})}\r\n                          placeholder=\"John Doe\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"email\">Email *</Label>\r\n                        <Input\r\n                          id=\"email\"\r\n                          type=\"email\"\r\n                          value={newCustomer.email}\r\n                          onChange={(e) => setNewCustomer({...newCustomer, email: e.target.value})}\r\n                          placeholder=\"john@example.com\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"phone\">Phone</Label>\r\n                      <Input\r\n                        id=\"phone\"\r\n                        value={newCustomer.phone}\r\n                        onChange={(e) => setNewCustomer({...newCustomer, phone: e.target.value})}\r\n                        placeholder=\"+1 (555) 123-4567\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"address\">Address</Label>\r\n                      <Textarea\r\n                        id=\"address\"\r\n                        value={newCustomer.address}\r\n                        onChange={(e) => setNewCustomer({...newCustomer, address: e.target.value})}\r\n                        placeholder=\"123 Main St, City, State\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"status\">Status</Label>\r\n                      <Select value={newCustomer.status} onValueChange={(value) => setNewCustomer({...newCustomer, status: value})}>\r\n                        <SelectTrigger>\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"active\">Active</SelectItem>\r\n                          <SelectItem value=\"pending\">Pending</SelectItem>\r\n                          <SelectItem value=\"inactive\">Inactive</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                  <DialogFooter>\r\n                    <Button variant=\"outline\" onClick={() => setCustomerModalOpen(false)}>\r\n                      Cancel\r\n                    </Button>\r\n                    <Button onClick={handleAddCustomer}>Add Customer</Button>\r\n                  </DialogFooter>\r\n                </DialogContent>\r\n              </Dialog>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Search and Filter Controls */}\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\r\n                <Input \r\n                  placeholder=\"Search customers...\" \r\n                  value={customerSearchTerm}\r\n                  onChange={(e) => setCustomerSearchTerm(e.target.value)}\r\n                  className=\"pl-10 w-64\"\r\n                />\r\n              </div>\r\n              <Select value={customerStatusFilter} onValueChange={setCustomerStatusFilter}>\r\n                <SelectTrigger className=\"w-32\">\r\n                  <Filter className=\"h-4 w-4 mr-2\" />\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Status</SelectItem>\r\n                  <SelectItem value=\"active\">Active</SelectItem>\r\n                  <SelectItem value=\"pending\">Pending</SelectItem>\r\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              {filteredCustomerData.length} of {customerData.length} customers\r\n            </p>\r\n          </div>\r\n\r\n          {/* Customer Table with Expandable Rows */}\r\n          <div className=\"rounded-md border\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead className=\"w-8\"></TableHead>\r\n                  <TableHead>Customer</TableHead>\r\n                  <TableHead>Email</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Amount</TableHead>\r\n                  <TableHead>Date</TableHead>\r\n                  <TableHead className=\"text-right\">Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredCustomerData.map((item) => (\r\n                  <Collapsible key={item.id} asChild>\r\n                    <>\r\n                      <TableRow className=\"cursor-pointer hover:bg-muted/50\">\r\n                        <TableCell>\r\n                          <CollapsibleTrigger asChild>\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              onClick={() => toggleRow(item.id)}\r\n                              className=\"p-0 h-6 w-6\"\r\n                            >\r\n                              {expandedRows.has(item.id) ? (\r\n                                <ChevronDown className=\"h-4 w-4\" />\r\n                              ) : (\r\n                                <ChevronRight className=\"h-4 w-4\" />\r\n                              )}\r\n                            </Button>\r\n                          </CollapsibleTrigger>\r\n                        </TableCell>\r\n                        <TableCell className=\"font-medium\">\r\n                          {item.customer}\r\n                        </TableCell>\r\n                        <TableCell className=\"text-muted-foreground\">\r\n                          {item.email}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge \r\n                            variant=\"outline\" \r\n                            className={getStatusColor(item.status)}\r\n                          >\r\n                            {item.status}\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell className=\"font-mono text-sm\">\r\n                          {item.amount}\r\n                        </TableCell>\r\n                        <TableCell className=\"text-muted-foreground\">\r\n                          {item.date}\r\n                        </TableCell>\r\n                        <TableCell className=\"text-right\">\r\n                          <div className=\"flex items-center justify-end gap-2\">\r\n                            <Button \r\n                              variant=\"ghost\" \r\n                              size=\"sm\"\r\n                              onClick={() => toast({ title: \"View Customer\", description: \\`Viewing \\${item.customer}\\` })}\r\n                            >\r\n                              <Eye className=\"h-4 w-4\" />\r\n                            </Button>\r\n                            <Button \r\n                              variant=\"ghost\" \r\n                              size=\"sm\"\r\n                              onClick={() => toast({ title: \"Edit Customer\", description: \\`Edit \\${item.customer}\\` })}\r\n                            >\r\n                              <Edit className=\"h-4 w-4\" />\r\n                            </Button>\r\n                            <Button \r\n                              variant=\"ghost\" \r\n                              size=\"sm\"\r\n                              onClick={() => handleDeleteItem(item.id, 'customer', item.customer)}\r\n                            >\r\n                              <Trash2 className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                      <CollapsibleContent asChild>\r\n                        <TableRow className=\"hover:bg-muted/25\">\r\n                          <TableCell></TableCell>\r\n                          <TableCell colSpan={6}>\r\n                            <div className=\"p-4 bg-muted/25 rounded-md\">\r\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                                <div>\r\n                                  <h4 className=\"text-sm font-medium text-muted-foreground\">Address</h4>\r\n                                  <p className=\"text-sm\">{item.details.address}</p>\r\n                                </div>\r\n                                <div>\r\n                                  <h4 className=\"text-sm font-medium text-muted-foreground\">Phone</h4>\r\n                                  <p className=\"text-sm\">{item.details.phone}</p>\r\n                                </div>\r\n                                <div>\r\n                                  <h4 className=\"text-sm font-medium text-muted-foreground\">Total Orders</h4>\r\n                                  <p className=\"text-sm font-medium\">{item.details.orders}</p>\r\n                                </div>\r\n                                <div>\r\n                                  <h4 className=\"text-sm font-medium text-muted-foreground\">Total Spent</h4>\r\n                                  <p className=\"text-sm font-medium font-mono\">{item.details.totalSpent}</p>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </CollapsibleContent>\r\n                    </>\r\n                  </Collapsible>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Products Table */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle>Product Catalog</CardTitle>\r\n              <CardDescription>\r\n                Manage your products and inventory\r\n              </CardDescription>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"sm\"\r\n                onClick={() => exportToCSV(productData, 'products')}\r\n              >\r\n                <Download className=\"h-4 w-4 mr-2\" />\r\n                Export\r\n              </Button>\r\n              <Dialog open={productModalOpen} onOpenChange={setProductModalOpen}>\r\n                <DialogTrigger asChild>\r\n                  <Button size=\"sm\">\r\n                    <Plus className=\"h-4 w-4 mr-2\" />\r\n                    Add Product\r\n                  </Button>\r\n                </DialogTrigger>\r\n                <DialogContent>\r\n                  <DialogHeader>\r\n                    <DialogTitle>Add New Product</DialogTitle>\r\n                    <DialogDescription>\r\n                      Enter the product details below.\r\n                    </DialogDescription>\r\n                  </DialogHeader>\r\n                  <div className=\"grid gap-4 py-4\">\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"name\">Product Name *</Label>\r\n                        <Input\r\n                          id=\"name\"\r\n                          value={newProduct.name}\r\n                          onChange={(e) => setNewProduct({...newProduct, name: e.target.value})}\r\n                          placeholder=\"Premium Plan\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"category\">Category</Label>\r\n                        <Input\r\n                          id=\"category\"\r\n                          value={newProduct.category}\r\n                          onChange={(e) => setNewProduct({...newProduct, category: e.target.value})}\r\n                          placeholder=\"Subscription\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"price\">Price *</Label>\r\n                        <Input\r\n                          id=\"price\"\r\n                          placeholder=\"$29.99\"\r\n                          value={newProduct.price}\r\n                          onChange={(e) => setNewProduct({...newProduct, price: e.target.value})}\r\n                        />\r\n                      </div>\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"stock\">Stock</Label>\r\n                        <Input\r\n                          id=\"stock\"\r\n                          type=\"number\"\r\n                          value={newProduct.stock}\r\n                          onChange={(e) => setNewProduct({...newProduct, stock: e.target.value})}\r\n                          placeholder=\"100\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"status\">Status</Label>\r\n                      <Select value={newProduct.status} onValueChange={(value) => setNewProduct({...newProduct, status: value})}>\r\n                        <SelectTrigger>\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"active\">Active</SelectItem>\r\n                          <SelectItem value=\"inactive\">Inactive</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                  <DialogFooter>\r\n                    <Button variant=\"outline\" onClick={() => setProductModalOpen(false)}>\r\n                      Cancel\r\n                    </Button>\r\n                    <Button onClick={handleAddProduct}>Add Product</Button>\r\n                  </DialogFooter>\r\n                </DialogContent>\r\n              </Dialog>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Product Search */}\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\r\n              <Input \r\n                placeholder=\"Search products...\" \r\n                value={productSearchTerm}\r\n                onChange={(e) => setProductSearchTerm(e.target.value)}\r\n                className=\"pl-10 w-64\"\r\n              />\r\n            </div>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              {filteredProductData.length} of {productData.length} products\r\n            </p>\r\n          </div>\r\n\r\n          {/* Products Table */}\r\n          <div className=\"rounded-md border\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Name</TableHead>\r\n                  <TableHead>Category</TableHead>\r\n                  <TableHead>Price</TableHead>\r\n                  <TableHead>Stock</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Sales</TableHead>\r\n                  <TableHead className=\"text-right\">Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredProductData.map((item) => (\r\n                  <TableRow key={item.id}>\r\n                    <TableCell className=\"font-medium\">{item.name}</TableCell>\r\n                    <TableCell>{item.category}</TableCell>\r\n                    <TableCell className=\"font-mono\">{item.price}</TableCell>\r\n                    <TableCell>{item.stock}</TableCell>\r\n                    <TableCell>\r\n                      <Badge \r\n                        variant=\"outline\" \r\n                        className={getStatusColor(item.status)}\r\n                      >\r\n                        {item.status}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>{item.sales}</TableCell>\r\n                    <TableCell className=\"text-right\">\r\n                      <div className=\"flex items-center justify-end gap-2\">\r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => toast({ title: \"View Product\", description: \\`Viewing \\${item.name}\\` })}\r\n                        >\r\n                          <Eye className=\"h-4 w-4\" />\r\n                        </Button>\r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => toast({ title: \"Edit Product\", description: \\`Edit \\${item.name}\\` })}\r\n                        >\r\n                          <Edit className=\"h-4 w-4\" />\r\n                        </Button>\r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => handleDeleteItem(item.id, 'product', item.name)}\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Orders Table */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle>Order Management</CardTitle>\r\n              <CardDescription>\r\n                Track and manage customer orders\r\n              </CardDescription>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"sm\"\r\n                onClick={() => exportToCSV(orderData, 'orders')}\r\n              >\r\n                <Download className=\"h-4 w-4 mr-2\" />\r\n                Export\r\n              </Button>\r\n              <Dialog open={orderModalOpen} onOpenChange={setOrderModalOpen}>\r\n                <DialogTrigger asChild>\r\n                  <Button size=\"sm\">\r\n                    <Plus className=\"h-4 w-4 mr-2\" />\r\n                    Add Order\r\n                  </Button>\r\n                </DialogTrigger>\r\n                <DialogContent>\r\n                  <DialogHeader>\r\n                    <DialogTitle>Add New Order</DialogTitle>\r\n                    <DialogDescription>\r\n                      Enter the order details below.\r\n                    </DialogDescription>\r\n                  </DialogHeader>\r\n                  <div className=\"grid gap-4 py-4\">\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"orderCustomer\">Customer Name *</Label>\r\n                      <Input\r\n                        id=\"orderCustomer\"\r\n                        value={newOrder.customer}\r\n                        onChange={(e) => setNewOrder({...newOrder, customer: e.target.value})}\r\n                        placeholder=\"John Doe\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"orderProduct\">Product *</Label>\r\n                      <Input\r\n                        id=\"orderProduct\"\r\n                        value={newOrder.product}\r\n                        onChange={(e) => setNewOrder({...newOrder, product: e.target.value})}\r\n                        placeholder=\"Premium Subscription\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"orderAmount\">Amount *</Label>\r\n                      <Input\r\n                        id=\"orderAmount\"\r\n                        placeholder=\"$29.99\"\r\n                        value={newOrder.amount}\r\n                        onChange={(e) => setNewOrder({...newOrder, amount: e.target.value})}\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"orderStatus\">Status</Label>\r\n                      <Select value={newOrder.status} onValueChange={(value) => setNewOrder({...newOrder, status: value})}>\r\n                        <SelectTrigger>\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"pending\">Pending</SelectItem>\r\n                          <SelectItem value=\"completed\">Completed</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                  <DialogFooter>\r\n                    <Button variant=\"outline\" onClick={() => setOrderModalOpen(false)}>\r\n                      Cancel\r\n                    </Button>\r\n                    <Button onClick={handleAddOrder}>Add Order</Button>\r\n                  </DialogFooter>\r\n                </DialogContent>\r\n              </Dialog>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Order Search */}\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\r\n              <Input \r\n                placeholder=\"Search orders...\" \r\n                value={orderSearchTerm}\r\n                onChange={(e) => setOrderSearchTerm(e.target.value)}\r\n                className=\"pl-10 w-64\"\r\n              />\r\n            </div>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              {filteredOrderData.length} of {orderData.length} orders\r\n            </p>\r\n          </div>\r\n\r\n          {/* Orders Table */}\r\n          <div className=\"rounded-md border\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Order ID</TableHead>\r\n                  <TableHead>Customer</TableHead>\r\n                  <TableHead>Product</TableHead>\r\n                  <TableHead>Amount</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Date</TableHead>\r\n                  <TableHead className=\"text-right\">Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredOrderData.map((item) => (\r\n                  <TableRow key={item.id}>\r\n                    <TableCell className=\"font-mono\">{item.id}</TableCell>\r\n                    <TableCell className=\"font-medium\">{item.customer}</TableCell>\r\n                    <TableCell>{item.product}</TableCell>\r\n                    <TableCell className=\"font-mono\">{item.amount}</TableCell>\r\n                    <TableCell>\r\n                      <Badge \r\n                        variant=\"outline\" \r\n                        className={getStatusColor(item.status)}\r\n                      >\r\n                        {item.status}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell className=\"text-muted-foreground\">{item.date}</TableCell>\r\n                    <TableCell className=\"text-right\">\r\n                      <div className=\"flex items-center justify-end gap-2\">\r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => toast({ title: \"View Order\", description: \\`Viewing order \\${item.id}\\` })}\r\n                        >\r\n                          <Eye className=\"h-4 w-4\" />\r\n                        </Button>\r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => toast({ title: \"Edit Order\", description: \\`Edit order \\${item.id}\\` })}\r\n                        >\r\n                          <Edit className=\"h-4 w-4\" />\r\n                        </Button>\r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => handleDeleteItem(item.id, 'order', \\`Order \\${item.id}\\`)}\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}`\r\n\r\nexport default function Tables() {\r\n  // State management for all table data and UI interactions\r\n  const [customerData, setCustomerData] = useState<Customer[]>(initialCustomerData)\r\n  const [productData, setProductData] = useState<Product[]>(initialProductData)\r\n  const [orderData, setOrderData] = useState<Order[]>(initialOrderData)\r\n  \r\n  // UI state for expandable rows and search functionality\r\n  const [expandedRows, setExpandedRows] = useState(new Set<string>())\r\n  const [customerSearchTerm, setCustomerSearchTerm] = useState(\"\")\r\n  const [customerStatusFilter, setCustomerStatusFilter] = useState(\"all\")\r\n  \r\n  const [productSearchTerm, setProductSearchTerm] = useState(\"\")\r\n  const [orderSearchTerm, setOrderSearchTerm] = useState(\"\")\r\n  \r\n  // Modal states for adding new entries\r\n  const [customerModalOpen, setCustomerModalOpen] = useState(false)\r\n  const [productModalOpen, setProductModalOpen] = useState(false)\r\n  const [orderModalOpen, setOrderModalOpen] = useState(false)\r\n  const [isRefreshing, setIsRefreshing] = useState(false)\r\n  \r\n  // Form states for new entries\r\n  const [newCustomer, setNewCustomer] = useState<NewCustomer>({\r\n    customer: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    address: \"\",\r\n    status: \"active\"\r\n  })\r\n  \r\n  const [newProduct, setNewProduct] = useState<NewProduct>({\r\n    name: \"\",\r\n    category: \"\",\r\n    price: \"\",\r\n    stock: \"\",\r\n    status: \"active\"\r\n  })\r\n  \r\n  const [newOrder, setNewOrder] = useState<NewOrder>({\r\n    customer: \"\",\r\n    product: \"\",\r\n    amount: \"\",\r\n    status: \"pending\"\r\n  })\r\n\r\n  const { toast } = useToast()\r\n\r\n  // Export functionality for data tables\r\n  const exportToCSV = (data: any[], filename: string) => {\r\n    const headers = Object.keys(data[0]).filter(key => key !== 'details').join(\",\")\r\n    const csvData = data.map(row => \r\n      Object.entries(row)\r\n        .filter(([key]) => key !== 'details')\r\n        .map(([_, value]) => typeof value === 'object' ? JSON.stringify(value) : value)\r\n        .join(\",\")\r\n    ).join(\"\\n\")\r\n    \r\n    const csv = `${headers}\\n${csvData}`\r\n    const blob = new Blob([csv], { type: 'text/csv' })\r\n    const url = window.URL.createObjectURL(blob)\r\n    const a = document.createElement('a')\r\n    a.setAttribute('hidden', '')\r\n    a.setAttribute('href', url)\r\n    a.setAttribute('download', `${filename}.csv`)\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n    \r\n    toast({\r\n      title: \"Export Successful\",\r\n      description: `${filename}.csv has been downloaded successfully.`,\r\n    })\r\n  }\r\n\r\n  // Toggle expandable table rows\r\n  const toggleRow = (id: string) => {\r\n    const newExpanded = new Set(expandedRows)\r\n    if (newExpanded.has(id)) {\r\n      newExpanded.delete(id)\r\n    } else {\r\n      newExpanded.add(id)\r\n    }\r\n    setExpandedRows(newExpanded)\r\n  }\r\n\r\n  // Filter functions for different tables\r\n  const filteredCustomerData = customerData.filter(item => {\r\n    const matchesSearch = item.customer.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||\r\n                         item.email.toLowerCase().includes(customerSearchTerm.toLowerCase())\r\n    const matchesStatus = customerStatusFilter === \"all\" || item.status === customerStatusFilter\r\n    return matchesSearch && matchesStatus\r\n  })\r\n  \r\n  const filteredProductData = productData.filter(item =>\r\n    item.name.toLowerCase().includes(productSearchTerm.toLowerCase()) ||\r\n    item.category.toLowerCase().includes(productSearchTerm.toLowerCase())\r\n  )\r\n  \r\n  const filteredOrderData = orderData.filter(item =>\r\n    item.customer.toLowerCase().includes(orderSearchTerm.toLowerCase()) ||\r\n    item.product.toLowerCase().includes(orderSearchTerm.toLowerCase()) ||\r\n    item.id.toLowerCase().includes(orderSearchTerm.toLowerCase())\r\n  )\r\n\r\n  // Helper function to get status badge colors\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case \"active\": case \"completed\": return \"bg-green-300 text-green-800 border-green-700\"\r\n      case \"pending\": return \"bg-yellow-300 text-yellow-800 border-yellow-700\"\r\n      case \"inactive\": return \"bg-red-300 text-red-800 border-red-700\"\r\n      default: return \"bg-gray-300 text-gray-800 border-gray-700\"\r\n    }\r\n  }\r\n\r\n  // Handle adding new customer\r\n  const handleAddCustomer = () => {\r\n    if (!newCustomer.customer || !newCustomer.email) {\r\n      toast({\r\n        title: \"Missing Information\",\r\n        description: \"Please fill in customer name and email.\",\r\n        variant: \"destructive\"\r\n      })\r\n      return\r\n    }\r\n\r\n    const customer: Customer = {\r\n      id: (customerData.length + 1).toString(),\r\n      customer: newCustomer.customer,\r\n      email: newCustomer.email,\r\n      status: newCustomer.status,\r\n      amount: \"$0.00\",\r\n      date: new Date().toISOString().split('T')[0],\r\n      details: {\r\n        address: newCustomer.address,\r\n        phone: newCustomer.phone,\r\n        orders: 0,\r\n        totalSpent: \"$0.00\"\r\n      }\r\n    }\r\n    setCustomerData([...customerData, customer])\r\n    setNewCustomer({ customer: \"\", email: \"\", phone: \"\", address: \"\", status: \"active\" })\r\n    setCustomerModalOpen(false)\r\n    \r\n    toast({\r\n      title: \"Customer Added\",\r\n      description: `${newCustomer.customer} has been added successfully.`,\r\n    })\r\n  }\r\n\r\n  // Handle adding new product\r\n  const handleAddProduct = () => {\r\n    if (!newProduct.name || !newProduct.price) {\r\n      toast({\r\n        title: \"Missing Information\", \r\n        description: \"Please fill in product name and price.\",\r\n        variant: \"destructive\"\r\n      })\r\n      return\r\n    }\r\n\r\n    const product: Product = {\r\n      id: (productData.length + 1).toString(),\r\n      name: newProduct.name,\r\n      category: newProduct.category,\r\n      price: newProduct.price,\r\n      stock: parseInt(newProduct.stock) || 0,\r\n      status: newProduct.status,\r\n      sales: 0\r\n    }\r\n    setProductData([...productData, product])\r\n    setNewProduct({ name: \"\", category: \"\", price: \"\", stock: \"\", status: \"active\" })\r\n    setProductModalOpen(false)\r\n    \r\n    toast({\r\n      title: \"Product Added\",\r\n      description: `${newProduct.name} has been added to the catalog.`,\r\n    })\r\n  }\r\n\r\n  // Handle adding new order\r\n  const handleAddOrder = () => {\r\n    if (!newOrder.customer || !newOrder.product || !newOrder.amount) {\r\n      toast({\r\n        title: \"Missing Information\",\r\n        description: \"Please fill in all order details.\",\r\n        variant: \"destructive\"\r\n      })\r\n      return\r\n    }\r\n\r\n    const order: Order = {\r\n      id: `ORD-${String(orderData.length + 1).padStart(3, '0')}`,\r\n      customer: newOrder.customer,\r\n      product: newOrder.product,\r\n      amount: newOrder.amount,\r\n      status: newOrder.status,\r\n      date: new Date().toISOString().split('T')[0]\r\n    }\r\n    setOrderData([...orderData, order])\r\n    setNewOrder({ customer: \"\", product: \"\", amount: \"\", status: \"pending\" })\r\n    setOrderModalOpen(false)\r\n    \r\n    toast({\r\n      title: \"Order Created\",\r\n      description: `Order ${order.id} has been created successfully.`,\r\n    })\r\n  }\r\n\r\n  // Handle deleting items from any table\r\n  const handleDeleteItem = (id: string, type: string, name: string) => {\r\n    switch (type) {\r\n      case 'customer':\r\n        setCustomerData(customerData.filter(item => item.id !== id))\r\n        break\r\n      case 'product':\r\n        setProductData(productData.filter(item => item.id !== id))\r\n        break\r\n      case 'order':\r\n        setOrderData(orderData.filter(item => item.id !== id))\r\n        break\r\n    }\r\n    \r\n    toast({\r\n      title: \"Item Deleted\",\r\n      description: `${name} has been removed successfully.`,\r\n      variant: \"destructive\"\r\n    })\r\n  }\r\n\r\n  // Handle refreshing all table data\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true)\r\n    await new Promise(resolve => setTimeout(resolve, 1500))\r\n    setIsRefreshing(false)\r\n    toast({\r\n      title: \"Tables Refreshed\",\r\n      description: \"All table data has been refreshed.\",\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6 p-6\">\r\n      {/* Page Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Data Tables</h1>\r\n          <p className=\"text-muted-foreground mt-1\">\r\n            Advanced tables with collapsible rows, filtering, and sorting.\r\n          </p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\" \r\n            onClick={handleRefresh}\r\n            disabled={isRefreshing}\r\n          >\r\n            <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n            Refresh\r\n          </Button>\r\n          <V0Button \r\n            prompt=\"just render the ui as it is of this page , dont make any changes, just as it is\"\r\n            code={TABLES_CODE}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Customer Table */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle>Customer Database</CardTitle>\r\n              <CardDescription>\r\n                Manage and view customer information with expandable details\r\n              </CardDescription>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"sm\"\r\n                onClick={() => exportToCSV(customerData, 'customers')}\r\n              >\r\n                <Download className=\"h-4 w-4 mr-2\" />\r\n                Export\r\n              </Button>\r\n              <Dialog open={customerModalOpen} onOpenChange={setCustomerModalOpen}>\r\n                <DialogTrigger asChild>\r\n                  <Button size=\"sm\">\r\n                    <Plus className=\"h-4 w-4 mr-2\" />\r\n                    Add Customer\r\n                  </Button>\r\n                </DialogTrigger>\r\n                <DialogContent>\r\n                  <DialogHeader>\r\n                    <DialogTitle>Add New Customer</DialogTitle>\r\n                    <DialogDescription>\r\n                      Enter the customer details below.\r\n                    </DialogDescription>\r\n                  </DialogHeader>\r\n                  <div className=\"grid gap-4 py-4\">\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"customer\">Customer Name *</Label>\r\n                        <Input\r\n                          id=\"customer\"\r\n                          value={newCustomer.customer}\r\n                          onChange={(e) => setNewCustomer({...newCustomer, customer: e.target.value})}\r\n                          placeholder=\"John Doe\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"email\">Email *</Label>\r\n                        <Input\r\n                          id=\"email\"\r\n                          type=\"email\"\r\n                          value={newCustomer.email}\r\n                          onChange={(e) => setNewCustomer({...newCustomer, email: e.target.value})}\r\n                          placeholder=\"john@example.com\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"phone\">Phone</Label>\r\n                      <Input\r\n                        id=\"phone\"\r\n                        value={newCustomer.phone}\r\n                        onChange={(e) => setNewCustomer({...newCustomer, phone: e.target.value})}\r\n                        placeholder=\"+1 (555) 123-4567\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"address\">Address</Label>\r\n                      <Textarea\r\n                        id=\"address\"\r\n                        value={newCustomer.address}\r\n                        onChange={(e) => setNewCustomer({...newCustomer, address: e.target.value})}\r\n                        placeholder=\"123 Main St, City, State\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"status\">Status</Label>\r\n                      <Select value={newCustomer.status} onValueChange={(value) => setNewCustomer({...newCustomer, status: value})}>\r\n                        <SelectTrigger>\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"active\">Active</SelectItem>\r\n                          <SelectItem value=\"pending\">Pending</SelectItem>\r\n                          <SelectItem value=\"inactive\">Inactive</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                  <DialogFooter>\r\n                    <Button variant=\"outline\" onClick={() => setCustomerModalOpen(false)}>\r\n                      Cancel\r\n                    </Button>\r\n                    <Button onClick={handleAddCustomer}>Add Customer</Button>\r\n                  </DialogFooter>\r\n                </DialogContent>\r\n              </Dialog>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Search and Filter Controls */}\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\r\n                <Input \r\n                  placeholder=\"Search customers...\" \r\n                  value={customerSearchTerm}\r\n                  onChange={(e) => setCustomerSearchTerm(e.target.value)}\r\n                  className=\"pl-10 w-64\"\r\n                />\r\n              </div>\r\n              <Select value={customerStatusFilter} onValueChange={setCustomerStatusFilter}>\r\n                <SelectTrigger className=\"w-32\">\r\n                  <Filter className=\"h-4 w-4 mr-2\" />\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Status</SelectItem>\r\n                  <SelectItem value=\"active\">Active</SelectItem>\r\n                  <SelectItem value=\"pending\">Pending</SelectItem>\r\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              {filteredCustomerData.length} of {customerData.length} customers\r\n            </p>\r\n          </div>\r\n\r\n          {/* Customer Table with Expandable Rows */}\r\n          <div className=\"rounded-md border\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead className=\"w-8\"></TableHead>\r\n                  <TableHead>Customer</TableHead>\r\n                  <TableHead>Email</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Amount</TableHead>\r\n                  <TableHead>Date</TableHead>\r\n                  <TableHead className=\"text-right\">Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredCustomerData.map((item) => (\r\n                  <Collapsible key={item.id} asChild>\r\n                    <>\r\n                      <TableRow className=\"cursor-pointer hover:bg-muted/50\">\r\n                        <TableCell>\r\n                          <CollapsibleTrigger asChild>\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              onClick={() => toggleRow(item.id)}\r\n                              className=\"p-0 h-6 w-6\"\r\n                            >\r\n                              {expandedRows.has(item.id) ? (\r\n                                <ChevronDown className=\"h-4 w-4\" />\r\n                              ) : (\r\n                                <ChevronRight className=\"h-4 w-4\" />\r\n                              )}\r\n                            </Button>\r\n                          </CollapsibleTrigger>\r\n                        </TableCell>\r\n                        <TableCell className=\"font-medium\">\r\n                          {item.customer}\r\n                        </TableCell>\r\n                        <TableCell className=\"text-muted-foreground\">\r\n                          {item.email}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge \r\n                            variant=\"outline\" \r\n                            className={getStatusColor(item.status)}\r\n                          >\r\n                            {item.status}\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell className=\"font-mono text-sm\">\r\n                          {item.amount}\r\n                        </TableCell>\r\n                        <TableCell className=\"text-muted-foreground\">\r\n                          {item.date}\r\n                        </TableCell>\r\n                        <TableCell className=\"text-right\">\r\n                          <div className=\"flex items-center justify-end gap-2\">\r\n                            <Button \r\n                              variant=\"ghost\" \r\n                              size=\"sm\"\r\n                              onClick={() => toast({ title: \"View Customer\", description: `Viewing ${item.customer}` })}\r\n                            >\r\n                              <Eye className=\"h-4 w-4\" />\r\n                            </Button>\r\n                            <Button \r\n                              variant=\"ghost\" \r\n                              size=\"sm\"\r\n                              onClick={() => toast({ title: \"Edit Customer\", description: `Edit ${item.customer}` })}\r\n                            >\r\n                              <Edit className=\"h-4 w-4\" />\r\n                            </Button>\r\n                            <Button \r\n                              variant=\"ghost\" \r\n                              size=\"sm\"\r\n                              onClick={() => handleDeleteItem(item.id, 'customer', item.customer)}\r\n                            >\r\n                              <Trash2 className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                      <CollapsibleContent asChild>\r\n                        <TableRow className=\"hover:bg-muted/25\">\r\n                          <TableCell></TableCell>\r\n                          <TableCell colSpan={6}>\r\n                            <div className=\"p-4 bg-muted/25 rounded-md\">\r\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                                <div>\r\n                                  <h4 className=\"text-sm font-medium text-muted-foreground\">Address</h4>\r\n                                  <p className=\"text-sm\">{item.details.address}</p>\r\n                                </div>\r\n                                <div>\r\n                                  <h4 className=\"text-sm font-medium text-muted-foreground\">Phone</h4>\r\n                                  <p className=\"text-sm\">{item.details.phone}</p>\r\n                                </div>\r\n                                <div>\r\n                                  <h4 className=\"text-sm font-medium text-muted-foreground\">Total Orders</h4>\r\n                                  <p className=\"text-sm font-medium\">{item.details.orders}</p>\r\n                                </div>\r\n                                <div>\r\n                                  <h4 className=\"text-sm font-medium text-muted-foreground\">Total Spent</h4>\r\n                                  <p className=\"text-sm font-medium font-mono\">{item.details.totalSpent}</p>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </CollapsibleContent>\r\n                    </>\r\n                  </Collapsible>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Products Table */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle>Product Catalog</CardTitle>\r\n              <CardDescription>\r\n                Manage your products and inventory\r\n              </CardDescription>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"sm\"\r\n                onClick={() => exportToCSV(productData, 'products')}\r\n              >\r\n                <Download className=\"h-4 w-4 mr-2\" />\r\n                Export\r\n              </Button>\r\n              <Dialog open={productModalOpen} onOpenChange={setProductModalOpen}>\r\n                <DialogTrigger asChild>\r\n                  <Button size=\"sm\">\r\n                    <Plus className=\"h-4 w-4 mr-2\" />\r\n                    Add Product\r\n                  </Button>\r\n                </DialogTrigger>\r\n                <DialogContent>\r\n                  <DialogHeader>\r\n                    <DialogTitle>Add New Product</DialogTitle>\r\n                    <DialogDescription>\r\n                      Enter the product details below.\r\n                    </DialogDescription>\r\n                  </DialogHeader>\r\n                  <div className=\"grid gap-4 py-4\">\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"name\">Product Name *</Label>\r\n                        <Input\r\n                          id=\"name\"\r\n                          value={newProduct.name}\r\n                          onChange={(e) => setNewProduct({...newProduct, name: e.target.value})}\r\n                          placeholder=\"Premium Plan\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"category\">Category</Label>\r\n                        <Input\r\n                          id=\"category\"\r\n                          value={newProduct.category}\r\n                          onChange={(e) => setNewProduct({...newProduct, category: e.target.value})}\r\n                          placeholder=\"Subscription\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"price\">Price *</Label>\r\n                        <Input\r\n                          id=\"price\"\r\n                          placeholder=\"$29.99\"\r\n                          value={newProduct.price}\r\n                          onChange={(e) => setNewProduct({...newProduct, price: e.target.value})}\r\n                        />\r\n                      </div>\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"stock\">Stock</Label>\r\n                        <Input\r\n                          id=\"stock\"\r\n                          type=\"number\"\r\n                          value={newProduct.stock}\r\n                          onChange={(e) => setNewProduct({...newProduct, stock: e.target.value})}\r\n                          placeholder=\"100\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"status\">Status</Label>\r\n                      <Select value={newProduct.status} onValueChange={(value) => setNewProduct({...newProduct, status: value})}>\r\n                        <SelectTrigger>\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"active\">Active</SelectItem>\r\n                          <SelectItem value=\"inactive\">Inactive</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                  <DialogFooter>\r\n                    <Button variant=\"outline\" onClick={() => setProductModalOpen(false)}>\r\n                      Cancel\r\n                    </Button>\r\n                    <Button onClick={handleAddProduct}>Add Product</Button>\r\n                  </DialogFooter>\r\n                </DialogContent>\r\n              </Dialog>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Product Search */}\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\r\n              <Input \r\n                placeholder=\"Search products...\" \r\n                value={productSearchTerm}\r\n                onChange={(e) => setProductSearchTerm(e.target.value)}\r\n                className=\"pl-10 w-64\"\r\n              />\r\n            </div>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              {filteredProductData.length} of {productData.length} products\r\n            </p>\r\n          </div>\r\n\r\n          {/* Products Table */}\r\n          <div className=\"rounded-md border\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Name</TableHead>\r\n                  <TableHead>Category</TableHead>\r\n                  <TableHead>Price</TableHead>\r\n                  <TableHead>Stock</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Sales</TableHead>\r\n                  <TableHead className=\"text-right\">Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredProductData.map((item) => (\r\n                  <TableRow key={item.id}>\r\n                    <TableCell className=\"font-medium\">{item.name}</TableCell>\r\n                    <TableCell>{item.category}</TableCell>\r\n                    <TableCell className=\"font-mono\">{item.price}</TableCell>\r\n                    <TableCell>{item.stock}</TableCell>\r\n                    <TableCell>\r\n                      <Badge \r\n                        variant=\"outline\" \r\n                        className={getStatusColor(item.status)}\r\n                      >\r\n                        {item.status}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>{item.sales}</TableCell>\r\n                    <TableCell className=\"text-right\">\r\n                      <div className=\"flex items-center justify-end gap-2\">\r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => toast({ title: \"View Product\", description: `Viewing ${item.name}` })}\r\n                        >\r\n                          <Eye className=\"h-4 w-4\" />\r\n                        </Button>\r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => toast({ title: \"Edit Product\", description: `Edit ${item.name}` })}\r\n                        >\r\n                          <Edit className=\"h-4 w-4\" />\r\n                        </Button>\r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => handleDeleteItem(item.id, 'product', item.name)}\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Orders Table */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle>Order Management</CardTitle>\r\n              <CardDescription>\r\n                Track and manage customer orders\r\n              </CardDescription>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"sm\"\r\n                onClick={() => exportToCSV(orderData, 'orders')}\r\n              >\r\n                <Download className=\"h-4 w-4 mr-2\" />\r\n                Export\r\n              </Button>\r\n              <Dialog open={orderModalOpen} onOpenChange={setOrderModalOpen}>\r\n                <DialogTrigger asChild>\r\n                  <Button size=\"sm\">\r\n                    <Plus className=\"h-4 w-4 mr-2\" />\r\n                    Add Order\r\n                  </Button>\r\n                </DialogTrigger>\r\n                <DialogContent>\r\n                  <DialogHeader>\r\n                    <DialogTitle>Add New Order</DialogTitle>\r\n                    <DialogDescription>\r\n                      Enter the order details below.\r\n                    </DialogDescription>\r\n                  </DialogHeader>\r\n                  <div className=\"grid gap-4 py-4\">\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"orderCustomer\">Customer Name *</Label>\r\n                      <Input\r\n                        id=\"orderCustomer\"\r\n                        value={newOrder.customer}\r\n                        onChange={(e) => setNewOrder({...newOrder, customer: e.target.value})}\r\n                        placeholder=\"John Doe\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"orderProduct\">Product *</Label>\r\n                      <Input\r\n                        id=\"orderProduct\"\r\n                        value={newOrder.product}\r\n                        onChange={(e) => setNewOrder({...newOrder, product: e.target.value})}\r\n                        placeholder=\"Premium Subscription\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"orderAmount\">Amount *</Label>\r\n                      <Input\r\n                        id=\"orderAmount\"\r\n                        placeholder=\"$29.99\"\r\n                        value={newOrder.amount}\r\n                        onChange={(e) => setNewOrder({...newOrder, amount: e.target.value})}\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"orderStatus\">Status</Label>\r\n                      <Select value={newOrder.status} onValueChange={(value) => setNewOrder({...newOrder, status: value})}>\r\n                        <SelectTrigger>\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"pending\">Pending</SelectItem>\r\n                          <SelectItem value=\"completed\">Completed</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                  <DialogFooter>\r\n                    <Button variant=\"outline\" onClick={() => setOrderModalOpen(false)}>\r\n                      Cancel\r\n                    </Button>\r\n                    <Button onClick={handleAddOrder}>Add Order</Button>\r\n                  </DialogFooter>\r\n                </DialogContent>\r\n              </Dialog>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Order Search */}\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\r\n              <Input \r\n                placeholder=\"Search orders...\" \r\n                value={orderSearchTerm}\r\n                onChange={(e) => setOrderSearchTerm(e.target.value)}\r\n                className=\"pl-10 w-64\"\r\n              />\r\n            </div>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              {filteredOrderData.length} of {orderData.length} orders\r\n            </p>\r\n          </div>\r\n\r\n          {/* Orders Table */}\r\n          <div className=\"rounded-md border\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Order ID</TableHead>\r\n                  <TableHead>Customer</TableHead>\r\n                  <TableHead>Product</TableHead>\r\n                  <TableHead>Amount</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Date</TableHead>\r\n                  <TableHead className=\"text-right\">Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredOrderData.map((item) => (\r\n                  <TableRow key={item.id}>\r\n                    <TableCell className=\"font-mono\">{item.id}</TableCell>\r\n                    <TableCell className=\"font-medium\">{item.customer}</TableCell>\r\n                    <TableCell>{item.product}</TableCell>\r\n                    <TableCell className=\"font-mono\">{item.amount}</TableCell>\r\n                    <TableCell>\r\n                      <Badge \r\n                        variant=\"outline\" \r\n                        className={getStatusColor(item.status)}\r\n                      >\r\n                        {item.status}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell className=\"text-muted-foreground\">{item.date}</TableCell>\r\n                    <TableCell className=\"text-right\">\r\n                      <div className=\"flex items-center justify-end gap-2\">\r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => toast({ title: \"View Order\", description: `Viewing order ${item.id}` })}\r\n                        >\r\n                          <Eye className=\"h-4 w-4\" />\r\n                        </Button>\r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => toast({ title: \"Edit Order\", description: `Edit order ${item.id}` })}\r\n                        >\r\n                          <Edit className=\"h-4 w-4\" />\r\n                        </Button>\r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => handleDeleteItem(item.id, 'order', `Order ${item.id}`)}\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}"
    }
  ],
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {}
      }
    }
  }
}